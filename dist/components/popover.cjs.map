{"version":3,"file":"popover.cjs","sources":["../../src/components/popover.ts"],"sourcesContent":["/* Native JavaScript for Bootstrap 5 | Popover\n---------------------------------------------- */\nimport { getInstance, ObjectAssign, focus } from '@thednp/shorty';\n\nimport dataBsToggle from '../strings/dataBsToggle';\nimport popoverString from '../strings/popoverString';\nimport popoverComponent from '../strings/popoverComponent';\n\nimport getTipTemplate from '../util/getTipTemplate';\nimport styleTip from '../util/styleTip';\nimport tooltipDefaults from '../util/tooltipDefaults';\nimport Tooltip from './tooltip';\n\nimport type { PopoverOptions /* , PopoverEvent */ } from '../interface/popover';\n\n// POPOVER PRIVATE GC\n// ==================\nconst popoverSelector = `[${dataBsToggle}=\"${popoverString}\"],[data-tip=\"${popoverString}\"]`;\n\nconst popoverDefaults: PopoverOptions = ObjectAssign({}, tooltipDefaults, {\n  template: getTipTemplate(popoverString),\n  content: '',\n  dismissible: false,\n  btnClose: '<button class=\"btn-close\" aria-label=\"Close\"></button>',\n});\n\n/**\n * Static method which returns an existing `Popover` instance associated\n * to a target `Element`.\n *\n */\nconst getPopoverInstance = (element: HTMLElement) => getInstance<Popover>(element, popoverComponent);\n\n/**\n * A `Popover` initialization callback.\n */\nconst popoverInitCallback = (element: HTMLElement) => new Popover(element);\n\n// POPOVER DEFINITION\n// ==================\n/** Returns a new `Popover` instance. */\nexport default class Popover extends Tooltip {\n  static selector = popoverSelector;\n  static init = popoverInitCallback;\n  static getInstance = getPopoverInstance;\n  static styleTip = styleTip;\n  declare options: PopoverOptions;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<PopoverOptions>) {\n    super(target, config);\n  }\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return popoverComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return popoverDefaults;\n  }\n\n  /* extend original `show()` */\n  show = () => {\n    super.show();\n    // btn only exists within dismissible popover\n    const { options, btn } = this;\n    /* istanbul ignore else */\n    if (options.dismissible && btn) setTimeout(() => focus(btn), 17);\n  };\n}\n"],"names":["popoverSelector","dataBsToggle","popoverString","popoverDefaults","ObjectAssign","tooltipDefaults","getTipTemplate","getPopoverInstance","element","getInstance","popoverComponent","popoverInitCallback","Popover","Tooltip","target","config","__publicField","options","btn","focus","styleTip"],"mappings":"0dAiBA,MAAMA,EAAkB,IAAIC,cAAY,KAAKC,EAAAA,aAAa,iBAAiBA,eAAa,KAElFC,EAAkCC,EAAAA,aAAa,CAAC,EAAGC,kBAAiB,CACxE,SAAUC,iBAAeJ,eAAa,EACtC,QAAS,GACT,YAAa,GACb,SAAU,wDACZ,CAAC,EAOKK,EAAsBC,GAAyBC,EAAA,YAAqBD,EAASE,EAAgB,gBAAA,EAK7FC,EAAuBH,GAAyB,IAAII,EAAQJ,CAAO,EAKzE,MAAqBI,UAAgBC,EAAAA,OAAQ,CAW3C,YAAYC,EAA8BC,EAAkC,CAC1E,MAAMD,EAAQC,CAAM,EAgBtBC,EAAA,YAAO,IAAM,CACX,MAAM,KAAK,EAEL,KAAA,CAAE,QAAAC,EAAS,IAAAC,CAAQ,EAAA,KAErBD,EAAQ,aAAeC,GAAK,WAAW,IAAMC,EAAA,MAAMD,CAAG,EAAG,EAAE,CAAA,EApBjE,CAIA,IAAI,MAAO,CACF,OAAAR,kBACT,CAIA,IAAI,UAAW,CACN,OAAAP,CACT,CAUF,CAlCEa,EADmBJ,EACZ,WAAWZ,GAClBgB,EAFmBJ,EAEZ,OAAOD,GACdK,EAHmBJ,EAGZ,cAAcL,GACrBS,EAJmBJ,EAIZ,WAAWQ,EAAAA"}