{"version":3,"file":"createTip-c738ae49.js","sources":["../../src/strings/popoverString.ts","../../src/strings/tooltipComponent.ts","../../src/util/createTip.ts"],"sourcesContent":["/** @type {string} */\nconst popoverString = 'popover';\nexport default popoverString;\n","/** @type {string} */\nconst tooltipComponent = 'Tooltip';\nexport default tooltipComponent;\n","import { createElement, addClass, hasClass, setAttribute, querySelector, isRTL, isHTMLElement } from '@thednp/shorty';\n\nimport tooltipComponent from '../strings/tooltipComponent';\nimport tooltipString from '../strings/tooltipString';\nimport popoverString from '../strings/popoverString';\nimport fadeClass from '../strings/fadeClass';\nimport tipClassPositions from './tipClassPositions';\nimport setHtml from './setHtml';\nimport Tooltip from '../components/tooltip';\nimport Popover from '../components/popover';\n\n/**\n * Creates a new tooltip / popover.\n *\n * @param self the `Tooltip` / `Popover` instance\n */\nconst createTip = (self: Tooltip | Popover) => {\n  const isTooltip = self.name === tooltipComponent;\n\n  const { id, element, options } = self;\n  const { title, placement, template, animation, customClass, sanitizeFn, dismissible, content, btnClose } = options;\n  const tipString = isTooltip ? tooltipString : popoverString;\n  const tipPositions = { ...tipClassPositions };\n  let titleParts: Node[] = [];\n  let contentParts: Node[] = [];\n\n  if (isRTL(element)) {\n    tipPositions.left = 'end';\n    tipPositions.right = 'start';\n  }\n\n  // set initial popover class\n  const placementClass = `bs-${tipString}-${tipPositions[placement]}`;\n\n  // load template\n  let tooltipTemplate: Node | string;\n  if (isHTMLElement(template)) {\n    tooltipTemplate = template;\n  } else {\n    const htmlMarkup = createElement('div') as HTMLElement;\n    setHtml(htmlMarkup, template, sanitizeFn);\n    tooltipTemplate = htmlMarkup.firstChild as HTMLElement;\n  }\n\n  // set popover markup\n  self.tooltip = isHTMLElement(tooltipTemplate) ? (tooltipTemplate.cloneNode(true) as HTMLElement) : undefined;\n\n  const { tooltip } = self;\n  if (!tooltip) return;\n\n  // set id and role attributes\n  setAttribute(tooltip, 'id', id);\n  setAttribute(tooltip, 'role', tooltipString);\n\n  const bodyClass = isTooltip ? `${tooltipString}-inner` : `${popoverString}-body`;\n  const tooltipHeader = isTooltip ? null : querySelector(`.${popoverString}-header`, tooltip);\n  const tooltipBody = querySelector(`.${bodyClass}`, tooltip);\n\n  // set arrow and enable access for styleTip\n  self.arrow = querySelector(`.${tipString}-arrow`, tooltip) as HTMLElement;\n  const { arrow } = self;\n\n  if (isHTMLElement(title)) titleParts = [title.cloneNode(true)];\n  else {\n    const tempTitle = createElement('div') as Node;\n    setHtml(tempTitle, title, sanitizeFn);\n    titleParts = [...[...tempTitle.childNodes]];\n  }\n\n  if (isHTMLElement(content)) contentParts = [content.cloneNode(true)];\n  else {\n    const tempContent = createElement('div') as Node;\n    setHtml(tempContent, content, sanitizeFn);\n    contentParts = [...[...tempContent.childNodes]];\n  }\n\n  // set dismissible button\n  if (dismissible) {\n    if (title) {\n      if (isHTMLElement(btnClose)) titleParts = [...titleParts, btnClose.cloneNode(true)];\n      else {\n        const tempBtn = createElement('div') as Node;\n        setHtml(tempBtn, btnClose, sanitizeFn);\n        titleParts = [...titleParts, tempBtn.firstChild as Node];\n      }\n    } else {\n      /* istanbul ignore else */\n      if (tooltipHeader) tooltipHeader.remove();\n      if (isHTMLElement(btnClose)) contentParts = [...contentParts, btnClose.cloneNode(true)];\n      else {\n        const tempBtn = createElement('div') as Node;\n        setHtml(tempBtn, btnClose, sanitizeFn);\n        contentParts = [...contentParts, tempBtn.firstChild as Node];\n      }\n    }\n  }\n\n  // fill the template with content from options / data attributes\n  // also sanitize title && content\n  /* istanbul ignore else */\n  if (!isTooltip) {\n    /* istanbul ignore else */\n    if (title && tooltipHeader) setHtml(tooltipHeader, titleParts, sanitizeFn);\n    /* istanbul ignore else */\n    if (content && tooltipBody) setHtml(tooltipBody, contentParts, sanitizeFn);\n    // set btn\n    self.btn = querySelector('.btn-close', tooltip) || undefined;\n  } else if (title && tooltipBody) setHtml(tooltipBody, title, sanitizeFn);\n\n  // Bootstrap 5.2.x\n  // addClass(tooltip, 'position-absolute');\n  addClass(tooltip, 'position-fixed');\n  addClass(arrow, 'position-absolute');\n\n  // set popover animation and placement\n  /* istanbul ignore else */\n  if (!hasClass(tooltip, tipString)) addClass(tooltip, tipString);\n  /* istanbul ignore else */\n  if (animation && !hasClass(tooltip, fadeClass)) addClass(tooltip, fadeClass);\n  /* istanbul ignore else */\n  if (customClass && !hasClass(tooltip, customClass)) {\n    addClass(tooltip, customClass);\n  }\n  /* istanbul ignore else */\n  if (!hasClass(tooltip, placementClass)) addClass(tooltip, placementClass);\n};\n\nexport default createTip;\n"],"names":["popoverString","tooltipComponent","createTip","self","isTooltip","id","element","options","title","placement","template","animation","customClass","sanitizeFn","dismissible","content","btnClose","tipString","tooltipString","tipPositions","tipClassPositions","titleParts","contentParts","isRTL","placementClass","tooltipTemplate","isHTMLElement","htmlMarkup","createElement","setHtml","tooltip","setAttribute","bodyClass","tooltipHeader","querySelector","tooltipBody","arrow","tempTitle","tempContent","tempBtn","addClass","hasClass","fadeClass"],"mappings":"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"}