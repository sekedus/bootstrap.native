{"version":3,"file":"modal.mjs","sources":["../../src/components/modal.ts"],"sourcesContent":["/* Native JavaScript for Bootstrap 5 | Modal\n-------------------------------------------- */\nimport {\n  keyEscape,\n  getElementTransitionDuration,\n  removeAttribute,\n  setAttribute,\n  keydownEvent,\n  mouseclickEvent,\n  resizeEvent,\n  ariaModal,\n  ariaHidden,\n  getInstance,\n  isHTMLElement,\n  isRTL,\n  isFunction,\n  removeClass,\n  hasClass,\n  addClass,\n  closest,\n  querySelectorAll,\n  querySelector,\n  getDocumentElement,\n  getDocumentBody,\n  getDocument,\n  getWindow,\n  CSS4Declaration,\n  setElementStyle,\n  createCustomEvent,\n  emulateTransitionEnd,\n  passiveHandler,\n  dispatchEvent,\n  focus,\n  Timer,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport dataBsToggle from '../strings/dataBsToggle';\nimport dataBsDismiss from '../strings/dataBsDismiss';\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport modalString from '../strings/modalString';\nimport modalComponent from '../strings/modalComponent';\nimport offcanvasComponent from '../strings/offcanvasComponent';\n\nimport getTargetElement from '../util/getTargetElement';\nimport { setScrollbar, measureScrollbar } from '../util/scrollbar';\nimport {\n  overlay,\n  modalActiveSelector,\n  toggleOverlayType,\n  appendOverlay,\n  showOverlay,\n  hideOverlay,\n  getCurrentOpen,\n  removeOverlay,\n} from '../util/backdrop';\nimport isVisible from '../util/isVisible';\nimport BaseComponent from './base-component';\nimport { ModalOptions, ModalEvent } from '../interface/modal';\nimport { hasPopup } from '../util/popupContainer';\n\n// MODAL PRIVATE GC\n// ================\nconst modalSelector = `.${modalString}`;\nconst modalToggleSelector = `[${dataBsToggle}=\"${modalString}\"]`;\nconst modalDismissSelector = `[${dataBsDismiss}=\"${modalString}\"]`;\nconst modalStaticClass = `${modalString}-static`;\n\nconst modalDefaults = {\n  backdrop: true,\n  keyboard: true,\n};\n\n/**\n * Static method which returns an existing `Modal` instance associated\n * to a target `Element`.\n */\nconst getModalInstance = (element: HTMLElement) => getInstance<Modal>(element, modalComponent);\n\n/**\n * A `Modal` initialization callback.\n */\nconst modalInitCallback = (element: HTMLElement) => new Modal(element);\n\n// MODAL CUSTOM EVENTS\n// ===================\nconst showModalEvent = createCustomEvent<ModalEvent>(`show.bs.${modalString}`);\nconst shownModalEvent = createCustomEvent<ModalEvent>(`shown.bs.${modalString}`);\nconst hideModalEvent = createCustomEvent<ModalEvent>(`hide.bs.${modalString}`);\nconst hiddenModalEvent = createCustomEvent<ModalEvent>(`hidden.bs.${modalString}`);\n\n// MODAL PRIVATE METHODS\n// =====================\n/**\n * Applies special style for the `<body>` and fixed elements\n * when a modal instance is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst setModalScrollbar = (self: Modal) => {\n  const { element } = self;\n  const scrollbarWidth = measureScrollbar(element);\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  const { clientHeight: modalHeight, scrollHeight: modalScrollHeight } = element;\n  const modalOverflow = modalHeight !== modalScrollHeight;\n\n  /* istanbul ignore else */\n  if (!modalOverflow && scrollbarWidth) {\n    const pad = !isRTL(element) ? 'paddingRight' : /* istanbul ignore next */ 'paddingLeft';\n    const padStyle = {} as Partial<CSS4Declaration>;\n    padStyle[pad] = `${scrollbarWidth}px`;\n    setElementStyle(element, padStyle);\n  }\n  setScrollbar(element, modalOverflow || clientHeight !== scrollHeight);\n};\n\n/**\n * Toggles on/off the listeners of events that close the modal.\n *\n * @param self the `Modal` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleModalDismiss = (self: Modal, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n  action(element, mouseclickEvent, modalDismissHandler as EventListener);\n  action(getWindow(element), resizeEvent, self.update, passiveHandler);\n  action(getDocument(element), keydownEvent, modalKeyHandler as EventListener);\n};\n\n/**\n * Toggles on/off the `click` event listener of the `Modal` instance.\n *\n * @param self the `Modal` instance\n * @param add when `true`, event listener is added\n */\nconst toggleModalHandler = (self: Modal, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { triggers } = self;\n\n  /* istanbul ignore else */\n  if (triggers.length) {\n    triggers.forEach(btn => action(btn, mouseclickEvent, modalClickHandler as EventListener));\n  }\n};\n\n/**\n * Executes after a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n * @param callback the `Modal` instance\n */\nconst afterModalHide = (self: Modal, callback?: () => void) => {\n  const { triggers, element, relatedTarget } = self;\n  removeOverlay(element);\n  setElementStyle(element, { paddingRight: '', display: '' });\n  toggleModalDismiss(self);\n\n  const focusElement = showModalEvent.relatedTarget || triggers.find(isVisible);\n  /* istanbul ignore else */\n  if (focusElement) focus(focusElement as HTMLElement);\n\n  /* istanbul ignore else */\n  if (isFunction(callback)) callback();\n\n  hiddenModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, hiddenModalEvent);\n};\n\n/**\n * Executes after a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalShow = (self: Modal) => {\n  const { element, relatedTarget } = self;\n  focus(element);\n  toggleModalDismiss(self, true);\n\n  shownModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, shownModalEvent);\n};\n\n/**\n * Executes before a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalShow = (self: Modal) => {\n  const { element, hasFade } = self;\n  setElementStyle(element, { display: 'block' });\n\n  setModalScrollbar(self);\n  /* istanbul ignore else */\n  if (!getCurrentOpen(element)) {\n    setElementStyle(getDocumentBody(element), { overflow: 'hidden' });\n  }\n\n  addClass(element, showClass);\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, 'true');\n\n  if (hasFade) emulateTransitionEnd(element, () => afterModalShow(self));\n  else afterModalShow(self);\n};\n\n/**\n * Executes before a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n * @param callback when `true` skip animation\n */\nconst beforeModalHide = (self: Modal, callback?: () => void) => {\n  const { element, options, hasFade } = self;\n\n  // callback can also be the transitionEvent object, we wanna make sure it's not\n  // call is not forced and overlay is visible\n  if (options.backdrop && !callback && hasFade && hasClass(overlay, showClass) && !getCurrentOpen(element)) {\n    // AND no modal is visible\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => afterModalHide(self));\n  } else {\n    afterModalHide(self, callback);\n  }\n};\n\n// MODAL EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for modal.\n *\n * @param e the `Event` object\n */\nconst modalClickHandler = (e: MouseEvent) => {\n  const { target } = e;\n\n  const trigger = target && closest(target as HTMLElement, modalToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getModalInstance(element);\n\n  /* istanbul ignore next */\n  if (!self) return;\n\n  /* istanbul ignore else */\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n  self.relatedTarget = trigger;\n  self.toggle();\n};\n\n/**\n * Handles the `keydown` event listener for modal\n * to hide the modal when user type the `ESC` key.\n *\n * @param e the `Event` object\n */\nconst modalKeyHandler = ({ code, target }: KeyboardEvent) => {\n  const element = querySelector(modalActiveSelector, getDocument(target as Node));\n  const self = element && getModalInstance(element);\n\n  /* istanbul ignore next */\n  if (!self) return;\n\n  const { options } = self;\n  /* istanbul ignore else */\n  if (\n    options.keyboard &&\n    code === keyEscape && // the keyboard option is enabled and the key is 27\n    hasClass(element, showClass)\n  ) {\n    // the modal is not visible\n    self.relatedTarget = null;\n    self.hide();\n  }\n};\n\n/**\n * Handles the `click` event listeners that hide the modal.\n *\n * @param e the `Event` object\n */\nfunction modalDismissHandler(this: HTMLElement, e: MouseEvent) {\n  const self = getModalInstance(this);\n\n  // this timer is needed\n  /* istanbul ignore next: must have a filter */\n  if (!self || Timer.get(this)) return;\n\n  const { options, isStatic, modalDialog } = self;\n  const { backdrop } = options;\n  const { target } = e;\n\n  const selectedText = getDocument(this)?.getSelection()?.toString().length;\n  const targetInsideDialog = modalDialog?.contains(target as HTMLElement);\n  const dismiss = target && closest(target as HTMLElement, modalDismissSelector);\n\n  /* istanbul ignore else */\n  if (isStatic && !targetInsideDialog) {\n    Timer.set(\n      this,\n      () => {\n        addClass(this, modalStaticClass);\n        emulateTransitionEnd(modalDialog as HTMLElement, () => staticTransitionEnd(self));\n      },\n      17,\n    );\n  } else if (dismiss || (!selectedText && !isStatic && !targetInsideDialog && backdrop)) {\n    self.relatedTarget = dismiss || null;\n    self.hide();\n    e.preventDefault();\n  }\n}\n\n/**\n * Handles the `transitionend` event listeners for `Modal`.\n *\n * @param self the `Modal` instance\n */\nconst staticTransitionEnd = (self: Modal) => {\n  const { element, modalDialog } = self;\n  const duration = (isHTMLElement(modalDialog) ? getElementTransitionDuration(modalDialog) : 0) + 17;\n  removeClass(element, modalStaticClass);\n  // user must wait for zoom out transition\n  Timer.set(element, () => Timer.clear(element), duration);\n};\n\n// MODAL DEFINITION\n// ================\n/** Returns a new `Modal` instance. */\nexport default class Modal extends BaseComponent {\n  static selector = modalSelector;\n  static init = modalInitCallback;\n  static getInstance = getModalInstance;\n  declare options: ModalOptions;\n  declare modalDialog: HTMLElement | null;\n  declare triggers: HTMLElement[];\n  declare isStatic: boolean;\n  declare hasFade: boolean;\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target usually the `.modal` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ModalOptions>) {\n    super(target, config);\n\n    // the modal\n    const { element } = this;\n\n    // the modal-dialog\n    this.modalDialog = querySelector(`.${modalString}-dialog`, element);\n\n    // modal can have multiple triggering elements\n    this.triggers = [...querySelectorAll(modalToggleSelector, getDocument(element))].filter(\n      btn => getTargetElement(btn) === element,\n    );\n\n    // additional internals\n    this.isStatic = this.options.backdrop === 'static';\n    this.hasFade = hasClass(element, fadeClass);\n    this.relatedTarget = null;\n\n    // attach event listeners\n    toggleModalHandler(this, true);\n\n    // bind\n    this.update = this.update.bind(this);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return modalComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return modalDefaults;\n  }\n\n  // MODAL PUBLIC METHODS\n  // ====================\n  /** Toggles the visibility of the modal. */\n  toggle() {\n    if (hasClass(this.element, showClass)) this.hide();\n    else this.show();\n  }\n\n  /** Shows the modal to the user. */\n  show() {\n    const { element, options, hasFade, relatedTarget } = this;\n    const { backdrop } = options;\n    let overlayDelay = 0;\n\n    if (hasClass(element, showClass)) return;\n\n    showModalEvent.relatedTarget = relatedTarget || undefined;\n    dispatchEvent(element, showModalEvent);\n    if (showModalEvent.defaultPrevented) return;\n\n    // we elegantly hide any opened modal/offcanvas\n    const currentOpen = getCurrentOpen(element);\n\n    if (currentOpen && currentOpen !== element) {\n      const that =\n        getModalInstance(currentOpen) ||\n        /* istanbul ignore next */\n        getInstance<typeof BaseComponent & { hide: () => void }>(currentOpen, offcanvasComponent);\n      if (that) that.hide();\n    }\n    if (backdrop) {\n      if (!hasPopup(overlay)) {\n        appendOverlay(element, hasFade, true);\n      } else {\n        toggleOverlayType(true);\n      }\n\n      overlayDelay = getElementTransitionDuration(overlay);\n      showOverlay();\n      setTimeout(() => beforeModalShow(this), overlayDelay);\n    } else {\n      beforeModalShow(this);\n      /* istanbul ignore else */\n      if (currentOpen && hasClass(overlay, showClass)) {\n        hideOverlay();\n      }\n    }\n  }\n\n  /**\n   * Hide the modal from the user.\n   *\n   * @param callback when defined it will skip animation\n   */\n  hide(callback?: () => void) {\n    const { element, hasFade, relatedTarget } = this;\n\n    if (!hasClass(element, showClass)) return;\n\n    hideModalEvent.relatedTarget = relatedTarget || undefined;\n    dispatchEvent(element, hideModalEvent);\n    if (hideModalEvent.defaultPrevented) return;\n    removeClass(element, showClass);\n    setAttribute(element, ariaHidden, 'true');\n    removeAttribute(element, ariaModal);\n\n    // if (hasFade && callback) {\n    /* istanbul ignore else */\n    if (hasFade) {\n      emulateTransitionEnd(element, () => beforeModalHide(this, callback));\n    } else {\n      beforeModalHide(this, callback);\n    }\n  }\n\n  /**\n   * Updates the modal layout.\n   */\n  update() {\n    /* istanbul ignore else */\n    if (hasClass(this.element, showClass)) setModalScrollbar(this);\n  }\n\n  /** Removes the `Modal` component from target element. */\n  dispose() {\n    toggleModalHandler(this);\n    // use callback\n    this.hide(() => super.dispose());\n  }\n}\n"],"names":["modalSelector","modalString","modalToggleSelector","dataBsToggle","modalDismissSelector","dataBsDismiss","modalStaticClass","modalDefaults","getModalInstance","element","getInstance","modalComponent","modalInitCallback","Modal","showModalEvent","createCustomEvent","shownModalEvent","hideModalEvent","hiddenModalEvent","setModalScrollbar","self","scrollbarWidth","measureScrollbar","clientHeight","scrollHeight","getDocumentElement","modalHeight","modalScrollHeight","modalOverflow","pad","isRTL","padStyle","setElementStyle","setScrollbar","toggleModalDismiss","add","action","addListener","removeListener","mouseclickEvent","modalDismissHandler","getWindow","resizeEvent","passiveHandler","getDocument","keydownEvent","modalKeyHandler","toggleModalHandler","triggers","btn","modalClickHandler","afterModalHide","callback","relatedTarget","removeOverlay","focusElement","isVisible","focus","isFunction","dispatchEvent","afterModalShow","beforeModalShow","hasFade","getCurrentOpen","getDocumentBody","addClass","showClass","removeAttribute","ariaHidden","setAttribute","ariaModal","emulateTransitionEnd","beforeModalHide","options","hasClass","overlay","hideOverlay","e","target","trigger","closest","getTargetElement","code","querySelector","modalActiveSelector","keyEscape","Timer","isStatic","modalDialog","backdrop","selectedText","targetInsideDialog","dismiss","staticTransitionEnd","duration","isHTMLElement","getElementTransitionDuration","removeClass","BaseComponent","config","querySelectorAll","fadeClass","overlayDelay","currentOpen","that","offcanvasComponent","hasPopup","toggleOverlayType","appendOverlay","showOverlay"],"mappings":"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"}