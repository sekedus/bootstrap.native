{"version":3,"file":"modal.mjs","sources":["../../src/components/modal.ts"],"sourcesContent":["/* Native JavaScript for Bootstrap 5 | Modal\n-------------------------------------------- */\nimport {\n  addClass,\n  ariaHidden,\n  ariaModal,\n  closest,\n  createCustomEvent,\n  CSS4Declaration,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focus,\n  getDocument,\n  getDocumentBody,\n  getDocumentElement,\n  getElementTransitionDuration,\n  getInstance,\n  getWindow,\n  hasClass,\n  isRTL,\n  KeyboardEvent,\n  keydownEvent,\n  keyEscape,\n  mouseclickEvent,\n  MouseEvent,\n  passiveHandler,\n  querySelector,\n  querySelectorAll,\n  removeAttribute,\n  removeClass,\n  resizeEvent,\n  setAttribute,\n  setElementStyle,\n  Timer,\n  toggleFocusTrap,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport dataBsDismiss from \"../strings/dataBsDismiss\";\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport modalString from \"../strings/modalString\";\nimport modalComponent from \"../strings/modalComponent\";\nimport offcanvasComponent from \"../strings/offcanvasComponent\";\nimport getTargetElement from \"../util/getTargetElement\";\nimport { measureScrollbar, setScrollbar } from \"../util/scrollbar\";\nimport {\n  appendOverlay,\n  getCurrentOpen,\n  hideOverlay,\n  modalActiveSelector,\n  overlay,\n  removeOverlay,\n  showOverlay,\n  toggleOverlayType,\n} from \"../util/backdrop\";\nimport isVisible from \"../util/isVisible\";\nimport BaseComponent from \"./base-component\";\nimport { ModalEvent, ModalOptions } from \"../interface/modal\";\nimport { hasPopup } from \"../util/popupContainer\";\n\n// MODAL PRIVATE GC\n// ================\nconst modalSelector = `.${modalString}`;\nconst modalToggleSelector = `[${dataBsToggle}=\"${modalString}\"]`;\nconst modalDismissSelector = `[${dataBsDismiss}=\"${modalString}\"]`;\nconst modalStaticClass = `${modalString}-static`;\n\nconst modalDefaults = {\n  backdrop: true,\n  keyboard: true,\n};\n\ntype ModalEventProps = {\n  relatedTarget: HTMLElement | undefined;\n};\n\n/**\n * Static method which returns an existing `Modal` instance associated\n * to a target `Element`.\n */\nconst getModalInstance = (element: HTMLElement) =>\n  getInstance<Modal>(element, modalComponent);\n\n/**\n * A `Modal` initialization callback.\n */\nconst modalInitCallback = (element: HTMLElement) => new Modal(element);\n\n// MODAL CUSTOM EVENTS\n// ===================\nconst showModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `show.bs.${modalString}`,\n);\nconst shownModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `shown.bs.${modalString}`,\n);\nconst hideModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `hide.bs.${modalString}`,\n);\nconst hiddenModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `hidden.bs.${modalString}`,\n);\n\n// MODAL PRIVATE METHODS\n// =====================\n/**\n * Applies special style for the `<body>` and fixed elements\n * when a modal instance is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst setModalScrollbar = (self: Modal) => {\n  const { element } = self;\n  const scrollbarWidth = measureScrollbar(element);\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  const { clientHeight: modalHeight, scrollHeight: modalScrollHeight } =\n    element;\n  const modalOverflow = modalHeight !== modalScrollHeight;\n\n  // istanbul ignore next @preserve: impossible to test?\n  if (!modalOverflow && scrollbarWidth) {\n    const pad = !isRTL(element)\n      ? \"paddingRight\"\n      // istanbul ignore next @preserve\n      : \"paddingLeft\";\n    const padStyle = { [pad]: `${scrollbarWidth}px` } as Partial<\n      CSS4Declaration\n    >;\n    setElementStyle(element, padStyle);\n  }\n  setScrollbar(element, modalOverflow || clientHeight !== scrollHeight);\n};\n\n/**\n * Toggles on/off the listeners of events that close the modal.\n *\n * @param self the `Modal` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleModalDismiss = (self: Modal, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element, update } = self;\n  action(element, mouseclickEvent, modalDismissHandler);\n  action(getWindow(element), resizeEvent, update, passiveHandler);\n  action(getDocument(element), keydownEvent, modalKeyHandler);\n};\n\n/**\n * Executes after a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalHide = (self: Modal) => {\n  const { triggers, element, relatedTarget } = self;\n  removeOverlay(element);\n  setElementStyle(element, { paddingRight: \"\", display: \"\" });\n  toggleModalDismiss(self);\n\n  const focusElement = showModalEvent.relatedTarget || triggers.find(isVisible);\n  // istanbul ignore else @preserve\n  if (focusElement) focus(focusElement as HTMLElement);\n\n  hiddenModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, hiddenModalEvent);\n  toggleFocusTrap(element);\n};\n\n/**\n * Executes after a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalShow = (self: Modal) => {\n  const { element, relatedTarget } = self;\n  focus(element);\n  toggleModalDismiss(self, true);\n\n  shownModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, shownModalEvent);\n  toggleFocusTrap(element);\n};\n\n/**\n * Executes before a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalShow = (self: Modal) => {\n  const { element, hasFade } = self;\n  setElementStyle(element, { display: \"block\" });\n  setModalScrollbar(self);\n  // istanbul ignore else @preserve\n  if (!getCurrentOpen(element)) {\n    setElementStyle(getDocumentBody(element), { overflow: \"hidden\" });\n  }\n\n  addClass(element, showClass);\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, \"true\");\n\n  if (hasFade) emulateTransitionEnd(element, () => afterModalShow(self));\n  else afterModalShow(self);\n};\n\n/**\n * Executes before a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalHide = (self: Modal) => {\n  const { element, options, hasFade } = self;\n\n  // callback can also be the transitionEvent object, we wanna make sure it's not\n  // call is not forced and overlay is visible\n  if (\n    options.backdrop && hasFade && hasClass(overlay, showClass) &&\n    !getCurrentOpen(element)\n  ) {\n    // AND no modal is visible\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => afterModalHide(self));\n  } else {\n    afterModalHide(self);\n  }\n};\n\n// MODAL EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for modal.\n *\n * @param e the `Event` object\n */\nconst modalClickHandler = (e: MouseEvent<HTMLElement>) => {\n  const { target } = e;\n\n  const trigger = target && closest(target, modalToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getModalInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    // istanbul ignore else @preserve\n    if (trigger && trigger.tagName === \"A\") e.preventDefault();\n    self.relatedTarget = trigger;\n    self.toggle();\n  }\n};\n\n/**\n * Handles the `keydown` event listener for modal\n * to hide the modal when user type the `ESC` key.\n *\n * @param e the `Event` object\n */\nconst modalKeyHandler = ({ code, target }: KeyboardEvent<HTMLElement>) => {\n  const element = querySelector(modalActiveSelector, getDocument(target));\n  const self = element && getModalInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    const { options } = self;\n    // istanbul ignore else @preserve\n    if (\n      options.keyboard &&\n      code === keyEscape && // the keyboard option is enabled and the key is 27\n      hasClass(element, showClass)\n    ) {\n      // the modal is not visible\n      self.relatedTarget = null;\n      self.hide();\n    }\n  }\n};\n\n/**\n * Handles the `click` event listeners that hide the modal.\n *\n * @param e the `Event` object\n */\nconst modalDismissHandler = (e: MouseEvent<HTMLElement>) => {\n  const { currentTarget } = e;\n  const self = currentTarget && getModalInstance(currentTarget);\n\n  // this timer is needed\n  // istanbul ignore else @preserve\n  if (self && currentTarget && !Timer.get(currentTarget)) {\n    const { options, isStatic, modalDialog } = self;\n    const { backdrop } = options;\n    const { target } = e;\n\n    const selectedText = getDocument(currentTarget)?.getSelection()?.toString()\n      .length;\n    const targetInsideDialog = modalDialog.contains(target);\n    const dismiss = target && closest(target, modalDismissSelector);\n\n    // istanbul ignore else @preserve\n    if (isStatic && !targetInsideDialog) {\n      Timer.set(\n        currentTarget,\n        () => {\n          addClass(currentTarget, modalStaticClass);\n          emulateTransitionEnd(modalDialog, () => staticTransitionEnd(self));\n        },\n        17,\n      );\n    } else if (\n      dismiss || (!selectedText && !isStatic && !targetInsideDialog && backdrop)\n    ) {\n      self.relatedTarget = dismiss || null;\n      self.hide();\n      e.preventDefault();\n    }\n  }\n};\n\n/**\n * Handles the `transitionend` event listeners for `Modal`.\n *\n * @param self the `Modal` instance\n */\nconst staticTransitionEnd = (self: Modal) => {\n  const { element, modalDialog } = self;\n  const duration = (getElementTransitionDuration(modalDialog) || 0) + 17;\n  removeClass(element, modalStaticClass);\n  // user must wait for zoom out transition\n  Timer.set(element, () => Timer.clear(element), duration);\n};\n\n// MODAL DEFINITION\n// ================\n/** Returns a new `Modal` instance. */\nexport default class Modal extends BaseComponent {\n  static selector = modalSelector;\n  static init = modalInitCallback;\n  static getInstance = getModalInstance;\n  declare options: ModalOptions;\n  declare modalDialog: HTMLElement;\n  declare triggers: HTMLElement[];\n  declare isStatic: boolean;\n  declare hasFade: boolean;\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target usually the `.modal` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ModalOptions>) {\n    super(target, config);\n\n    // the modal\n    const { element } = this;\n\n    // the modal-dialog\n    const modalDialog = querySelector(`.${modalString}-dialog`, element);\n\n    // istanbul ignore else @preserve\n    if (modalDialog) {\n      this.modalDialog = modalDialog;\n      // modal can have multiple triggering elements\n      this.triggers = [\n        ...querySelectorAll(modalToggleSelector, getDocument(element)),\n      ].filter(\n        (btn) => getTargetElement(btn) === element,\n      );\n\n      // additional internals\n      this.isStatic = this.options.backdrop === \"static\";\n      this.hasFade = hasClass(element, fadeClass);\n      this.relatedTarget = null;\n\n      // attach event listeners\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return modalComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return modalDefaults;\n  }\n\n  // MODAL PUBLIC METHODS\n  // ====================\n  /** Toggles the visibility of the modal. */\n  toggle() {\n    if (hasClass(this.element, showClass)) this.hide();\n    else this.show();\n  }\n\n  /** Shows the modal to the user. */\n  show() {\n    const { element, options, hasFade, relatedTarget } = this;\n    const { backdrop } = options;\n    let overlayDelay = 0;\n\n    // istanbul ignore else @preserve\n    if (!hasClass(element, showClass)) {\n      showModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, showModalEvent);\n      if (!showModalEvent.defaultPrevented) {\n        // we elegantly hide any opened modal/offcanvas\n        const currentOpen = getCurrentOpen(element);\n\n        // istanbul ignore else @preserve\n        if (currentOpen && currentOpen !== element) {\n          const that = getModalInstance(currentOpen) ||\n            // istanbul ignore next @preserve\n            getInstance<typeof BaseComponent & { hide: () => void }>(\n              currentOpen,\n              offcanvasComponent,\n            );\n          // istanbul ignore else @preserve\n          if (that) that.hide();\n        }\n        if (backdrop) {\n          if (!hasPopup(overlay)) {\n            appendOverlay(element, hasFade, true);\n          } else {\n            toggleOverlayType(true);\n          }\n\n          overlayDelay = getElementTransitionDuration(overlay);\n          showOverlay();\n\n          setTimeout(() => beforeModalShow(this), overlayDelay);\n        } else {\n          beforeModalShow(this);\n          // istanbul ignore else @preserve\n          if (currentOpen && hasClass(overlay, showClass)) {\n            hideOverlay();\n          }\n        }\n      }\n    }\n  }\n\n  /** Hide the modal from the user. */\n  hide() {\n    const { element, hasFade, relatedTarget } = this;\n\n    // istanbul ignore else @preserve\n    if (hasClass(element, showClass)) {\n      hideModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, hideModalEvent);\n\n      // istanbul ignore else @preserve\n      if (!hideModalEvent.defaultPrevented) {\n        removeClass(element, showClass);\n        setAttribute(element, ariaHidden, \"true\");\n        removeAttribute(element, ariaModal);\n\n        if (hasFade) {\n          emulateTransitionEnd(element, () => beforeModalHide(this));\n        } else {\n          beforeModalHide(this);\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates the modal layout.\n   */\n  update = () => {\n    // istanbul ignore else @preserve\n    if (hasClass(this.element, showClass)) setModalScrollbar(this);\n  };\n\n  /**\n   * Toggles on/off the `click` event listener of the `Modal` instance.\n   *\n   * @param add when `true`, event listener(s) is/are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { triggers } = this;\n\n    // istanbul ignore else @preserve\n    if (triggers.length) {\n      triggers.forEach((btn) =>\n        action(btn, mouseclickEvent, modalClickHandler)\n      );\n    }\n  };\n\n  /** Removes the `Modal` component from target element. */\n  dispose() {\n    const clone = { ...this };\n    const { modalDialog, hasFade } = clone;\n    const callback = () => setTimeout(() => super.dispose(), 17);\n\n    this.hide();\n    this._toggleEventListeners();\n\n    if (hasFade) {\n      // use transitionend callback\n      emulateTransitionEnd(modalDialog, callback);\n    } else {\n      callback();\n    }\n  }\n}\n"],"names":["modalSelector","modalString","modalToggleSelector","dataBsToggle","modalDismissSelector","dataBsDismiss","modalStaticClass","modalDefaults","getModalInstance","element","getInstance","modalComponent","modalInitCallback","Modal","showModalEvent","createCustomEvent","shownModalEvent","hideModalEvent","hiddenModalEvent","setModalScrollbar","self","scrollbarWidth","measureScrollbar","clientHeight","scrollHeight","getDocumentElement","modalHeight","modalScrollHeight","modalOverflow","padStyle","isRTL","setElementStyle","setScrollbar","toggleModalDismiss","add","action","addListener","removeListener","update","mouseclickEvent","modalDismissHandler","getWindow","resizeEvent","passiveHandler","getDocument","keydownEvent","modalKeyHandler","afterModalHide","triggers","relatedTarget","removeOverlay","focusElement","isVisible","dispatchEvent","toggleFocusTrap","afterModalShow","focus","beforeModalShow","hasFade","getCurrentOpen","getDocumentBody","addClass","showClass","removeAttribute","ariaHidden","setAttribute","ariaModal","emulateTransitionEnd","beforeModalHide","options","hasClass","overlay","hideOverlay","modalClickHandler","e","target","trigger","closest","getTargetElement","code","querySelector","modalActiveSelector","keyEscape","currentTarget","Timer","isStatic","modalDialog","backdrop","selectedText","_b","_a","targetInsideDialog","dismiss","staticTransitionEnd","duration","getElementTransitionDuration","removeClass","BaseComponent","config","__publicField","btn","querySelectorAll","fadeClass","overlayDelay","currentOpen","that","offcanvasComponent","hasPopup","toggleOverlayType","appendOverlay","showOverlay","clone","callback"],"mappings":"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"}