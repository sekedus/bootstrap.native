{"version":3,"file":"modal.mjs","sources":["../../src/components/modal.ts"],"sourcesContent":["/* Native JavaScript for Bootstrap 5 | Modal\n-------------------------------------------- */\nimport {\n  keyEscape,\n  getElementTransitionDuration,\n  removeAttribute,\n  setAttribute,\n  keydownEvent,\n  mouseclickEvent,\n  resizeEvent,\n  ariaModal,\n  ariaHidden,\n  getInstance,\n  isRTL,\n  removeClass,\n  hasClass,\n  addClass,\n  closest,\n  querySelectorAll,\n  querySelector,\n  getDocumentElement,\n  getDocumentBody,\n  getDocument,\n  getWindow,\n  CSS4Declaration,\n  setElementStyle,\n  createCustomEvent,\n  emulateTransitionEnd,\n  passiveHandler,\n  dispatchEvent,\n  focus,\n  Timer,\n  MouseEvent,\n  KeyboardEvent,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport dataBsToggle from '../strings/dataBsToggle';\nimport dataBsDismiss from '../strings/dataBsDismiss';\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport modalString from '../strings/modalString';\nimport modalComponent from '../strings/modalComponent';\nimport offcanvasComponent from '../strings/offcanvasComponent';\n\nimport getTargetElement from '../util/getTargetElement';\nimport { setScrollbar, measureScrollbar } from '../util/scrollbar';\nimport {\n  overlay,\n  modalActiveSelector,\n  toggleOverlayType,\n  appendOverlay,\n  showOverlay,\n  hideOverlay,\n  getCurrentOpen,\n  removeOverlay,\n} from '../util/backdrop';\nimport isVisible from '../util/isVisible';\nimport BaseComponent from './base-component';\nimport { ModalOptions, ModalEvent } from '../interface/modal';\nimport { hasPopup } from '../util/popupContainer';\n\n// MODAL PRIVATE GC\n// ================\nconst modalSelector = `.${modalString}`;\nconst modalToggleSelector = `[${dataBsToggle}=\"${modalString}\"]`;\nconst modalDismissSelector = `[${dataBsDismiss}=\"${modalString}\"]`;\nconst modalStaticClass = `${modalString}-static`;\n\nconst modalDefaults = {\n  backdrop: true,\n  keyboard: true,\n};\n\n/**\n * Static method which returns an existing `Modal` instance associated\n * to a target `Element`.\n */\nconst getModalInstance = (element: HTMLElement) => getInstance<Modal>(element, modalComponent);\n\n/**\n * A `Modal` initialization callback.\n */\nconst modalInitCallback = (element: HTMLElement) => new Modal(element);\n\n// MODAL CUSTOM EVENTS\n// ===================\nconst showModalEvent = createCustomEvent<ModalEvent>(`show.bs.${modalString}`);\nconst shownModalEvent = createCustomEvent<ModalEvent>(`shown.bs.${modalString}`);\nconst hideModalEvent = createCustomEvent<ModalEvent>(`hide.bs.${modalString}`);\nconst hiddenModalEvent = createCustomEvent<ModalEvent>(`hidden.bs.${modalString}`);\n\n// MODAL PRIVATE METHODS\n// =====================\n/**\n * Applies special style for the `<body>` and fixed elements\n * when a modal instance is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst setModalScrollbar = (self: Modal) => {\n  const { element } = self;\n  const scrollbarWidth = measureScrollbar(element);\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  const { clientHeight: modalHeight, scrollHeight: modalScrollHeight } = element;\n  const modalOverflow = modalHeight !== modalScrollHeight;\n\n  /* istanbul ignore else */\n  if (!modalOverflow && scrollbarWidth) {\n    const pad = !isRTL(element) ? 'paddingRight' : /* istanbul ignore next */ 'paddingLeft';\n    const padStyle = {} as Partial<CSS4Declaration>;\n    padStyle[pad] = `${scrollbarWidth}px`;\n    setElementStyle(element, padStyle);\n  }\n  setScrollbar(element, modalOverflow || clientHeight !== scrollHeight);\n};\n\n/**\n * Toggles on/off the listeners of events that close the modal.\n *\n * @param self the `Modal` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleModalDismiss = (self: Modal, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element, update } = self;\n  action(element, mouseclickEvent, modalDismissHandler);\n  action(getWindow(element), resizeEvent, update, passiveHandler);\n  action(getDocument(element), keydownEvent, modalKeyHandler);\n};\n\n/**\n * Executes after a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalHide = (self: Modal) => {\n  const { triggers, element, relatedTarget } = self;\n  removeOverlay(element);\n  setElementStyle(element, { paddingRight: '', display: '' });\n  toggleModalDismiss(self);\n\n  const focusElement = showModalEvent.relatedTarget || triggers.find(isVisible);\n  /* istanbul ignore else */\n  if (focusElement) focus(focusElement as HTMLElement);\n\n  hiddenModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, hiddenModalEvent);\n};\n\n/**\n * Executes after a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalShow = (self: Modal) => {\n  const { element, relatedTarget } = self;\n  focus(element);\n  toggleModalDismiss(self, true);\n\n  shownModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, shownModalEvent);\n};\n\n/**\n * Executes before a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalShow = (self: Modal) => {\n  const { element, hasFade } = self;\n  setElementStyle(element, { display: 'block' });\n  setModalScrollbar(self);\n  /* istanbul ignore else */\n  if (!getCurrentOpen(element)) {\n    setElementStyle(getDocumentBody(element), { overflow: 'hidden' });\n  }\n\n  addClass(element, showClass);\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, 'true');\n\n  if (hasFade) emulateTransitionEnd(element, () => afterModalShow(self));\n  else afterModalShow(self);\n};\n\n/**\n * Executes before a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalHide = (self: Modal) => {\n  const { element, options, hasFade } = self;\n\n  // callback can also be the transitionEvent object, we wanna make sure it's not\n  // call is not forced and overlay is visible\n  if (options.backdrop && hasFade && hasClass(overlay, showClass) && !getCurrentOpen(element)) {\n    // AND no modal is visible\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => afterModalHide(self));\n  } else {\n    afterModalHide(self);\n  }\n};\n\n// MODAL EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for modal.\n *\n * @param e the `Event` object\n */\nconst modalClickHandler = (e: MouseEvent<HTMLElement>) => {\n  const { target } = e;\n\n  const trigger = target && closest(target, modalToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getModalInstance(element);\n\n  /* istanbul ignore else */\n  if (self) {\n    /* istanbul ignore else */\n    if (trigger && trigger.tagName === 'A') e.preventDefault();\n    self.relatedTarget = trigger;\n    self.toggle();\n  }\n};\n\n/**\n * Handles the `keydown` event listener for modal\n * to hide the modal when user type the `ESC` key.\n *\n * @param e the `Event` object\n */\nconst modalKeyHandler = ({ code, target }: KeyboardEvent<HTMLElement>) => {\n  const element = querySelector(modalActiveSelector, getDocument(target));\n  const self = element && getModalInstance(element);\n\n  /* istanbul ignore else */\n  if (self) {\n    const { options } = self;\n    /* istanbul ignore else */\n    if (\n      options.keyboard &&\n      code === keyEscape && // the keyboard option is enabled and the key is 27\n      hasClass(element, showClass)\n    ) {\n      // the modal is not visible\n      self.relatedTarget = null;\n      self.hide();\n    }\n  }\n};\n\n/**\n * Handles the `click` event listeners that hide the modal.\n *\n * @param e the `Event` object\n */\nconst modalDismissHandler = (e: MouseEvent<HTMLElement>) => {\n  const { currentTarget } = e;\n  const self = currentTarget ? getModalInstance(currentTarget) : null;\n\n  // this timer is needed\n  /* istanbul ignore else: must have a filter */\n  if (self && currentTarget && !Timer.get(currentTarget)) {\n    const { options, isStatic, modalDialog } = self;\n    const { backdrop } = options;\n    const { target } = e;\n\n    const selectedText = getDocument(currentTarget)?.getSelection()?.toString().length;\n    const targetInsideDialog = modalDialog.contains(target);\n    const dismiss = target && closest(target, modalDismissSelector);\n\n    /* istanbul ignore else */\n    if (isStatic && !targetInsideDialog) {\n      Timer.set(\n        currentTarget,\n        () => {\n          addClass(currentTarget, modalStaticClass);\n          emulateTransitionEnd(modalDialog, () => staticTransitionEnd(self));\n        },\n        17,\n      );\n    } else if (dismiss || (!selectedText && !isStatic && !targetInsideDialog && backdrop)) {\n      self.relatedTarget = dismiss || null;\n      self.hide();\n      e.preventDefault();\n    }\n  }\n};\n\n/**\n * Handles the `transitionend` event listeners for `Modal`.\n *\n * @param self the `Modal` instance\n */\nconst staticTransitionEnd = (self: Modal) => {\n  const { element, modalDialog } = self;\n  const duration = (getElementTransitionDuration(modalDialog) || 0) + 17;\n  removeClass(element, modalStaticClass);\n  // user must wait for zoom out transition\n  Timer.set(element, () => Timer.clear(element), duration);\n};\n\n// MODAL DEFINITION\n// ================\n/** Returns a new `Modal` instance. */\nexport default class Modal extends BaseComponent {\n  static selector = modalSelector;\n  static init = modalInitCallback;\n  static getInstance = getModalInstance;\n  declare options: ModalOptions;\n  declare modalDialog: HTMLElement;\n  declare triggers: HTMLElement[];\n  declare isStatic: boolean;\n  declare hasFade: boolean;\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target usually the `.modal` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ModalOptions>) {\n    super(target, config);\n\n    // the modal\n    const { element } = this;\n\n    // the modal-dialog\n    const modalDialog = querySelector(`.${modalString}-dialog`, element);\n\n    /* istanbul ignore else */\n    if (modalDialog) {\n      this.modalDialog = modalDialog;\n      // modal can have multiple triggering elements\n      this.triggers = [...querySelectorAll(modalToggleSelector, getDocument(element))].filter(\n        btn => getTargetElement(btn) === element,\n      );\n\n      // additional internals\n      this.isStatic = this.options.backdrop === 'static';\n      this.hasFade = hasClass(element, fadeClass);\n      this.relatedTarget = null;\n\n      // attach event listeners\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return modalComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return modalDefaults;\n  }\n\n  // MODAL PUBLIC METHODS\n  // ====================\n  /** Toggles the visibility of the modal. */\n  toggle() {\n    if (hasClass(this.element, showClass)) this.hide();\n    else this.show();\n  }\n\n  /** Shows the modal to the user. */\n  show() {\n    const { element, options, hasFade, relatedTarget } = this;\n    const { backdrop } = options;\n    let overlayDelay = 0;\n\n    if (!hasClass(element, showClass)) {\n      showModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, showModalEvent);\n      if (!showModalEvent.defaultPrevented) {\n        // we elegantly hide any opened modal/offcanvas\n        const currentOpen = getCurrentOpen(element);\n\n        if (currentOpen && currentOpen !== element) {\n          const that =\n            getModalInstance(currentOpen) ||\n            /* istanbul ignore next */\n            getInstance<typeof BaseComponent & { hide: () => void }>(currentOpen, offcanvasComponent);\n          if (that) that.hide();\n        }\n        if (backdrop) {\n          if (!hasPopup(overlay)) {\n            appendOverlay(element, hasFade, true);\n          } else {\n            toggleOverlayType(true);\n          }\n\n          overlayDelay = getElementTransitionDuration(overlay);\n          showOverlay();\n\n          setTimeout(() => beforeModalShow(this), overlayDelay);\n        } else {\n          beforeModalShow(this);\n          /* istanbul ignore else */\n          if (currentOpen && hasClass(overlay, showClass)) {\n            hideOverlay();\n          }\n        }\n      }\n    }\n  }\n\n  /** Hide the modal from the user. */\n  hide() {\n    const { element, hasFade, relatedTarget } = this;\n\n    if (hasClass(element, showClass)) {\n      hideModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, hideModalEvent);\n\n      if (!hideModalEvent.defaultPrevented) {\n        removeClass(element, showClass);\n        setAttribute(element, ariaHidden, 'true');\n        removeAttribute(element, ariaModal);\n\n        /* istanbul ignore else */\n        if (hasFade) {\n          emulateTransitionEnd(element, () => beforeModalHide(this));\n        } else {\n          beforeModalHide(this);\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates the modal layout.\n   */\n  update = () => {\n    /* istanbul ignore else */\n    if (hasClass(this.element, showClass)) setModalScrollbar(this);\n  };\n\n  /**\n   * Toggles on/off the `click` event listener of the `Modal` instance.\n   *\n   * @param add when `true`, event listener(s) is/are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { triggers } = this;\n\n    /* istanbul ignore else */\n    if (triggers.length) {\n      triggers.forEach(btn => action(btn, mouseclickEvent, modalClickHandler));\n    }\n  };\n\n  /** Removes the `Modal` component from target element. */\n  dispose() {\n    const clone = { ...this };\n    const { element, modalDialog } = clone;\n    // const callback = () => setTimeout(() => super.dispose(), 17);\n    const callback = () => super.dispose();\n    this._toggleEventListeners();\n\n    this.hide();\n\n    /* istanbul ignore else */\n    if (hasClass(element, 'fade')) {\n      // use transitionend callback\n      emulateTransitionEnd(modalDialog, callback);\n    } else {\n      callback();\n    }\n  }\n}\n"],"names":["modalSelector","modalString","modalToggleSelector","dataBsToggle","modalDismissSelector","dataBsDismiss","modalStaticClass","modalDefaults","getModalInstance","element","getInstance","modalComponent","modalInitCallback","Modal","showModalEvent","createCustomEvent","shownModalEvent","hideModalEvent","hiddenModalEvent","setModalScrollbar","self","scrollbarWidth","measureScrollbar","clientHeight","scrollHeight","getDocumentElement","modalHeight","modalScrollHeight","modalOverflow","pad","isRTL","padStyle","setElementStyle","setScrollbar","toggleModalDismiss","add","action","addListener","removeListener","update","mouseclickEvent","modalDismissHandler","getWindow","resizeEvent","passiveHandler","getDocument","keydownEvent","modalKeyHandler","afterModalHide","triggers","relatedTarget","removeOverlay","focusElement","isVisible","focus","dispatchEvent","afterModalShow","beforeModalShow","hasFade","getCurrentOpen","getDocumentBody","addClass","showClass","removeAttribute","ariaHidden","setAttribute","ariaModal","emulateTransitionEnd","beforeModalHide","options","hasClass","overlay","hideOverlay","modalClickHandler","e","target","trigger","closest","getTargetElement","code","querySelector","modalActiveSelector","keyEscape","currentTarget","Timer","isStatic","modalDialog","backdrop","selectedText","_b","_a","targetInsideDialog","dismiss","staticTransitionEnd","duration","getElementTransitionDuration","removeClass","BaseComponent","config","__publicField","btn","querySelectorAll","fadeClass","overlayDelay","currentOpen","that","offcanvasComponent","hasPopup","toggleOverlayType","appendOverlay","showOverlay","clone","callback"],"mappings":"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"}