{"version":3,"file":"tooltip.mjs","sources":["../../src/strings/dataOriginalTitle.ts","../../src/components/tooltip.ts"],"sourcesContent":["/**\n * Global namespace for `data-bs-title` attribute.\n */\nconst dataOriginalTitle = 'data-original-title';\nexport default dataOriginalTitle;\n","/* Native JavaScript for Bootstrap 5 | Tooltip\n---------------------------------------------- */\nimport {\n  ariaDescribedBy,\n  focusoutEvent,\n  focusinEvent,\n  focusEvent,\n  mousemoveEvent,\n  mouseleaveEvent,\n  mouseenterEvent,\n  mousedownEvent,\n  mouseclickEvent,\n  closest,\n  getUID,\n  getDocument,\n  getWindow,\n  removeAttribute,\n  getAttribute,\n  setAttribute,\n  hasAttribute,\n  touchstartEvent,\n  resizeEvent,\n  scrollEvent,\n  mousehoverEvent,\n  toLowerCase,\n  focus,\n  Timer,\n  emulateTransitionEnd,\n  passiveHandler,\n  dispatchEvent,\n  isApple,\n  isMedia,\n  isFunction,\n  getInstance,\n  ObjectAssign,\n  createCustomEvent,\n  removeClass,\n  hasClass,\n  addClass,\n  getElementStyle,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport dataBsToggle from '../strings/dataBsToggle';\nimport dataOriginalTitle from '../strings/dataOriginalTitle';\nimport showClass from '../strings/showClass';\nimport tooltipString from '../strings/tooltipString';\nimport tooltipComponent from '../strings/tooltipComponent';\nimport popoverString from '../strings/popoverString';\nimport popoverComponent from '../strings/popoverComponent';\nimport modalString from '../strings/modalString';\nimport offcanvasString from '../strings/offcanvasString';\n\nimport styleTip from '../util/styleTip';\nimport createTip from '../util/createTip';\nimport { appendPopup, removePopup, hasPopup } from '../util/popupContainer';\nimport getElementContainer from '../util/getElementContainer';\nimport tooltipDefaults from '../util/tooltipDefaults';\nimport BaseComponent from './base-component';\nimport { TooltipOptions, TooltipEvent } from '../interface/tooltip';\nimport { PopoverOptions, PopoverEvent } from '../interface/popover';\n\n// TOOLTIP PRIVATE GC\n// ==================\nconst tooltipSelector = `[${dataBsToggle}=\"${tooltipString}\"],[data-tip=\"${tooltipString}\"]`;\nconst titleAttr = 'title';\n\n/**\n * Static method which returns an existing `Tooltip` instance associated\n * to a target `Element`.\n *\n */\nlet getTooltipInstance = (element: HTMLElement) => getInstance<Tooltip>(element, tooltipComponent);\n\n/**\n * A `Tooltip` initialization callback.\n */\nconst tooltipInitCallback = (element: HTMLElement) => new Tooltip(element);\n\n// TOOLTIP PRIVATE METHODS\n// =======================\n/**\n * Removes the tooltip from the DOM.\n *\n * @param self the `Tooltip` instance\n */\nconst removeTooltip = (self: Tooltip) => {\n  const { element, tooltip, container, offsetParent } = self;\n  removeAttribute(element, ariaDescribedBy);\n  removePopup(tooltip, container === offsetParent ? container : undefined);\n};\n\n/**\n * Executes after the instance has been disposed.\n *\n * @param self the `Tooltip` instance\n * @param callback the parent dispose callback\n */\nconst disposeTooltipComplete = (self: Tooltip, callback?: () => void) => {\n  const { element } = self;\n  toggleTooltipHandlers(self);\n\n  /* istanbul ignore else */\n  if (hasAttribute(element, dataOriginalTitle) && self.name === tooltipComponent) {\n    toggleTooltipTitle(self);\n  }\n  /* istanbul ignore else */\n  if (callback) callback();\n};\n\n/**\n * Toggles on/off the special `Tooltip` event listeners.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipAction = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n\n  action(getDocument(element), touchstartEvent, self.handleTouch as EventListener, passiveHandler);\n\n  /* istanbul ignore else */\n  if (!isMedia(element)) {\n    [scrollEvent, resizeEvent].forEach(ev => {\n      action(getWindow(element), ev, self.update, passiveHandler);\n    });\n  }\n};\n\n/**\n * Executes after the tooltip was shown to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipShownAction = (self: Tooltip) => {\n  const { element } = self;\n  const shownTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`shown.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self, true);\n  dispatchEvent(element, shownTooltipEvent);\n  Timer.clear(element, 'in');\n};\n\n/**\n * Executes after the tooltip was hidden to the user.\n *\n * @param self the `Tooltip` instance\n * @param callback the dispose callback\n */\nconst tooltipHiddenAction = (self: Tooltip, callback?: () => any) => {\n  const { element } = self;\n  const hiddenTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`hidden.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self);\n  removeTooltip(self);\n  dispatchEvent(element, hiddenTooltipEvent);\n  if (isFunction(callback)) callback();\n  Timer.clear(element, 'out');\n};\n\n/**\n * Toggles on/off the `Tooltip` event listeners.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipHandlers = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  // btn is only for dismissible popover\n  const { element, options, btn } = self;\n  const { trigger } = options;\n  const isPopover = self.name !== tooltipComponent;\n  const dismissible = isPopover && (options as PopoverOptions).dismissible ? true : false;\n\n  if (trigger?.includes('manual')) return;\n\n  self.enabled = !!add;\n\n  const triggerOptions = trigger?.split(' ');\n  const elemIsMedia = isMedia(element);\n\n  if (elemIsMedia) {\n    action(element, mousemoveEvent, self.update, passiveHandler);\n  }\n\n  triggerOptions?.forEach(tr => {\n    /* istanbul ignore else */\n    if (elemIsMedia || tr === mousehoverEvent) {\n      action(element, mousedownEvent, self.show);\n      action(element, mouseenterEvent, self.show);\n\n      /* istanbul ignore else */\n      if (dismissible && btn) {\n        action(btn, mouseclickEvent, self.hide);\n      } else {\n        action(element, mouseleaveEvent, self.hide);\n        action(getDocument(element), touchstartEvent, self.handleTouch as EventListener, passiveHandler);\n      }\n    } else if (tr === mouseclickEvent) {\n      action(element, tr, !dismissible ? self.toggle : self.show);\n    } else if (tr === focusEvent) {\n      action(element, focusinEvent, self.show);\n      /* istanbul ignore else */\n      if (!dismissible) action(element, focusoutEvent, self.hide);\n      /* istanbul ignore else */\n      if (isApple) {\n        action(element, mouseclickEvent, () => focus(element));\n      }\n    }\n  });\n};\n\n/**\n * Toggles on/off the `Tooltip` event listeners that hide/update the tooltip.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipOpenHandlers = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element, container, offsetParent } = self;\n  const { offsetHeight, scrollHeight } = container as HTMLElement;\n  const parentModal = closest(element, `.${modalString}`);\n  const parentOffcanvas = closest(element, `.${offcanvasString}`);\n\n  /* istanbul ignore else */\n  if (!isMedia(element)) {\n    const win = getWindow(element);\n    const overflow = offsetHeight !== scrollHeight;\n    const scrollTarget = overflow && container === offsetParent ? container : win;\n    action(scrollTarget, resizeEvent, self.update, passiveHandler);\n    action(scrollTarget, scrollEvent, self.update, passiveHandler);\n  }\n\n  // dismiss tooltips inside modal / offcanvas\n  if (parentModal) action(parentModal, `hide.bs.${modalString}`, self.hide);\n  if (parentOffcanvas) action(parentOffcanvas, `hide.bs.${offcanvasString}`, self.hide);\n};\n\n/**\n * Toggles the `title` and `data-original-title` attributes.\n *\n * @param self the `Tooltip` instance\n * @param content when `true`, event listeners are added\n */\nconst toggleTooltipTitle = (self: Tooltip, content?: string) => {\n  // [0 - add, 1 - remove] | [0 - remove, 1 - add]\n  const titleAtt = [dataOriginalTitle, titleAttr];\n  const { element } = self;\n\n  setAttribute(element, titleAtt[content ? 0 : 1], content || getAttribute(element, titleAtt[0]) || '');\n  removeAttribute(element, titleAtt[content ? 1 : 0]);\n};\n\n// TOOLTIP DEFINITION\n// ==================\n/** Creates a new `Tooltip` instance. */\nexport default class Tooltip extends BaseComponent {\n  static selector = tooltipSelector;\n  static init = tooltipInitCallback;\n  static getInstance = getTooltipInstance;\n  static styleTip = styleTip;\n  declare options: TooltipOptions;\n  declare btn?: HTMLElement;\n  declare tooltip?: HTMLElement;\n  declare container: ParentNode;\n  declare arrow?: HTMLElement;\n  declare offsetParent?: HTMLElement;\n  declare enabled: boolean;\n  declare id: string;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<TooltipOptions>) {\n    super(target, config);\n\n    const { element } = this;\n    const isTooltip = this.name === tooltipComponent;\n    const tipString = isTooltip ? tooltipString : popoverString;\n    const tipComponent = isTooltip ? tooltipComponent : popoverComponent;\n\n    /* istanbul ignore next: this is to set Popover too */\n    getTooltipInstance = <T extends Tooltip>(elem: HTMLElement) => getInstance<T>(elem, tipComponent);\n\n    // additional properties\n    this.enabled = true;\n    /** Set unique ID for `aria-describedby`. */\n    this.id = `${tipString}-${getUID(element, tipString)}`;\n\n    // instance options\n    const { options } = this;\n\n    // invalidate\n    if ((!options.title && isTooltip) || (!isTooltip && !options.content)) {\n      // throw Error(`${this.name} Error: target has no content set.`);\n      return;\n    }\n\n    // reset default options\n    ObjectAssign(tooltipDefaults, { titleAttr: '' });\n\n    // all functions bind\n    this.handleTouch = this.handleTouch.bind(this);\n    this.update = this.update.bind(this);\n    this.show = this.show.bind(this);\n    this.hide = this.hide.bind(this);\n    this.toggle = this.toggle.bind(this);\n\n    // set title attributes and add event listeners\n    /* istanbul ignore else */\n    if (hasAttribute(element, titleAttr) && isTooltip && typeof options.title === 'string') {\n      toggleTooltipTitle(this, options.title);\n    }\n\n    // set containers\n    this.container = getElementContainer(element);\n    this.offsetParent = ['sticky', 'fixed'].some(\n      position => getElementStyle(this.container as HTMLElement, 'position') === position,\n    )\n      ? (this.container as HTMLElement)\n      : getDocument(this.element).body;\n\n    // create tooltip here\n    createTip(this);\n\n    // attach events\n    toggleTooltipHandlers(this, true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return tooltipComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return tooltipDefaults;\n  }\n\n  // TOOLTIP PUBLIC METHODS\n  // ======================\n  /**\n   * Shows the tooltip.\n   *\n   * @param e the `Event` object\n   */\n  show(e?: Event) {\n    const { options, tooltip, element, container, offsetParent, id } = this;\n    const { animation } = options;\n    const outTimer = Timer.get(element, 'out');\n\n    Timer.clear(element, 'out');\n\n    if (tooltip && !outTimer && !hasPopup(tooltip, container === offsetParent ? container : undefined)) {\n      Timer.set(\n        element,\n        () => {\n          const showTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`show.bs.${toLowerCase(this.name)}`);\n          dispatchEvent(element, showTooltipEvent);\n          if (showTooltipEvent.defaultPrevented) return;\n\n          // append to container\n          appendPopup(tooltip, container === offsetParent ? container : undefined);\n\n          setAttribute(element, ariaDescribedBy, `#${id}`);\n\n          this.update(e);\n          toggleTooltipOpenHandlers(this, true);\n\n          /* istanbul ignore else */\n          if (!hasClass(tooltip, showClass)) addClass(tooltip, showClass);\n          /* istanbul ignore else */\n          if (animation) emulateTransitionEnd(tooltip, () => tooltipShownAction(this));\n          else tooltipShownAction(this);\n        },\n        17,\n        'in',\n      );\n    }\n  }\n\n  /**\n   * Hides the tooltip.\n   *\n   * @param e the dispose callback\n   * @param callback the dispose callback\n   */\n  hide(e?: Event, callback?: () => void) {\n    const { options, tooltip, element, container, offsetParent } = this;\n    const { animation, delay } = options;\n\n    Timer.clear(element, 'in');\n\n    /* istanbul ignore else */\n    if (tooltip && hasPopup(tooltip, container === offsetParent ? container : undefined)) {\n      Timer.set(\n        element,\n        () => {\n          const hideTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`hide.bs.${toLowerCase(this.name)}`);\n          dispatchEvent(element, hideTooltipEvent);\n\n          if (hideTooltipEvent.defaultPrevented) return;\n\n          this.update(e); // use Event\n          removeClass(tooltip, showClass);\n          toggleTooltipOpenHandlers(this);\n\n          /* istanbul ignore else */\n          if (animation) emulateTransitionEnd(tooltip, () => tooltipHiddenAction(this, callback));\n          else tooltipHiddenAction(this, callback);\n        },\n        delay + 17,\n        'out',\n      );\n    }\n  }\n\n  /**\n   * Updates the tooltip position.\n   *\n   * @param e the `Event` object\n   */\n  update(e?: Event) {\n    styleTip<Tooltip>(this, e as (Event & PointerEvent) | undefined);\n  }\n\n  /**\n   * Toggles the tooltip visibility.\n   *\n   * @param e the `Event` object\n   */\n  toggle(e?: Event) {\n    const { tooltip, container, offsetParent } = this;\n\n    if (tooltip && !hasPopup(tooltip, container === offsetParent ? container : undefined)) this.show(e);\n    else this.hide();\n  }\n\n  /** Enables the tooltip. */\n  enable() {\n    const { enabled } = this;\n    /* istanbul ignore else */\n    if (!enabled) {\n      toggleTooltipHandlers(this, true);\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Disables the tooltip. */\n  disable() {\n    const { tooltip, container, offsetParent, options, enabled } = this;\n    const { animation } = options;\n    /* istanbul ignore else */\n    if (enabled) {\n      if (tooltip && hasPopup(tooltip, container === offsetParent ? container : undefined) && animation) {\n        this.hide(undefined, () => toggleTooltipHandlers(this));\n      } else {\n        toggleTooltipHandlers(this);\n      }\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Toggles the `disabled` property. */\n  toggleEnabled() {\n    if (!this.enabled) this.enable();\n    else this.disable();\n  }\n\n  /**\n   * Handles the `touchstart` event listener for `Tooltip`\n   *\n   * @this {Tooltip}\n   * @param {TouchEvent} e the `Event` object\n   */\n  handleTouch({ target }: TouchEvent) {\n    const { tooltip, element } = this;\n\n    /* istanbul ignore next */\n    if (\n      (tooltip && tooltip.contains(target as HTMLElement)) ||\n      target === element ||\n      (target && element.contains(target as HTMLElement))\n    ) {\n      // smile for ESLint\n    } else {\n      this.hide();\n    }\n  }\n\n  /** Removes the `Tooltip` from the target element. */\n  dispose() {\n    const { tooltip, container, offsetParent, options } = this;\n    const callback = () => disposeTooltipComplete(this, () => super.dispose());\n\n    if (options.animation && tooltip && hasPopup(tooltip, container === offsetParent ? container : undefined)) {\n      this.options.delay = 0; // reset delay\n      this.hide(undefined, callback);\n    } else {\n      callback();\n    }\n  }\n}\n"],"names":["dataOriginalTitle","tooltipSelector","dataBsToggle","tooltipString","titleAttr","getTooltipInstance","element","getInstance","tooltipComponent","tooltipInitCallback","Tooltip","removeTooltip","self","tooltip","container","offsetParent","removeAttribute","ariaDescribedBy","removePopup","disposeTooltipComplete","callback","toggleTooltipHandlers","hasAttribute","toggleTooltipTitle","toggleTooltipAction","add","action","addListener","removeListener","getDocument","touchstartEvent","passiveHandler","isMedia","scrollEvent","resizeEvent","ev","getWindow","tooltipShownAction","shownTooltipEvent","createCustomEvent","toLowerCase","dispatchEvent","Timer","tooltipHiddenAction","hiddenTooltipEvent","isFunction","options","btn","trigger","dismissible","triggerOptions","elemIsMedia","mousemoveEvent","tr","mousehoverEvent","mousedownEvent","mouseenterEvent","mouseclickEvent","mouseleaveEvent","focusEvent","focusinEvent","focusoutEvent","isApple","focus","toggleTooltipOpenHandlers","offsetHeight","scrollHeight","parentModal","closest","modalString","parentOffcanvas","offcanvasString","win","scrollTarget","content","titleAtt","setAttribute","getAttribute","BaseComponent","styleTip","target","config","isTooltip","tipString","popoverString","tipComponent","popoverComponent","elem","getUID","ObjectAssign","tooltipDefaults","getElementContainer","position","getElementStyle","createTip","id","animation","outTimer","hasPopup","showTooltipEvent","appendPopup","hasClass","showClass","addClass","emulateTransitionEnd","delay","hideTooltipEvent","removeClass","enabled"],"mappings":"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"}