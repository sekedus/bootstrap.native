{"version":3,"file":"tooltip-4ba42f84.mjs","sources":["../../src/strings/popoverString.ts","../../src/strings/popoverComponent.ts","../../src/strings/tooltipString.ts","../../src/util/getTipTemplate.ts","../../src/util/tipClassPositions.ts","../../src/util/styleTip.ts","../../src/util/tooltipDefaults.ts","../../src/strings/dataOriginalTitle.ts","../../src/strings/tooltipComponent.ts","../../src/util/setHtml.ts","../../src/util/createTip.ts","../../src/util/getElementContainer.ts","../../src/components/tooltip.ts"],"sourcesContent":["/** @type {string} */\nconst popoverString = 'popover';\nexport default popoverString;\n","/** @type {string} */\nconst popoverComponent = 'Popover';\nexport default popoverComponent;\n","/** @type {string} */\nconst tooltipString = 'tooltip';\nexport default tooltipString;\n","import tooltipString from '../strings/tooltipString';\n\n/**\n * Returns a template for Popover / Tooltip.\n *\n * @param tipType the expected markup type\n * @returns the template markup\n */\nconst getTipTemplate = (tipType: string) => {\n  const isTooltip = tipType === tooltipString;\n  const bodyClass = isTooltip ? `${tipType}-inner` : `${tipType}-body`;\n  const header = !isTooltip ? `<h3 class=\"${tipType}-header\"></h3>` : '';\n  const arrow = `<div class=\"${tipType}-arrow\"></div>`;\n  const body = `<div class=\"${bodyClass}\"></div>`;\n  return `<div class=\"${tipType}\" role=\"${tooltipString}\">${header + arrow + body}</div>`;\n};\n\nexport default getTipTemplate;\n","const tipClassPositions = {\n  top: 'top',\n  bottom: 'bottom',\n  left: 'start',\n  right: 'end',\n};\n\nexport default tipClassPositions;\n","import {\n  isHTMLElement,\n  setElementStyle,\n  getDocumentElement,\n  getBoundingClientRect,\n  getElementStyle,\n  isRTL,\n  toLowerCase,\n  createCustomEvent,\n  dispatchEvent,\n} from '@thednp/shorty';\n\nimport popoverComponent from '../strings/popoverComponent';\nimport tipClassPositions from './tipClassPositions';\nimport Tooltip from '../components/tooltip';\nimport type { TooltipEvent } from '../interface/tooltip';\nimport type { PopoverEvent } from '../interface/popover';\n\n/**\n * Style popovers and tooltips.\n *\n * @param self the `Popover` / `Tooltip` instance\n */\nconst styleTip = <T extends Tooltip>(self: T) => {\n  const tipClasses = /\\b(top|bottom|start|end)+/;\n  const { element, tooltip, container, options, arrow } = self;\n\n  /* istanbul ignore else */\n  if (tooltip) {\n    const tipPositions = { ...tipClassPositions };\n    const RTL = isRTL(element);\n\n    // reset tooltip style (top: 0, left: 0 works best)\n    setElementStyle(tooltip, {\n      // top: '0px', left: '0px', right: '', bottom: '',\n      top: '',\n      left: '',\n      right: '',\n      bottom: '',\n    });\n    const isPopover = self.name === popoverComponent;\n    const { offsetWidth: tipWidth, offsetHeight: tipHeight } = tooltip;\n    const { clientWidth: htmlcw, clientHeight: htmlch, offsetWidth: htmlow } = getDocumentElement(element);\n    let { placement } = options;\n    const { clientWidth: parentCWidth, offsetWidth: parentOWidth } = container as HTMLElement;\n    const parentPosition = getElementStyle(container as HTMLElement, 'position');\n    const fixedParent = parentPosition === 'fixed';\n    const scrollbarWidth = fixedParent ? Math.abs(parentCWidth - parentOWidth) : Math.abs(htmlcw - htmlow);\n    const leftBoundry = RTL && fixedParent ? /* istanbul ignore next */ scrollbarWidth : 0;\n    const rightBoundry = htmlcw - (!RTL ? scrollbarWidth : 0) - 1;\n    const {\n      width: elemWidth,\n      height: elemHeight,\n      left: elemRectLeft,\n      right: elemRectRight,\n      top: elemRectTop,\n    } = getBoundingClientRect(element, true);\n    const { x, y } = {\n      x: elemRectLeft,\n      y: elemRectTop,\n    };\n    // reset arrow style\n    setElementStyle(arrow as HTMLElement, {\n      top: '',\n      left: '',\n      right: '',\n      bottom: '',\n    });\n    let topPosition: number | string = 0;\n    let bottomPosition: number | string = '';\n    let leftPosition: number | string = 0;\n    let rightPosition: number | string = '';\n    let arrowTop: number | string = '';\n    let arrowLeft: number | string = '';\n    let arrowRight: number | string = '';\n\n    const arrowWidth = (arrow as HTMLElement).offsetWidth || 0;\n    const arrowHeight = (arrow as HTMLElement).offsetHeight || 0;\n    const arrowAdjust = arrowWidth / 2;\n\n    // check placement\n    let topExceed = elemRectTop - tipHeight - arrowHeight < 0;\n    let bottomExceed = elemRectTop + tipHeight + elemHeight + arrowHeight >= htmlch;\n    let leftExceed = elemRectLeft - tipWidth - arrowWidth < leftBoundry;\n    let rightExceed = elemRectLeft + tipWidth + elemWidth + arrowWidth >= rightBoundry;\n\n    const horizontals = ['left', 'right'];\n    const verticals = ['top', 'bottom'];\n\n    topExceed = horizontals.includes(placement)\n      ? elemRectTop + elemHeight / 2 - tipHeight / 2 - arrowHeight < 0\n      : topExceed;\n    bottomExceed = horizontals.includes(placement)\n      ? elemRectTop + tipHeight / 2 + elemHeight / 2 + arrowHeight >= htmlch\n      : bottomExceed;\n    leftExceed = verticals.includes(placement) ? elemRectLeft + elemWidth / 2 - tipWidth / 2 < leftBoundry : leftExceed;\n    rightExceed = verticals.includes(placement)\n      ? elemRectLeft + tipWidth / 2 + elemWidth / 2 >= rightBoundry\n      : rightExceed;\n\n    // first remove side positions if both left and right limits are exceeded\n    // we usually fall back to top|bottom\n    placement = horizontals.includes(placement) && leftExceed && rightExceed ? 'top' : placement;\n    // recompute placement\n    placement = placement === 'top' && topExceed ? 'bottom' : placement;\n    placement = placement === 'bottom' && bottomExceed ? 'top' : placement;\n    placement = placement === 'left' && leftExceed ? 'right' : placement;\n    placement = placement === 'right' && rightExceed ? /* istanbul ignore next */ 'left' : placement;\n\n    // update tooltip/popover class\n    if (!tooltip.className.includes(placement)) {\n      tooltip.className = tooltip.className.replace(tipClasses, tipPositions[placement]);\n    }\n\n    // compute tooltip / popover coordinates\n    /* istanbul ignore else */\n    if (horizontals.includes(placement)) {\n      // secondary|side positions\n      if (placement === 'left') {\n        // LEFT\n        leftPosition = x - tipWidth - (isPopover ? arrowWidth : 0);\n      } else {\n        // RIGHT\n        leftPosition = x + elemWidth + (isPopover ? arrowWidth : 0);\n      }\n\n      // adjust top and arrow\n      if (topExceed && bottomExceed) {\n        topPosition = 0;\n        bottomPosition = 0;\n        arrowTop = elemRectTop + elemHeight / 2 - arrowHeight / 2;\n      } else if (topExceed) {\n        topPosition = y;\n        bottomPosition = '';\n        arrowTop = elemHeight / 2 - arrowWidth;\n      } else if (bottomExceed) {\n        topPosition = y - tipHeight + elemHeight;\n        bottomPosition = '';\n        arrowTop = tipHeight - elemHeight / 2 - arrowWidth;\n      } else {\n        topPosition = y - tipHeight / 2 + elemHeight / 2;\n        arrowTop = tipHeight / 2 - arrowHeight / 2;\n      }\n    } else if (verticals.includes(placement)) {\n      if (placement === 'top') {\n        topPosition = y - tipHeight - (isPopover ? arrowHeight : 0);\n      } else {\n        // BOTTOM\n        topPosition = y + elemHeight + (isPopover ? arrowHeight : 0);\n      }\n\n      // adjust left | right and also the arrow\n      if (leftExceed) {\n        leftPosition = 0;\n        arrowLeft = x + elemWidth / 2 - arrowAdjust;\n      } else if (rightExceed) {\n        leftPosition = 'auto';\n        rightPosition = 0;\n        arrowRight = elemWidth / 2 + rightBoundry - elemRectRight - arrowAdjust;\n      } else {\n        leftPosition = x - tipWidth / 2 + elemWidth / 2;\n        arrowLeft = tipWidth / 2 - arrowAdjust;\n      }\n    }\n\n    // apply style to tooltip/popover\n    setElementStyle(tooltip, {\n      top: `${topPosition}px`,\n      bottom: bottomPosition === '' ? '' : `${bottomPosition}px`,\n      left: leftPosition === 'auto' ? leftPosition : `${leftPosition}px`,\n      right: rightPosition !== '' ? `${rightPosition}px` : '',\n    });\n\n    // update arrow placement\n    /* istanbul ignore else */\n    if (isHTMLElement(arrow)) {\n      if (arrowTop !== '') {\n        arrow.style.top = `${arrowTop}px`;\n      }\n      if (arrowLeft !== '') {\n        arrow.style.left = `${arrowLeft}px`;\n      } else if (arrowRight !== '') {\n        arrow.style.right = `${arrowRight}px`;\n      }\n    }\n    const updatedTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`updated.bs.${toLowerCase(self.name)}`);\n    dispatchEvent(element, updatedTooltipEvent);\n  }\n};\n\nexport default styleTip;\n","import getTipTemplate from './getTipTemplate';\nimport tooltipString from '../strings/tooltipString';\nimport { TooltipOptions } from '../interface/tooltip';\n\nconst tooltipDefaults: TooltipOptions = {\n  template: getTipTemplate(tooltipString),\n  title: '',\n  customClass: '',\n  trigger: 'hover focus',\n  placement: 'top',\n  sanitizeFn: undefined,\n  animation: true,\n  delay: 200,\n  container: document.body,\n  content: '',\n  dismissible: false,\n  btnClose: '',\n};\nexport default tooltipDefaults;\n","/**\n * Global namespace for `data-bs-title` attribute.\n */\nconst dataOriginalTitle = 'data-original-title';\nexport default dataOriginalTitle;\n","/** @type {string} */\nconst tooltipComponent = 'Tooltip';\nexport default tooltipComponent;\n","import { isNode, isArray, isFunction, isString, isNodeList, isHTMLElement } from '@thednp/shorty';\n\n/**\n * Append an existing `Element` to Popover / Tooltip component or HTML\n * markup string to be parsed & sanitized to be used as popover / tooltip content.\n *\n * @param element target\n * @param content the `Element` to append / string\n * @param sanitizeFn a function to sanitize string content\n */\nconst setHtml = (element: HTMLElement, content: Node[] | Node | string, sanitizeFn?: (s: string) => string) => {\n  /* istanbul ignore else */\n  if (isString(content) && content.length) {\n    let dirty = content.trim(); // fixing #233\n    if (isFunction(sanitizeFn)) dirty = sanitizeFn(dirty);\n\n    const domParser = new DOMParser();\n    const tempDocument = domParser.parseFromString(dirty, 'text/html');\n    element.append(...[...tempDocument.body.childNodes]);\n  } else if (isHTMLElement(content)) {\n    element.append(content);\n  } else if (isNodeList(content) || (isArray(content) && content.every(isNode))) {\n    element.append(...[...content]);\n  }\n};\nexport default setHtml;\n","import { createElement, addClass, hasClass, setAttribute, querySelector, isRTL, isHTMLElement } from '@thednp/shorty';\n\nimport tooltipComponent from '../strings/tooltipComponent';\nimport tooltipString from '../strings/tooltipString';\nimport popoverString from '../strings/popoverString';\nimport fadeClass from '../strings/fadeClass';\nimport tipClassPositions from './tipClassPositions';\nimport setHtml from './setHtml';\nimport Tooltip from '../components/tooltip';\nimport Popover from '../components/popover';\n\n/**\n * Creates a new tooltip / popover.\n *\n * @param self the `Tooltip` / `Popover` instance\n */\nconst createTip = (self: Tooltip | Popover) => {\n  const isTooltip = self.name === tooltipComponent;\n\n  const { id, element, options } = self;\n  const { title, placement, template, animation, customClass, sanitizeFn, dismissible, content, btnClose } = options;\n  const tipString = isTooltip ? tooltipString : popoverString;\n  const tipPositions = { ...tipClassPositions };\n  let titleParts: Node[] = [];\n  let contentParts: Node[] = [];\n\n  if (isRTL(element)) {\n    tipPositions.left = 'end';\n    tipPositions.right = 'start';\n  }\n\n  // set initial popover class\n  const placementClass = `bs-${tipString}-${tipPositions[placement]}`;\n\n  // load template\n  let tooltipTemplate: Node | string;\n  if (isHTMLElement(template)) {\n    tooltipTemplate = template;\n  } else {\n    const htmlMarkup = createElement('div') as HTMLElement;\n    setHtml(htmlMarkup, template, sanitizeFn);\n    tooltipTemplate = htmlMarkup.firstChild as HTMLElement;\n  }\n\n  // set popover markup\n  self.tooltip = isHTMLElement(tooltipTemplate)\n    ? (tooltipTemplate.cloneNode(true) as HTMLElement)\n    : /* istanbul ignore next */ undefined;\n\n  const { tooltip } = self;\n  /* istanbul ignore else */\n  if (tooltip) {\n    // set id and role attributes\n    setAttribute(tooltip, 'id', id);\n    setAttribute(tooltip, 'role', tooltipString);\n\n    const bodyClass = isTooltip ? `${tooltipString}-inner` : `${popoverString}-body`;\n    const tooltipHeader = isTooltip ? null : querySelector(`.${popoverString}-header`, tooltip);\n    const tooltipBody = querySelector(`.${bodyClass}`, tooltip);\n\n    // set arrow and enable access for styleTip\n    self.arrow = querySelector(`.${tipString}-arrow`, tooltip) as HTMLElement;\n    const { arrow } = self;\n\n    if (isHTMLElement(title)) titleParts = [title.cloneNode(true)];\n    else {\n      const tempTitle = createElement('div') as HTMLElement;\n      setHtml(tempTitle, title, sanitizeFn);\n      titleParts = [...[...tempTitle.childNodes]];\n    }\n\n    if (isHTMLElement(content)) contentParts = [content.cloneNode(true)];\n    else {\n      const tempContent = createElement('div') as HTMLElement;\n      setHtml(tempContent, content, sanitizeFn);\n      contentParts = [...[...tempContent.childNodes]];\n    }\n\n    // set dismissible button\n    if (dismissible) {\n      if (title) {\n        if (isHTMLElement(btnClose)) titleParts = [...titleParts, btnClose.cloneNode(true)];\n        else {\n          const tempBtn = createElement('div') as HTMLElement;\n          setHtml(tempBtn, btnClose, sanitizeFn);\n          titleParts = [...titleParts, tempBtn.firstChild as Node];\n        }\n      } else {\n        /* istanbul ignore else */\n        if (tooltipHeader) tooltipHeader.remove();\n        if (isHTMLElement(btnClose)) contentParts = [...contentParts, btnClose.cloneNode(true)];\n        else {\n          const tempBtn = createElement('div') as HTMLElement;\n          setHtml(tempBtn, btnClose, sanitizeFn);\n          contentParts = [...contentParts, tempBtn.firstChild as Node];\n        }\n      }\n    }\n\n    // fill the template with content from options / data attributes\n    // also sanitize title && content\n    /* istanbul ignore else */\n    if (!isTooltip) {\n      /* istanbul ignore else */\n      if (title && tooltipHeader) setHtml(tooltipHeader, titleParts, sanitizeFn);\n      /* istanbul ignore else */\n      if (content && tooltipBody) setHtml(tooltipBody, contentParts, sanitizeFn);\n      // set btn\n      self.btn = querySelector('.btn-close', tooltip) || undefined;\n    } else if (title && tooltipBody) setHtml(tooltipBody, title, sanitizeFn);\n\n    // Bootstrap 5.2.x\n    // addClass(tooltip, 'position-absolute');\n    addClass(tooltip, 'position-fixed');\n    addClass(arrow, 'position-absolute');\n\n    // set popover animation and placement\n    /* istanbul ignore else */\n    if (!hasClass(tooltip, tipString)) addClass(tooltip, tipString);\n    /* istanbul ignore else */\n    if (animation && !hasClass(tooltip, fadeClass)) addClass(tooltip, fadeClass);\n    /* istanbul ignore else */\n    if (customClass && !hasClass(tooltip, customClass)) {\n      addClass(tooltip, customClass);\n    }\n    /* istanbul ignore else */\n    if (!hasClass(tooltip, placementClass)) addClass(tooltip, placementClass);\n  }\n};\n\nexport default createTip;\n","import { getDocument, isShadowRoot, isTableElement, getParentNode, getElementStyle } from '@thednp/shorty';\n\n/**\n * Returns an `HTMLElement` to be used as default value for *options.container*\n * for `Tooltip` / `Popover` components.\n *\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param element the target\n * @returns the query result\n */\nconst getElementContainer = (element: HTMLElement): ParentNode => {\n  const majorBlockTags = ['HTML', 'BODY'];\n  const containers: ParentNode[] = [];\n  let { parentNode } = element as Node;\n\n  while (parentNode && !majorBlockTags.includes(parentNode.nodeName)) {\n    parentNode = getParentNode(parentNode) as ParentNode;\n    /* istanbul ignore else */\n    if (!(isShadowRoot(parentNode) || isTableElement(parentNode))) {\n      containers.push(parentNode);\n    }\n  }\n\n  return (\n    containers.find((c, i) => {\n      if (\n        getElementStyle(c as HTMLElement, 'position') !== 'relative' &&\n        containers.slice(i + 1).every(r => getElementStyle(r as HTMLElement, 'position') === 'static')\n      ) {\n        return c;\n      }\n      return null;\n    }) || /* istanbul ignore next: optional guard */ getDocument(element).body\n  );\n};\n\nexport default getElementContainer;\n","/* Native JavaScript for Bootstrap 5 | Tooltip\n---------------------------------------------- */\nimport {\n  ariaDescribedBy,\n  focusoutEvent,\n  focusinEvent,\n  focusEvent,\n  mouseleaveEvent,\n  mouseenterEvent,\n  mousedownEvent,\n  mouseclickEvent,\n  closest,\n  getUID,\n  getDocument,\n  getWindow,\n  removeAttribute,\n  getAttribute,\n  setAttribute,\n  hasAttribute,\n  touchstartEvent,\n  resizeEvent,\n  scrollEvent,\n  mousehoverEvent,\n  toLowerCase,\n  focus,\n  Timer,\n  emulateTransitionEnd,\n  passiveHandler,\n  dispatchEvent,\n  isApple,\n  getInstance,\n  ObjectAssign,\n  createCustomEvent,\n  removeClass,\n  hasClass,\n  addClass,\n  getElementStyle,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport dataBsToggle from '../strings/dataBsToggle';\nimport dataOriginalTitle from '../strings/dataOriginalTitle';\nimport showClass from '../strings/showClass';\nimport tooltipString from '../strings/tooltipString';\nimport tooltipComponent from '../strings/tooltipComponent';\nimport popoverString from '../strings/popoverString';\nimport popoverComponent from '../strings/popoverComponent';\nimport modalString from '../strings/modalString';\nimport offcanvasString from '../strings/offcanvasString';\n\nimport styleTip from '../util/styleTip';\nimport createTip from '../util/createTip';\nimport { appendPopup, removePopup, hasPopup } from '../util/popupContainer';\nimport getElementContainer from '../util/getElementContainer';\nimport tooltipDefaults from '../util/tooltipDefaults';\nimport BaseComponent from './base-component';\nimport { TooltipOptions, TooltipEvent } from '../interface/tooltip';\nimport { PopoverOptions, PopoverEvent } from '../interface/popover';\n\n// TOOLTIP PRIVATE GC\n// ==================\nconst tooltipSelector = `[${dataBsToggle}=\"${tooltipString}\"],[data-tip=\"${tooltipString}\"]`;\nconst titleAttr = 'title';\n\n/**\n * Static method which returns an existing `Tooltip` instance associated\n * to a target `Element`.\n *\n */\nlet getTooltipInstance = (element: HTMLElement) => getInstance<Tooltip>(element, tooltipComponent);\n\n/**\n * A `Tooltip` initialization callback.\n */\nconst tooltipInitCallback = (element: HTMLElement) => new Tooltip(element);\n\n// TOOLTIP PRIVATE METHODS\n// =======================\n/**\n * Removes the tooltip from the DOM.\n *\n * @param self the `Tooltip` instance\n */\nconst removeTooltip = (self: Tooltip) => {\n  const { element, tooltip, container, offsetParent } = self;\n  removeAttribute(element, ariaDescribedBy);\n  removePopup(tooltip as HTMLElement, container === offsetParent ? container : offsetParent);\n};\n\n/**\n * Check if container contains the tooltip.\n *\n * @param self Tooltip\n */\nconst hasTip = (self: Tooltip): boolean | undefined => {\n  const { tooltip, container, offsetParent } = self;\n\n  return tooltip && hasPopup(tooltip, container === offsetParent ? container : offsetParent);\n};\n\n/**\n * Executes after the instance has been disposed.\n *\n * @param self the `Tooltip` instance\n * @param callback the parent dispose callback\n */\nconst disposeTooltipComplete = (self: Tooltip, callback?: () => void) => {\n  const { element } = self;\n  self._toggleEventListeners();\n\n  /* istanbul ignore else */\n  if (hasAttribute(element, dataOriginalTitle) && self.name === tooltipComponent) {\n    toggleTooltipTitle(self);\n  }\n  /* istanbul ignore else */\n  if (callback) callback();\n};\n\n/**\n * Toggles on/off the special `Tooltip` event listeners.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipAction = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n\n  action(getDocument(element), touchstartEvent, self.handleTouch, passiveHandler);\n\n  [scrollEvent, resizeEvent].forEach(ev => {\n    action(getWindow(element), ev, self.update, passiveHandler);\n  });\n};\n\n/**\n * Executes after the tooltip was shown to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipShownAction = (self: Tooltip) => {\n  const { element } = self;\n  const shownTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`shown.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self, true);\n  dispatchEvent(element, shownTooltipEvent);\n  Timer.clear(element, 'in');\n};\n\n/**\n * Executes after the tooltip was hidden to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipHiddenAction = (self: Tooltip) => {\n  const { element } = self;\n  const hiddenTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`hidden.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self);\n  removeTooltip(self);\n  dispatchEvent(element, hiddenTooltipEvent);\n\n  Timer.clear(element, 'out');\n};\n\n/**\n * Toggles on/off the `Tooltip` event listeners that hide/update the tooltip.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipOpenHandlers = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element, container, offsetParent } = self;\n  const { offsetHeight, scrollHeight } = container as HTMLElement;\n  const parentModal = closest(element, `.${modalString}`);\n  const parentOffcanvas = closest(element, `.${offcanvasString}`);\n\n  /* istanbul ignore else */\n  const win = getWindow(element);\n  const overflow = offsetHeight !== scrollHeight;\n  const scrollTarget = container === offsetParent && overflow ? container : win;\n  action(scrollTarget, resizeEvent, self.update, passiveHandler);\n  action(scrollTarget, scrollEvent, self.update, passiveHandler);\n\n  // dismiss tooltips inside modal / offcanvas\n  if (parentModal) action(parentModal, `hide.bs.${modalString}`, self.handleHide);\n  if (parentOffcanvas) action(parentOffcanvas, `hide.bs.${offcanvasString}`, self.handleHide);\n};\n\n/**\n * Toggles the `title` and `data-original-title` attributes.\n *\n * @param self the `Tooltip` instance\n * @param content when `true`, event listeners are added\n */\nconst toggleTooltipTitle = (self: Tooltip, content?: string) => {\n  // [0 - add, 1 - remove] | [0 - remove, 1 - add]\n  const titleAtt = [dataOriginalTitle, titleAttr];\n  const { element } = self;\n\n  setAttribute(\n    element,\n    titleAtt[content ? 0 : 1],\n    content || getAttribute(element, titleAtt[0]) || /* istanbul ignore next */ '',\n  );\n  removeAttribute(element, titleAtt[content ? 1 : 0]);\n};\n\n// TOOLTIP DEFINITION\n// ==================\n/** Creates a new `Tooltip` instance. */\nexport default class Tooltip extends BaseComponent {\n  static selector = tooltipSelector;\n  static init = tooltipInitCallback;\n  static getInstance = getTooltipInstance;\n  static styleTip = styleTip;\n  declare options: TooltipOptions;\n  declare btn?: HTMLElement;\n  declare tooltip?: HTMLElement;\n  declare container: ParentNode;\n  declare arrow?: HTMLElement;\n  declare offsetParent?: HTMLElement;\n  declare enabled: boolean;\n  declare id: string;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<TooltipOptions>) {\n    super(target, config);\n\n    const { element } = this;\n    const isTooltip = this.name === tooltipComponent;\n    const tipString = isTooltip ? tooltipString : popoverString;\n    const tipComponent = isTooltip ? tooltipComponent : popoverComponent;\n\n    /* istanbul ignore next: this is to set Popover too */\n    getTooltipInstance = <T extends Tooltip>(elem: HTMLElement) => getInstance<T>(elem, tipComponent);\n\n    // additional properties\n    this.enabled = true;\n    /** Set unique ID for `aria-describedby`. */\n    this.id = `${tipString}-${getUID(element, tipString)}`;\n\n    // instance options\n    const { options } = this;\n\n    // invalidate\n    if (!((!options.title && isTooltip) || (!isTooltip && !options.content))) {\n      // reset default options\n      ObjectAssign(tooltipDefaults, { titleAttr: '' });\n\n      // set title attributes and add event listeners\n      /* istanbul ignore else */\n      if (hasAttribute(element, titleAttr) && isTooltip && typeof options.title === 'string') {\n        toggleTooltipTitle(this, options.title);\n      }\n\n      // set containers\n      this.container = getElementContainer(element);\n      this.offsetParent = ['sticky', 'fixed'].some(\n        position => getElementStyle(this.container as HTMLElement, 'position') === position,\n      )\n        ? (this.container as HTMLElement)\n        : getDocument(this.element).body;\n\n      // create tooltip here\n      createTip(this);\n\n      // attach events\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return tooltipComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return tooltipDefaults;\n  }\n\n  // TOOLTIP PUBLIC METHODS\n  // ======================\n  /** Handles the focus event on iOS. */\n  handleFocus = () => focus(this.element);\n  /** Shows the tooltip. */\n  handleShow = () => this.show();\n  show() {\n    const { options, tooltip, element, container, offsetParent, id } = this;\n    const { animation } = options;\n    const outTimer = Timer.get(element, 'out');\n    const tipContainer = container === offsetParent ? container : offsetParent;\n\n    Timer.clear(element, 'out');\n\n    if (tooltip && !outTimer && !hasTip(this)) {\n      Timer.set(\n        element,\n        () => {\n          const showTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`show.bs.${toLowerCase(this.name)}`);\n          dispatchEvent(element, showTooltipEvent);\n          if (!showTooltipEvent.defaultPrevented) {\n            // append to container\n            appendPopup(tooltip, tipContainer);\n\n            setAttribute(element, ariaDescribedBy, `#${id}`);\n\n            this.update();\n            toggleTooltipOpenHandlers(this, true);\n\n            /* istanbul ignore else */\n            if (!hasClass(tooltip, showClass)) addClass(tooltip, showClass);\n            /* istanbul ignore else */\n            if (animation) emulateTransitionEnd(tooltip, () => tooltipShownAction(this));\n            else tooltipShownAction(this);\n          }\n        },\n        17,\n        'in',\n      );\n    }\n  }\n\n  /** Hides the tooltip. */\n  handleHide = () => this.hide();\n  hide() {\n    const { options, tooltip, element } = this;\n    const { animation, delay } = options;\n\n    Timer.clear(element, 'in');\n\n    /* istanbul ignore else */\n    if (tooltip && hasTip(this)) {\n      Timer.set(\n        element,\n        () => {\n          const hideTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`hide.bs.${toLowerCase(this.name)}`);\n          dispatchEvent(element, hideTooltipEvent);\n\n          if (!hideTooltipEvent.defaultPrevented) {\n            this.update();\n            removeClass(tooltip, showClass);\n            toggleTooltipOpenHandlers(this);\n\n            /* istanbul ignore else */\n            if (animation) emulateTransitionEnd(tooltip, () => tooltipHiddenAction(this));\n            else tooltipHiddenAction(this);\n          }\n        },\n        delay + 17,\n        'out',\n      );\n    }\n  }\n\n  /** Updates the tooltip position. */\n  update = () => {\n    styleTip<Tooltip>(this);\n  };\n\n  /** Toggles the tooltip visibility. */\n  toggle = () => {\n    const { tooltip } = this;\n\n    if (tooltip && !hasTip(this)) this.show();\n    else this.hide();\n  };\n\n  /** Enables the tooltip. */\n  enable() {\n    const { enabled } = this;\n    /* istanbul ignore else */\n    if (!enabled) {\n      this._toggleEventListeners(true);\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Disables the tooltip. */\n  disable() {\n    const { tooltip, options, enabled } = this;\n    const { animation } = options;\n    /* istanbul ignore else */\n    if (enabled) {\n      if (tooltip && hasTip(this) && animation) {\n        this.hide();\n        emulateTransitionEnd(tooltip, () => this._toggleEventListeners());\n      } else {\n        this._toggleEventListeners();\n      }\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Toggles the `disabled` property. */\n  toggleEnabled() {\n    if (!this.enabled) this.enable();\n    else this.disable();\n  }\n\n  /**\n   * Handles the `touchstart` event listener for `Tooltip`\n   *\n   * @this {Tooltip}\n   * @param {TouchEvent} e the `Event` object\n   */\n  handleTouch = ({ target }: TouchEvent) => {\n    const { tooltip, element } = this;\n\n    /* istanbul ignore else */\n    if (\n      (tooltip && tooltip.contains(target as HTMLElement)) ||\n      target === element ||\n      (target && element.contains(target as HTMLElement))\n    ) {\n      // smile for ESLint\n    } else {\n      this.hide();\n    }\n  };\n\n  /**\n   * Toggles on/off the `Tooltip` event listeners.\n   *\n   * @param add when `true`, event listeners are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    // btn is only for dismissible popover\n    const { element, options, btn } = this;\n    const { trigger } = options;\n    const isPopover = this.name !== tooltipComponent;\n    const dismissible = isPopover && (options as PopoverOptions).dismissible ? true : false;\n\n    /* istanbul ignore else */\n    if (!trigger.includes('manual')) {\n      this.enabled = !!add;\n\n      const triggerOptions = trigger.split(' ');\n\n      triggerOptions.forEach(tr => {\n        /* istanbul ignore else */\n        if (tr === mousehoverEvent) {\n          action(element, mousedownEvent, this.handleShow);\n          action(element, mouseenterEvent, this.handleShow);\n\n          /* istanbul ignore else */\n          if (!dismissible) {\n            action(element, mouseleaveEvent, this.handleHide);\n            action(getDocument(element), touchstartEvent, this.handleTouch, passiveHandler);\n          }\n        } else if (tr === mouseclickEvent) {\n          action(element, tr, !dismissible ? this.toggle : this.handleShow);\n        } else if (tr === focusEvent) {\n          action(element, focusinEvent, this.handleShow);\n          /* istanbul ignore else */\n          if (!dismissible) action(element, focusoutEvent, this.handleHide);\n          /* istanbul ignore else */\n          if (isApple) {\n            action(element, mouseclickEvent, this.handleFocus);\n          }\n        }\n        /* istanbul ignore else */\n        if (dismissible && btn) {\n          action(btn, mouseclickEvent, this.handleHide);\n        }\n      });\n    }\n  };\n\n  /** Removes the `Tooltip` from the target element. */\n  dispose() {\n    const { tooltip, options } = this;\n    const clone = { ...this, name: this.name };\n    const callback = () => setTimeout(() => disposeTooltipComplete(clone, () => super.dispose()), 17);\n\n    if (options.animation && hasTip(clone)) {\n      this.options.delay = 0; // reset delay\n      this.hide();\n      emulateTransitionEnd(tooltip as HTMLElement, callback);\n    } else {\n      callback();\n    }\n  }\n}\n"],"names":["popoverString","popoverComponent","tooltipString","getTipTemplate","tipType","isTooltip","bodyClass","header","arrow","body","tipClassPositions","styleTip","self","tipClasses","element","tooltip","container","options","tipPositions","RTL","isRTL","setElementStyle","isPopover","tipWidth","tipHeight","htmlcw","htmlch","htmlow","getDocumentElement","placement","parentCWidth","parentOWidth","fixedParent","getElementStyle","scrollbarWidth","leftBoundry","rightBoundry","elemWidth","elemHeight","elemRectLeft","elemRectRight","elemRectTop","getBoundingClientRect","x","y","topPosition","bottomPosition","leftPosition","rightPosition","arrowTop","arrowLeft","arrowRight","arrowWidth","arrowHeight","arrowAdjust","topExceed","bottomExceed","leftExceed","rightExceed","horizontals","verticals","isHTMLElement","updatedTooltipEvent","createCustomEvent","toLowerCase","dispatchEvent","tooltipDefaults","dataOriginalTitle","tooltipComponent","setHtml","content","sanitizeFn","isString","dirty","isFunction","tempDocument","isNodeList","isArray","isNode","createTip","id","title","template","animation","customClass","dismissible","btnClose","tipString","titleParts","contentParts","placementClass","tooltipTemplate","htmlMarkup","createElement","setAttribute","tooltipHeader","querySelector","tooltipBody","tempTitle","tempContent","tempBtn","addClass","hasClass","fadeClass","getElementContainer","majorBlockTags","containers","parentNode","getParentNode","isShadowRoot","isTableElement","c","i","r","getDocument","tooltipSelector","dataBsToggle","titleAttr","getTooltipInstance","getInstance","tooltipInitCallback","Tooltip","removeTooltip","offsetParent","removeAttribute","ariaDescribedBy","removePopup","hasTip","hasPopup","disposeTooltipComplete","callback","hasAttribute","toggleTooltipTitle","toggleTooltipAction","add","action","addListener","removeListener","touchstartEvent","passiveHandler","scrollEvent","resizeEvent","ev","getWindow","tooltipShownAction","shownTooltipEvent","Timer","tooltipHiddenAction","hiddenTooltipEvent","toggleTooltipOpenHandlers","offsetHeight","scrollHeight","parentModal","closest","modalString","parentOffcanvas","offcanvasString","win","scrollTarget","titleAtt","getAttribute","BaseComponent","target","config","__publicField","focus","btn","trigger","tr","mousehoverEvent","mousedownEvent","mouseenterEvent","mouseleaveEvent","mouseclickEvent","focusEvent","focusinEvent","focusoutEvent","isApple","tipComponent","elem","getUID","ObjectAssign","position","outTimer","tipContainer","showTooltipEvent","appendPopup","showClass","emulateTransitionEnd","delay","hideTooltipEvent","removeClass","enabled","clone"],"mappings":"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"}