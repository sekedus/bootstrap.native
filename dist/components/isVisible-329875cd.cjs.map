{"version":3,"file":"isVisible-329875cd.cjs","sources":["../../src/strings/fixedTopClass.ts","../../src/strings/fixedBottomClass.ts","../../src/strings/stickyTopClass.ts","../../src/strings/positionStickyClass.ts","../../src/util/scrollbar.ts","../../src/util/backdrop.ts","../../src/util/isVisible.ts"],"sourcesContent":["/**\n * Global namespace for components `fixed-top` class.\n */\nconst fixedTopClass = 'fixed-top';\nexport default fixedTopClass;\n","/**\n * Global namespace for components `fixed-bottom` class.\n */\nconst fixedBottomClass = 'fixed-bottom';\nexport default fixedBottomClass;\n","/**\n * Global namespace for components `sticky-top` class.\n */\nconst stickyTopClass = 'sticky-top';\nexport default stickyTopClass;\n","/**\n * Global namespace for components `position-sticky` class.\n */\nconst positionStickyClass = 'position-sticky';\nexport default positionStickyClass;\n","import {\n  getWindow,\n  getDocumentElement,\n  getElementStyle,\n  getDocumentBody,\n  hasClass,\n  setElementStyle,\n  getElementsByClassName,\n} from '@thednp/shorty';\n\nimport fixedTopClass from '../strings/fixedTopClass';\nimport fixedBottomClass from '../strings/fixedBottomClass';\nimport stickyTopClass from '../strings/stickyTopClass';\nimport positionStickyClass from '../strings/positionStickyClass';\n\nconst getFixedItems = (parent?: ParentNode) => [\n  ...getElementsByClassName(fixedTopClass, parent),\n  ...getElementsByClassName(fixedBottomClass, parent),\n  ...getElementsByClassName(stickyTopClass, parent),\n  ...getElementsByClassName(positionStickyClass, parent),\n  ...getElementsByClassName('is-fixed', parent),\n];\n\n/**\n * Removes *padding* and *overflow* from the `<body>`\n * and all spacing from fixed items.\n *\n * @param element the target modal/offcanvas\n */\nexport const resetScrollbar = (element?: HTMLElement) => {\n  const bd = getDocumentBody(element);\n  setElementStyle(bd, {\n    paddingRight: '',\n    overflow: '',\n  });\n\n  const fixedItems = getFixedItems(bd);\n\n  if (fixedItems.length) {\n    fixedItems.forEach(fixed => {\n      setElementStyle(fixed, {\n        paddingRight: '',\n        marginRight: '',\n      });\n    });\n  }\n};\n\n/**\n * Returns the scrollbar width if the body does overflow\n * the window.\n *\n * @param element target element\n * @returns the scrollbar width value\n */\nexport const measureScrollbar = (element: HTMLElement) => {\n  const { clientWidth } = getDocumentElement(element);\n  const { innerWidth } = getWindow(element);\n  return Math.abs(innerWidth - clientWidth);\n};\n\n/**\n * Sets the `<body>` and fixed items style when modal / offcanvas\n * is shown to the user.\n *\n * @param element the target modal/offcanvas\n * @param overflow body does overflow or not\n */\nexport const setScrollbar = (element: HTMLElement, overflow?: boolean) => {\n  const bd = getDocumentBody(element);\n  const bodyPad = parseInt(getElementStyle(bd, 'paddingRight'), 10);\n  const isOpen = getElementStyle(bd, 'overflow') === 'hidden';\n  const sbWidth = isOpen && bodyPad ? 0 : measureScrollbar(element);\n  const fixedItems = getFixedItems(bd);\n\n  /* istanbul ignore else */\n  if (overflow) {\n    setElementStyle(bd, {\n      overflow: 'hidden',\n      paddingRight: `${bodyPad + sbWidth}px`,\n    });\n\n    /* istanbul ignore else */\n    if (fixedItems.length) {\n      fixedItems.forEach(fixed => {\n        const itemPadValue = getElementStyle(fixed, 'paddingRight');\n        fixed.style.paddingRight = `${parseInt(itemPadValue, 10) + sbWidth}px`;\n        /* istanbul ignore else */\n        if ([stickyTopClass, positionStickyClass].some(c => hasClass(fixed, c))) {\n          const itemMValue = getElementStyle(fixed, 'marginRight');\n          fixed.style.marginRight = `${parseInt(itemMValue, 10) - sbWidth}px`;\n        }\n      });\n    }\n  }\n};\n","import { createElement, getDocument, reflow, removeClass, hasClass, addClass, querySelector } from '@thednp/shorty';\n\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport modalString from '../strings/modalString';\nimport offcanvasString from '../strings/offcanvasString';\nimport { resetScrollbar } from './scrollbar';\nimport { appendPopup, removePopup } from './popupContainer';\n\nconst backdropString = 'backdrop';\nconst modalBackdropClass = `${modalString}-${backdropString}`;\nconst offcanvasBackdropClass = `${offcanvasString}-${backdropString}`;\nconst modalActiveSelector = `.${modalString}.${showClass}`;\nconst offcanvasActiveSelector = `.${offcanvasString}.${showClass}`;\n\n// any document would suffice\nconst overlay = createElement('div') as HTMLElement;\n\n/**\n * Returns the current active modal / offcancas element.\n *\n * @param element the context element\n * @returns the requested element\n */\nconst getCurrentOpen = (element?: HTMLElement): HTMLElement | null => {\n  return querySelector(`${modalActiveSelector},${offcanvasActiveSelector}`, getDocument(element));\n};\n\n/**\n * Toogles from a Modal overlay to an Offcanvas, or vice-versa.\n *\n * @param isModal\n */\nconst toggleOverlayType = (isModal?: boolean) => {\n  const targetClass = isModal ? modalBackdropClass : offcanvasBackdropClass;\n  [modalBackdropClass, offcanvasBackdropClass].forEach(c => {\n    removeClass(overlay, c);\n  });\n  addClass(overlay, targetClass);\n};\n\n/**\n * Append the overlay to DOM.\n *\n * @param hasFade\n * @param isModal\n */\nconst appendOverlay = (hasFade: boolean, isModal?: boolean) => {\n  toggleOverlayType(isModal);\n  // container.append(overlay);\n  appendPopup(overlay);\n  if (hasFade) addClass(overlay, fadeClass);\n};\n\n/**\n * Shows the overlay to the user.\n */\nconst showOverlay = () => {\n  if (!hasClass(overlay, showClass)) {\n    addClass(overlay, showClass);\n    reflow(overlay);\n  }\n};\n\n/**\n * Hides the overlay from the user.\n */\nconst hideOverlay = () => {\n  removeClass(overlay, showClass);\n};\n\n/**\n * Removes the overlay from DOM.\n *\n * @param {HTMLElement=} element\n */\nconst removeOverlay = (element?: HTMLElement): void => {\n  if (!getCurrentOpen(element)) {\n    removeClass(overlay, fadeClass);\n    // overlay.remove();\n    removePopup(overlay);\n    resetScrollbar(element);\n  }\n};\n\nexport {\n  overlay,\n  offcanvasBackdropClass,\n  modalBackdropClass,\n  modalActiveSelector,\n  offcanvasActiveSelector,\n  toggleOverlayType,\n  appendOverlay,\n  showOverlay,\n  hideOverlay,\n  getCurrentOpen,\n  removeOverlay,\n};\n","import { isHTMLElement, getElementStyle } from '@thednp/shorty';\n\n/**\n * @param element target\n * @returns the check result\n */\nconst isVisible = (element: HTMLElement) => {\n  return isHTMLElement(element) && getElementStyle(element, 'visibility') !== 'hidden' && element.offsetParent !== null;\n};\nexport default isVisible;\n"],"names":["fixedTopClass","fixedBottomClass","stickyTopClass","positionStickyClass","getFixedItems","parent","getElementsByClassName","resetScrollbar","element","bd","getDocumentBody","setElementStyle","fixedItems","fixed","measureScrollbar","clientWidth","getDocumentElement","innerWidth","getWindow","setScrollbar","overflow","bodyPad","getElementStyle","sbWidth","itemPadValue","hasClass","c","itemMValue","backdropString","modalBackdropClass","modalString","offcanvasBackdropClass","offcanvasString","modalActiveSelector","showClass","offcanvasActiveSelector","overlay","createElement","getCurrentOpen","querySelector","getDocument","toggleOverlayType","isModal","targetClass","removeClass","addClass","appendOverlay","hasFade","appendPopup","fadeClass","showOverlay","reflow","hideOverlay","removeOverlay","removePopup","isVisible","isHTMLElement"],"mappings":"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"}