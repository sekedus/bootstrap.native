{"version":3,"file":"tooltip-2b151389.cjs","sources":["../../src/strings/popoverString.ts","../../src/strings/popoverComponent.ts","../../src/strings/tooltipString.ts","../../src/util/getTipTemplate.ts","../../src/util/tipClassPositions.ts","../../src/util/styleTip.ts","../../src/util/tooltipDefaults.ts","../../src/strings/dataOriginalTitle.ts","../../src/strings/tooltipComponent.ts","../../src/util/setHtml.ts","../../src/util/createTip.ts","../../src/components/tooltip.ts"],"sourcesContent":["/** @type {string} */\nconst popoverString = 'popover';\nexport default popoverString;\n","/** @type {string} */\nconst popoverComponent = 'Popover';\nexport default popoverComponent;\n","/** @type {string} */\nconst tooltipString = 'tooltip';\nexport default tooltipString;\n","import tooltipString from '../strings/tooltipString';\n\n/**\n * Returns a template for Popover / Tooltip.\n *\n * @param tipType the expected markup type\n * @returns the template markup\n */\nconst getTipTemplate = (tipType: string) => {\n  const isTooltip = tipType === tooltipString;\n  const bodyClass = isTooltip ? `${tipType}-inner` : `${tipType}-body`;\n  const header = !isTooltip ? `<h3 class=\"${tipType}-header\"></h3>` : '';\n  const arrow = `<div class=\"${tipType}-arrow\"></div>`;\n  const body = `<div class=\"${bodyClass}\"></div>`;\n  return `<div class=\"${tipType}\" role=\"${tooltipString}\">${header + arrow + body}</div>`;\n};\n\nexport default getTipTemplate;\n","const tipClassPositions = {\n  top: 'top',\n  bottom: 'bottom',\n  left: 'start',\n  right: 'end',\n};\n\nexport default tipClassPositions;\n","import {\n  isHTMLElement,\n  setElementStyle,\n  getDocumentElement,\n  getWindow,\n  getBoundingClientRect,\n  getElementStyle,\n  isRTL,\n  isMedia,\n} from '@thednp/shorty';\n\nimport popoverComponent from '../strings/popoverComponent';\nimport tipClassPositions from './tipClassPositions';\n// import TooltipInterface from '../interface/tooltip';\n// import PopoverInterface from '../interface/popover';\nimport Tooltip from '../components/tooltip';\nimport { popupContainer } from './popupContainer';\n\n// type FakeTip = {\n//   name: string,\n//   element: HTMLElement,\n//   tooltip: HTMLElement,\n//   options: TooltipInterface.Options | PopoverInterface.Options,\n//   arrow: HTMLElement,\n//   offsetParent: ParentNode\n// }\n\n/**\n * Style popovers and tooltips.\n *\n * @param self the `Popover` / `Tooltip` instance\n * @param e event object\n */\nconst styleTip = <T extends Tooltip>(self: T, e?: Event & PointerEvent) => {\n  const tipClasses = /\\b(top|bottom|start|end)+/;\n  const { element, tooltip, options, arrow } = self;\n  if (!tooltip) return;\n  const tipPositions = { ...tipClassPositions };\n\n  const RTL = isRTL(element);\n  if (RTL) {\n    tipPositions.left = 'end';\n    tipPositions.right = 'start';\n  }\n\n  // reset tooltip style (top: 0, left: 0 works best)\n  setElementStyle(tooltip, {\n    // top: '0px', left: '0px', right: '', bottom: '',\n    top: '',\n    left: '',\n    right: '',\n    bottom: '',\n  });\n  const isPopover = self.name === popoverComponent;\n  const { offsetWidth: tipWidth, offsetHeight: tipHeight } = tooltip;\n  const { clientWidth: htmlcw, clientHeight: htmlch } = getDocumentElement(element);\n  // const { container } = options;\n  let { placement } = options;\n  const { left: parentLeft, right: parentRight, top: parentTop } = getBoundingClientRect(popupContainer, true);\n  const { clientWidth: parentCWidth, offsetWidth: parentOWidth } = popupContainer;\n  const scrollbarWidth = Math.abs(parentCWidth - parentOWidth);\n  // const tipAbsolute = getElementStyle(tooltip, 'position') === 'absolute';\n  const parentPosition = getElementStyle(popupContainer, 'position');\n  // const absoluteParent = parentPosition === 'absolute';\n  const fixedParent = parentPosition === 'fixed';\n  const staticParent = parentPosition === 'static';\n  // const stickyParent = parentPosition === 'sticky';\n  // const isSticky = stickyParent && parentTop === parseFloat(getElementStyle(popupContainer, 'top'));\n  // const absoluteTarget = getElementStyle(element, 'position') === 'absolute';\n  // const stickyFixedParent = ['sticky', 'fixed'].includes(parentPosition);\n  const leftBoundry = RTL && fixedParent ? scrollbarWidth : 0;\n  const rightBoundry = fixedParent\n    ? parentCWidth + parentLeft + (RTL ? scrollbarWidth : 0)\n    : parentCWidth + parentLeft + (htmlcw - parentRight) - 1;\n  const {\n    width: elemWidth,\n    height: elemHeight,\n    left: elemRectLeft,\n    right: elemRectRight,\n    top: elemRectTop,\n  } = getBoundingClientRect(element, true);\n  // console.log(getWindow(tooltip));\n  const win = getWindow(tooltip);\n\n  const scroll = { x: win.scrollX, y: win.scrollY };\n  // const { x, y } = getRectRelativeToOffsetParent(element, win, scroll);\n  const { x, y } = { x: elemRectLeft + scroll.x, y: elemRectTop + scroll.y };\n  // reset arrow style\n  setElementStyle(arrow as HTMLElement, {\n    top: '',\n    left: '',\n    right: '',\n    bottom: '',\n  });\n  let topPosition: number | string = 0;\n  let leftPosition: number | string = 0;\n  let rightPosition: number | string = 0;\n  let arrowTop: number | string = 0;\n  let arrowLeft: number | string = 0;\n  let arrowRight: number | string = 0;\n\n  const arrowWidth = (arrow as HTMLElement).offsetWidth || 0;\n  const arrowHeight = (arrow as HTMLElement).offsetHeight || 0;\n  const arrowAdjust = arrowWidth / 2;\n\n  // check placement\n  let topExceed = elemRectTop - tipHeight - arrowHeight < 0;\n  let bottomExceed = elemRectTop + tipHeight + elemHeight + arrowHeight >= htmlch;\n  let leftExceed = elemRectLeft - tipWidth - arrowWidth < leftBoundry;\n  let rightExceed = elemRectLeft + tipWidth + elemWidth + arrowWidth >= rightBoundry;\n\n  const horizontal = ['left', 'right'];\n  const vertical = ['top', 'bottom'];\n\n  topExceed = horizontal.includes(placement)\n    ? elemRectTop + elemHeight / 2 - tipHeight / 2 - arrowHeight < 0\n    : topExceed;\n  bottomExceed = horizontal.includes(placement)\n    ? elemRectTop + tipHeight / 2 + elemHeight / 2 + arrowHeight >= htmlch\n    : bottomExceed;\n  leftExceed = vertical.includes(placement) ? elemRectLeft + elemWidth / 2 - tipWidth / 2 < leftBoundry : leftExceed;\n  rightExceed = vertical.includes(placement)\n    ? elemRectLeft + tipWidth / 2 + elemWidth / 2 >= rightBoundry\n    : rightExceed;\n\n  // first remove side positions if both left and right limits are exceeded\n  // we usually fall back to top|bottom\n  placement = horizontal.includes(placement) && leftExceed && rightExceed ? 'top' : placement;\n  // second, recompute placement\n  placement = placement === 'top' && topExceed ? 'bottom' : placement;\n  placement = placement === 'bottom' && bottomExceed ? 'top' : placement;\n  placement = placement === 'left' && leftExceed ? 'right' : placement;\n  placement = placement === 'right' && rightExceed ? 'left' : placement;\n\n  // update tooltip/popover class\n  if (!tooltip.className.includes(placement)) {\n    tooltip.className = tooltip.className.replace(tipClasses, tipPositions[placement]);\n  }\n\n  // compute tooltip / popover coordinates\n  /* istanbul ignore else */\n  if (horizontal.includes(placement)) {\n    // secondary|side positions\n    if (placement === 'left') {\n      // LEFT\n      leftPosition = x - tipWidth - (isPopover ? arrowWidth : 0);\n    } else {\n      // RIGHT\n      leftPosition = x + elemWidth + (isPopover ? arrowWidth : 0);\n    }\n\n    // adjust top and arrow\n    if (topExceed) {\n      topPosition = y;\n      // topPosition += isSticky ? -parentTop - scroll.y : 0;\n\n      arrowTop = elemHeight / 2 - arrowWidth;\n    } else if (bottomExceed) {\n      topPosition = y - tipHeight + elemHeight;\n      // topPosition += isSticky ? -parentTop - scroll.y : 0;\n\n      arrowTop = tipHeight - elemHeight / 2 - arrowWidth;\n    } else {\n      topPosition = y - tipHeight / 2 + elemHeight / 2;\n      // topPosition += isSticky ? -parentTop - scroll.y : 0;\n\n      arrowTop = tipHeight / 2 - arrowHeight / 2;\n    }\n  } else if (vertical.includes(placement)) {\n    if (e && isMedia(element)) {\n      let eX = 0;\n      let eY = 0;\n      if (staticParent) {\n        eX = e.pageX;\n        eY = e.pageY;\n      } else {\n        // fixedParent | stickyParent\n        eX = e.clientX - parentLeft + (fixedParent ? scroll.x : 0);\n        eY = e.clientY - parentTop + (fixedParent ? scroll.y : 0);\n      }\n\n      // some weird RTL bug\n      eX -= RTL && fixedParent && scrollbarWidth ? scrollbarWidth : 0;\n\n      if (placement === 'top') {\n        topPosition = eY - tipHeight - arrowWidth;\n      } else {\n        topPosition = eY + arrowWidth;\n      }\n\n      // adjust (left | right) and also the arrow\n      if (e.clientX - tipWidth / 2 < leftBoundry) {\n        leftPosition = 0;\n        arrowLeft = eX - arrowAdjust;\n      } else if (e.clientX + tipWidth / 2 > rightBoundry) {\n        leftPosition = 'auto';\n        rightPosition = 0;\n        arrowRight = rightBoundry - eX - arrowAdjust;\n        arrowRight -= fixedParent ? parentLeft + (RTL ? scrollbarWidth : 0) : 0;\n\n        // normal top/bottom\n      } else {\n        leftPosition = eX - tipWidth / 2;\n        arrowLeft = tipWidth / 2 - arrowAdjust;\n      }\n    } else {\n      if (placement === 'top') {\n        topPosition = y - tipHeight - (isPopover ? arrowHeight : 0);\n      } else {\n        // BOTTOM\n        topPosition = y + elemHeight + (isPopover ? arrowHeight : 0);\n      }\n\n      // adjust left | right and also the arrow\n      if (leftExceed) {\n        leftPosition = 0;\n        arrowLeft = x + elemWidth / 2 - arrowAdjust;\n      } else if (rightExceed) {\n        leftPosition = 'auto';\n        rightPosition = 0;\n        arrowRight = elemWidth / 2 + rightBoundry - elemRectRight - arrowAdjust;\n      } else {\n        leftPosition = x - tipWidth / 2 + elemWidth / 2;\n        arrowLeft = tipWidth / 2 - arrowAdjust;\n      }\n    }\n  }\n\n  // apply style to tooltip/popover\n  setElementStyle(tooltip, {\n    top: `${topPosition}px`,\n    left: leftPosition === 'auto' ? leftPosition : `${leftPosition}px`,\n    right: rightPosition !== undefined ? `${rightPosition}px` : '',\n  });\n\n  // update arrow placement\n  /* istanbul ignore else */\n  if (isHTMLElement(arrow)) {\n    if (arrowTop !== undefined) {\n      arrow.style.top = `${arrowTop}px`;\n    }\n    if (arrowLeft !== undefined) {\n      arrow.style.left = `${arrowLeft}px`;\n    } else if (arrowRight !== undefined) {\n      arrow.style.right = `${arrowRight}px`;\n    }\n  }\n  // console.log(tooltip, leftPosition, rightPosition, arrowLeft);\n};\n\nexport default styleTip;\n","import getTipTemplate from './getTipTemplate';\nimport tooltipString from '../strings/tooltipString';\nimport { TooltipOptions } from '../interface/tooltip';\n\nconst tooltipDefaults: TooltipOptions = {\n  template: getTipTemplate(tooltipString),\n  title: '',\n  customClass: '',\n  trigger: 'hover focus',\n  placement: 'top',\n  sanitizeFn: undefined,\n  animation: true,\n  delay: 200,\n  container: document.body,\n  content: '',\n  dismissible: false,\n  btnClose: '',\n};\nexport default tooltipDefaults;\n","/**\n * Global namespace for `data-bs-title` attribute.\n */\nconst dataOriginalTitle = 'data-original-title';\nexport default dataOriginalTitle;\n","/** @type {string} */\nconst tooltipComponent = 'Tooltip';\nexport default tooltipComponent;\n","// import {getWindow} from '@thednp/shorty';\nimport { isNode, isArray, isFunction, isString, isNodeList, isHTMLElement } from '@thednp/shorty';\n\n/**\n * Append an existing `Element` to Popover / Tooltip component or HTML\n * markup string to be parsed & sanitized to be used as popover / tooltip content.\n *\n * @param element target\n * @param content the `Element` to append / string\n * @param sanitizeFn a function to sanitize string content\n */\nconst setHtml = (element: Node, content: Node[] | Node | string, sanitizeFn?: (s: string) => string) => {\n  /* istanbul ignore next */\n  if (!isHTMLElement(element) || (isString(content) && !content.length)) return;\n\n  /* istanbul ignore else */\n  if (isString(content)) {\n    let dirty = content.trim(); // fixing #233\n    if (isFunction(sanitizeFn)) dirty = sanitizeFn(dirty);\n\n    // const win = getWindow(element);\n    const domParser = new DOMParser();\n    const tempDocument = domParser.parseFromString(dirty, 'text/html');\n    element.append(...[...tempDocument.body.childNodes]);\n  } else if (isHTMLElement(content)) {\n    element.append(content);\n  } else if (isNodeList(content) || (isArray(content) && content.every(isNode))) {\n    element.append(...[...content]);\n  }\n};\nexport default setHtml;\n","import { createElement, addClass, hasClass, setAttribute, querySelector, isRTL, isHTMLElement } from '@thednp/shorty';\n\nimport tooltipComponent from '../strings/tooltipComponent';\nimport tooltipString from '../strings/tooltipString';\nimport popoverString from '../strings/popoverString';\nimport fadeClass from '../strings/fadeClass';\nimport tipClassPositions from './tipClassPositions';\nimport setHtml from './setHtml';\nimport Tooltip from '../components/tooltip';\nimport Popover from '../components/popover';\n\n/**\n * Creates a new tooltip / popover.\n *\n * @param self the `Tooltip` / `Popover` instance\n */\nconst createTip = (self: Tooltip | Popover) => {\n  const isTooltip = self.name === tooltipComponent;\n\n  const { id, element, options } = self;\n  const { title, placement, template, animation, customClass, sanitizeFn, dismissible, content, btnClose } = options;\n  const tipString = isTooltip ? tooltipString : popoverString;\n  const tipPositions = { ...tipClassPositions };\n  let titleParts: Node[] = [];\n  let contentParts: Node[] = [];\n\n  if (isRTL(element)) {\n    tipPositions.left = 'end';\n    tipPositions.right = 'start';\n  }\n\n  // set initial popover class\n  const placementClass = `bs-${tipString}-${tipPositions[placement]}`;\n\n  // load template\n  let tooltipTemplate: Node | string;\n  if (isHTMLElement(template)) {\n    tooltipTemplate = template;\n  } else {\n    const htmlMarkup = createElement('div') as HTMLElement;\n    setHtml(htmlMarkup, template, sanitizeFn);\n    tooltipTemplate = htmlMarkup.firstChild as HTMLElement;\n  }\n\n  // set popover markup\n  self.tooltip = isHTMLElement(tooltipTemplate) ? (tooltipTemplate.cloneNode(true) as HTMLElement) : undefined;\n\n  const { tooltip } = self;\n  if (!tooltip) return;\n\n  // set id and role attributes\n  setAttribute(tooltip, 'id', id);\n  setAttribute(tooltip, 'role', tooltipString);\n\n  const bodyClass = isTooltip ? `${tooltipString}-inner` : `${popoverString}-body`;\n  const tooltipHeader = isTooltip ? null : querySelector(`.${popoverString}-header`, tooltip);\n  const tooltipBody = querySelector(`.${bodyClass}`, tooltip);\n\n  // set arrow and enable access for styleTip\n  self.arrow = querySelector(`.${tipString}-arrow`, tooltip) as HTMLElement;\n  const { arrow } = self;\n\n  if (isHTMLElement(title)) titleParts = [title.cloneNode(true)];\n  else {\n    const tempTitle = createElement('div') as Node;\n    setHtml(tempTitle, title, sanitizeFn);\n    titleParts = [...[...tempTitle.childNodes]];\n  }\n\n  if (isHTMLElement(content)) contentParts = [content.cloneNode(true)];\n  else {\n    const tempContent = createElement('div') as Node;\n    setHtml(tempContent, content, sanitizeFn);\n    contentParts = [...[...tempContent.childNodes]];\n  }\n\n  // set dismissible button\n  if (dismissible) {\n    if (title) {\n      if (isHTMLElement(btnClose)) titleParts = [...titleParts, btnClose.cloneNode(true)];\n      else {\n        const tempBtn = createElement('div') as Node;\n        setHtml(tempBtn, btnClose, sanitizeFn);\n        titleParts = [...titleParts, tempBtn.firstChild as Node];\n      }\n    } else {\n      /* istanbul ignore else */\n      if (tooltipHeader) tooltipHeader.remove();\n      if (isHTMLElement(btnClose)) contentParts = [...contentParts, btnClose.cloneNode(true)];\n      else {\n        const tempBtn = createElement('div') as Node;\n        setHtml(tempBtn, btnClose, sanitizeFn);\n        contentParts = [...contentParts, tempBtn.firstChild as Node];\n      }\n    }\n  }\n\n  // fill the template with content from options / data attributes\n  // also sanitize title && content\n  /* istanbul ignore else */\n  if (!isTooltip) {\n    /* istanbul ignore else */\n    if (title && tooltipHeader) setHtml(tooltipHeader, titleParts, sanitizeFn);\n    /* istanbul ignore else */\n    if (content && tooltipBody) setHtml(tooltipBody, contentParts, sanitizeFn);\n    // set btn\n    self.btn = querySelector('.btn-close', tooltip) || undefined;\n  } else if (title && tooltipBody) setHtml(tooltipBody, title, sanitizeFn);\n\n  // Bootstrap 5.2.x\n  addClass(tooltip, 'position-absolute');\n  addClass(arrow, 'position-absolute');\n\n  // set popover animation and placement\n  /* istanbul ignore else */\n  if (!hasClass(tooltip, tipString)) addClass(tooltip, tipString);\n  /* istanbul ignore else */\n  if (animation && !hasClass(tooltip, fadeClass)) addClass(tooltip, fadeClass);\n  /* istanbul ignore else */\n  if (customClass && !hasClass(tooltip, customClass)) {\n    addClass(tooltip, customClass);\n  }\n  /* istanbul ignore else */\n  if (!hasClass(tooltip, placementClass)) addClass(tooltip, placementClass);\n};\n\nexport default createTip;\n","/* Native JavaScript for Bootstrap 5 | Tooltip\n---------------------------------------------- */\nimport {\n  ariaDescribedBy,\n  focusoutEvent,\n  focusinEvent,\n  focusEvent,\n  mousemoveEvent,\n  mouseleaveEvent,\n  mouseenterEvent,\n  mousedownEvent,\n  mouseclickEvent,\n  closest,\n  getUID,\n  getDocument,\n  getWindow,\n  removeAttribute,\n  getAttribute,\n  setAttribute,\n  hasAttribute,\n  touchstartEvent,\n  resizeEvent,\n  scrollEvent,\n  mousehoverEvent,\n  toLowerCase,\n  focus,\n  Timer,\n  emulateTransitionEnd,\n  passiveHandler,\n  dispatchEvent,\n  isApple,\n  isMedia,\n  isFunction,\n  getInstance,\n  ObjectAssign,\n  createCustomEvent,\n  removeClass,\n  hasClass,\n  addClass,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport dataBsToggle from '../strings/dataBsToggle';\nimport dataOriginalTitle from '../strings/dataOriginalTitle';\nimport showClass from '../strings/showClass';\nimport tooltipString from '../strings/tooltipString';\nimport tooltipComponent from '../strings/tooltipComponent';\nimport popoverString from '../strings/popoverString';\nimport popoverComponent from '../strings/popoverComponent';\nimport modalString from '../strings/modalString';\nimport offcanvasString from '../strings/offcanvasString';\n\nimport styleTip from '../util/styleTip';\nimport createTip from '../util/createTip';\nimport { appendPopup, removePopup, hasPopup } from '../util/popupContainer';\n// import isVisibleTip from '../util/isVisibleTip';\n// import getElementContainer from '../util/getElementContainer';\nimport tooltipDefaults from '../util/tooltipDefaults';\nimport BaseComponent from './base-component';\nimport { TooltipOptions, TooltipEvent } from '../interface/tooltip';\nimport { PopoverOptions, PopoverEvent } from '../interface/popover';\n\n// TOOLTIP PRIVATE GC\n// ==================\nconst tooltipSelector = `[${dataBsToggle}=\"${tooltipString}\"],[data-tip=\"${tooltipString}\"]`;\nconst titleAttr = 'title';\n\n/**\n * Static method which returns an existing `Tooltip` instance associated\n * to a target `Element`.\n *\n */\nlet getTooltipInstance = (element: HTMLElement) => getInstance<Tooltip>(element, tooltipComponent);\n\n/**\n * A `Tooltip` initialization callback.\n */\nconst tooltipInitCallback = (element: HTMLElement) => new Tooltip(element);\n\n// TOOLTIP PRIVATE METHODS\n// =======================\n/**\n * Removes the tooltip from the DOM.\n *\n * @param self the `Tooltip` instance\n */\nconst removeTooltip = (self: Tooltip) => {\n  const { element, tooltip } = self;\n  removeAttribute(element, ariaDescribedBy);\n  removePopup(tooltip);\n  // tooltip?.remove();\n};\n\n/**\n * Executes after the instance has been disposed.\n *\n * @param self the `Tooltip` instance\n * @param callback the parent dispose callback\n */\nconst disposeTooltipComplete = (self: Tooltip, callback?: () => void) => {\n  const { element } = self;\n  toggleTooltipHandlers(self);\n\n  /* istanbul ignore else */\n  if (hasAttribute(element, dataOriginalTitle) && self.name === tooltipComponent) {\n    toggleTooltipTitle(self);\n  }\n  /* istanbul ignore else */\n  if (callback) callback();\n};\n\n/**\n * Toggles on/off the special `Tooltip` event listeners.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipAction = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n\n  action(getDocument(element), touchstartEvent, self.handleTouch as EventListener, passiveHandler);\n\n  /* istanbul ignore else */\n  if (!isMedia(element)) {\n    [scrollEvent, resizeEvent].forEach(ev => {\n      action(getWindow(element), ev, self.update, passiveHandler);\n    });\n  }\n};\n\n/**\n * Executes after the tooltip was shown to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipShownAction = (self: Tooltip) => {\n  const { element } = self;\n  const shownTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`shown.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self, true);\n  dispatchEvent(element, shownTooltipEvent);\n  Timer.clear(element, 'in');\n};\n\n/**\n * Executes after the tooltip was hidden to the user.\n *\n * @param self the `Tooltip` instance\n * @param callback the dispose callback\n */\nconst tooltipHiddenAction = (self: Tooltip, callback?: () => any) => {\n  const { element } = self;\n  const hiddenTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`hidden.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self);\n  removeTooltip(self);\n  dispatchEvent(element, hiddenTooltipEvent);\n  if (isFunction(callback)) callback();\n  Timer.clear(element, 'out');\n};\n\n/**\n * Toggles on/off the `Tooltip` event listeners.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipHandlers = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  // btn is only for dismissible popover\n  const { element, options, btn } = self;\n  const { trigger } = options;\n  const isPopover = self.name !== tooltipComponent;\n  const dismissible = isPopover && (options as PopoverOptions).dismissible ? true : false;\n\n  if (trigger?.includes('manual')) return;\n\n  self.enabled = !!add;\n\n  const triggerOptions = trigger?.split(' ');\n  const elemIsMedia = isMedia(element);\n\n  if (elemIsMedia) {\n    action(element, mousemoveEvent, self.update, passiveHandler);\n  }\n\n  triggerOptions?.forEach(tr => {\n    /* istanbul ignore else */\n    if (elemIsMedia || tr === mousehoverEvent) {\n      action(element, mousedownEvent, self.show);\n      action(element, mouseenterEvent, self.show);\n\n      /* istanbul ignore else */\n      if (dismissible && btn) {\n        action(btn, mouseclickEvent, self.hide);\n      } else {\n        action(element, mouseleaveEvent, self.hide);\n        action(getDocument(element), touchstartEvent, self.handleTouch as EventListener, passiveHandler);\n      }\n    } else if (tr === mouseclickEvent) {\n      action(element, tr, !dismissible ? self.toggle : self.show);\n    } else if (tr === focusEvent) {\n      action(element, focusinEvent, self.show);\n      /* istanbul ignore else */\n      if (!dismissible) action(element, focusoutEvent, self.hide);\n      /* istanbul ignore else */\n      if (isApple) {\n        action(element, mouseclickEvent, () => focus(element));\n      }\n    }\n  });\n};\n\n/**\n * Toggles on/off the `Tooltip` event listeners that hide/update the tooltip.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipOpenHandlers = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n  // const { offsetHeight, scrollHeight } = popupContainer;\n  const parentModal = closest(element, `.${modalString}`);\n  const parentOffcanvas = closest(element, `.${offcanvasString}`);\n\n  /* istanbul ignore else */\n  if (!isMedia(element)) {\n    const win = getWindow(element);\n    // const overflow = offsetHeight !== scrollHeight;\n    // const scrollTarget = overflow || offsetParent !== win ? popupContainer : win;\n    action(win, resizeEvent, self.update, passiveHandler);\n    action(win, scrollEvent, self.update, passiveHandler);\n  }\n\n  // dismiss tooltips inside modal / offcanvas\n  if (parentModal) action(parentModal, `hide.bs.${modalString}`, self.hide);\n  if (parentOffcanvas) action(parentOffcanvas, `hide.bs.${offcanvasString}`, self.hide);\n};\n\n/**\n * Toggles the `title` and `data-original-title` attributes.\n *\n * @param self the `Tooltip` instance\n * @param content when `true`, event listeners are added\n */\nconst toggleTooltipTitle = (self: Tooltip, content?: string) => {\n  // [0 - add, 1 - remove] | [0 - remove, 1 - add]\n  const titleAtt = [dataOriginalTitle, titleAttr];\n  const { element } = self;\n\n  setAttribute(element, titleAtt[content ? 0 : 1], content || getAttribute(element, titleAtt[0]) || '');\n  removeAttribute(element, titleAtt[content ? 1 : 0]);\n};\n\n// TOOLTIP DEFINITION\n// ==================\n/** Creates a new `Tooltip` instance. */\nexport default class Tooltip extends BaseComponent {\n  static selector = tooltipSelector;\n  static init = tooltipInitCallback;\n  static getInstance = getTooltipInstance;\n  static styleTip = styleTip;\n  declare options: TooltipOptions;\n  declare btn?: HTMLElement;\n  declare tooltip?: HTMLElement;\n  declare arrow?: HTMLElement;\n  declare offsetParent?: HTMLElement | Window;\n  declare enabled: boolean;\n  declare id: string;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<TooltipOptions>) {\n    super(target, config);\n\n    const { element } = this;\n    const isTooltip = this.name === tooltipComponent;\n    const tipString = isTooltip ? tooltipString : popoverString;\n    const tipComponent = isTooltip ? tooltipComponent : popoverComponent;\n\n    /* istanbul ignore next: this is to set Popover too */\n    getTooltipInstance = <T extends Tooltip>(elem: HTMLElement) => getInstance<T>(elem, tipComponent);\n\n    // additional properties\n    this.enabled = true;\n    /** Set unique ID for `aria-describedby`. */\n    this.id = `${tipString}-${getUID(element, tipString)}`;\n\n    // instance options\n    const { options } = this;\n\n    // invalidate\n    if ((!options.title && isTooltip) || (!isTooltip && !options.content)) {\n      // throw Error(`${this.name} Error: target has no content set.`);\n      return;\n    }\n\n    // reset default options\n    ObjectAssign(tooltipDefaults, { titleAttr: '' });\n\n    // all functions bind\n    this.handleTouch = this.handleTouch.bind(this);\n    this.update = this.update.bind(this);\n    this.show = this.show.bind(this);\n    this.hide = this.hide.bind(this);\n    this.toggle = this.toggle.bind(this);\n\n    // set title attributes and add event listeners\n    /* istanbul ignore else */\n    if (hasAttribute(element, titleAttr) && isTooltip) {\n      toggleTooltipTitle(this, options.title);\n    }\n\n    // create tooltip here\n    createTip(this);\n\n    // attach events\n    toggleTooltipHandlers(this, true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return tooltipComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return tooltipDefaults;\n  }\n\n  // TOOLTIP PUBLIC METHODS\n  // ======================\n  /**\n   * Shows the tooltip.\n   *\n   * @param e the `Event` object\n   */\n  show(e?: Event) {\n    const { options, tooltip, element, id } = this;\n    const { animation } = options;\n    const outTimer = Timer.get(element, 'out');\n\n    Timer.clear(element, 'out');\n\n    if (tooltip && !outTimer && !hasPopup(tooltip)) {\n      Timer.set(\n        element,\n        () => {\n          const showTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`show.bs.${toLowerCase(this.name)}`);\n          dispatchEvent(element, showTooltipEvent);\n          if (showTooltipEvent.defaultPrevented) return;\n\n          // append to container\n          appendPopup(tooltip);\n\n          setAttribute(element, ariaDescribedBy, `#${id}`);\n\n          this.update(e);\n          toggleTooltipOpenHandlers(this, true);\n\n          /* istanbul ignore else */\n          if (!hasClass(tooltip, showClass)) addClass(tooltip, showClass);\n          /* istanbul ignore else */\n          if (animation) emulateTransitionEnd(tooltip, () => tooltipShownAction(this));\n          else tooltipShownAction(this);\n        },\n        17,\n        'in',\n      );\n    }\n  }\n\n  /**\n   * Hides the tooltip.\n   *\n   * @param e the dispose callback\n   * @param callback the dispose callback\n   */\n  hide(e?: Event, callback?: () => void) {\n    const { options, tooltip, element } = this;\n    const { animation, delay } = options;\n\n    Timer.clear(element, 'in');\n\n    /* istanbul ignore else */\n    if (tooltip && hasPopup(tooltip)) {\n      Timer.set(\n        element,\n        () => {\n          const hideTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`hide.bs.${toLowerCase(this.name)}`);\n          dispatchEvent(element, hideTooltipEvent);\n\n          if (hideTooltipEvent.defaultPrevented) return;\n\n          this.update(e); // use Event\n          removeClass(tooltip, showClass);\n          toggleTooltipOpenHandlers(this);\n\n          /* istanbul ignore else */\n          if (animation) emulateTransitionEnd(tooltip, () => tooltipHiddenAction(this, callback));\n          else tooltipHiddenAction(this, callback);\n        },\n        delay + 17,\n        'out',\n      );\n    }\n  }\n\n  /**\n   * Updates the tooltip position.\n   *\n   * @param e the `Event` object\n   */\n  update(e?: Event) {\n    styleTip<Tooltip>(this, e as (Event & PointerEvent) | undefined);\n  }\n\n  /**\n   * Toggles the tooltip visibility.\n   *\n   * @param e the `Event` object\n   */\n  toggle(e?: Event) {\n    const { tooltip } = this;\n\n    if (tooltip && !hasPopup(tooltip)) this.show(e);\n    else this.hide();\n  }\n\n  /** Enables the tooltip. */\n  enable() {\n    const { enabled } = this;\n    /* istanbul ignore else */\n    if (!enabled) {\n      toggleTooltipHandlers(this, true);\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Disables the tooltip. */\n  disable() {\n    const { tooltip, options, enabled } = this;\n    const { animation } = options;\n    /* istanbul ignore else */\n    if (enabled) {\n      if (tooltip && hasPopup(tooltip) && animation) {\n        this.hide(undefined, () => toggleTooltipHandlers(this));\n      } else {\n        toggleTooltipHandlers(this);\n      }\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Toggles the `disabled` property. */\n  toggleEnabled() {\n    if (!this.enabled) this.enable();\n    else this.disable();\n  }\n\n  /**\n   * Handles the `touchstart` event listener for `Tooltip`\n   *\n   * @this {Tooltip}\n   * @param {TouchEvent} e the `Event` object\n   */\n  handleTouch({ target }: TouchEvent) {\n    const { tooltip, element } = this;\n\n    /* istanbul ignore next */\n    if (\n      (tooltip && tooltip.contains(target as HTMLElement)) ||\n      target === element ||\n      (target && element.contains(target as HTMLElement))\n    ) {\n      // smile for ESLint\n    } else {\n      this.hide();\n    }\n  }\n\n  /** Removes the `Tooltip` from the target element. */\n  dispose() {\n    const { tooltip, options } = this;\n    const callback = () => disposeTooltipComplete(this, () => super.dispose());\n\n    if (options.animation && tooltip && hasPopup(tooltip)) {\n      this.options.delay = 0; // reset delay\n      this.hide(undefined, callback);\n    } else {\n      callback();\n    }\n  }\n}\n"],"names":["popoverString","popoverComponent","tooltipString","getTipTemplate","tipType","isTooltip","bodyClass","header","arrow","body","tipClassPositions","styleTip","self","tipClasses","element","tooltip","options","tipPositions","RTL","isRTL","setElementStyle","isPopover","tipWidth","tipHeight","htmlcw","htmlch","getDocumentElement","placement","parentLeft","parentRight","parentTop","getBoundingClientRect","popupContainer","parentCWidth","parentOWidth","scrollbarWidth","parentPosition","getElementStyle","fixedParent","staticParent","leftBoundry","rightBoundry","elemWidth","elemHeight","elemRectLeft","elemRectRight","elemRectTop","win","getWindow","scroll","x","y","topPosition","leftPosition","rightPosition","arrowTop","arrowLeft","arrowRight","arrowWidth","arrowHeight","arrowAdjust","topExceed","bottomExceed","leftExceed","rightExceed","horizontal","vertical","isMedia","eX","eY","isHTMLElement","tooltipDefaults","dataOriginalTitle","tooltipComponent","setHtml","content","sanitizeFn","isString","dirty","isFunction","tempDocument","isNodeList","isArray","isNode","createTip","id","title","template","animation","customClass","dismissible","btnClose","tipString","titleParts","contentParts","placementClass","tooltipTemplate","htmlMarkup","createElement","setAttribute","tooltipHeader","querySelector","tooltipBody","tempTitle","tempContent","tempBtn","addClass","hasClass","fadeClass","tooltipSelector","dataBsToggle","titleAttr","getTooltipInstance","getInstance","tooltipInitCallback","Tooltip","removeTooltip","removeAttribute","ariaDescribedBy","removePopup","disposeTooltipComplete","callback","toggleTooltipHandlers","hasAttribute","toggleTooltipTitle","toggleTooltipAction","add","action","addListener","removeListener","getDocument","touchstartEvent","passiveHandler","scrollEvent","resizeEvent","ev","tooltipShownAction","shownTooltipEvent","createCustomEvent","toLowerCase","dispatchEvent","Timer","tooltipHiddenAction","hiddenTooltipEvent","btn","trigger","triggerOptions","elemIsMedia","mousemoveEvent","tr","mousehoverEvent","mousedownEvent","mouseenterEvent","mouseclickEvent","mouseleaveEvent","focusEvent","focusinEvent","focusoutEvent","isApple","focus","toggleTooltipOpenHandlers","parentModal","closest","modalString","parentOffcanvas","offcanvasString","titleAtt","getAttribute","BaseComponent","target","config","tipComponent","elem","getUID","ObjectAssign","outTimer","hasPopup","showTooltipEvent","appendPopup","showClass","emulateTransitionEnd","delay","hideTooltipEvent","removeClass","enabled"],"mappings":"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"}