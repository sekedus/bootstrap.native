{"version":3,"file":"setHtml.cjs","sources":["../../src/util/setHtml.ts"],"sourcesContent":["// import {getWindow} from '@thednp/shorty';\nimport { isNode, isArray, isFunction, isString, isNodeList, isHTMLElement } from '@thednp/shorty';\n\n/**\n * Append an existing `Element` to Popover / Tooltip component or HTML\n * markup string to be parsed & sanitized to be used as popover / tooltip content.\n *\n * @param element target\n * @param content the `Element` to append / string\n * @param sanitizeFn a function to sanitize string content\n */\nconst setHtml = (element: Node, content: Node[] | Node | string, sanitizeFn?: (s: string) => string) => {\n  /* istanbul ignore next */\n  if (!isHTMLElement(element) || (isString(content) && !content.length)) return;\n\n  /* istanbul ignore else */\n  if (isString(content)) {\n    let dirty = content.trim(); // fixing #233\n    if (isFunction(sanitizeFn)) dirty = sanitizeFn(dirty);\n\n    // const win = getWindow(element);\n    const domParser = new DOMParser();\n    const tempDocument = domParser.parseFromString(dirty, 'text/html');\n    element.append(...[...tempDocument.body.childNodes]);\n  } else if (isHTMLElement(content)) {\n    element.append(content);\n  } else if (isNodeList(content) || (isArray(content) && content.every(isNode))) {\n    element.append(...[...content]);\n  }\n};\nexport default setHtml;\n"],"names":["setHtml","element","content","sanitizeFn","isHTMLElement","isString","dirty","isFunction","tempDocument","isNodeList","isArray","isNode"],"mappings":"sDAWMA,EAAU,CAACC,EAAeC,EAAiCC,IAAuC,CAElG,GAAA,GAACC,IAAcH,CAAO,GAAMI,IAASH,CAAO,GAAK,CAACA,EAAQ,QAG1D,GAAAG,EAAAA,EAASH,CAAO,EAAG,CACjB,IAAAI,EAAQJ,EAAQ,OAChBK,EAAAA,GAAWJ,CAAU,IAAGG,EAAQH,EAAWG,CAAK,GAIpD,MAAME,EADY,IAAI,YACS,gBAAgBF,EAAO,WAAW,EACjEL,EAAQ,OAAW,GAAGO,EAAa,KAAK,UAAW,CAAA,MAC1CJ,EAAAA,EAAcF,CAAO,EAC9BD,EAAQ,OAAOC,CAAO,GACbO,EAAAA,GAAWP,CAAO,GAAMQ,EAAA,GAAQR,CAAO,GAAKA,EAAQ,MAAMS,EAAAA,CAAM,IACzEV,EAAQ,OAAW,GAAGC,CAAQ,CAElC"}