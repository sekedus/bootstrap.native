{"version":3,"file":"base-component-DBcDoOjV.js","sources":["../../src/version.ts","../../src/components/base-component.ts"],"sourcesContent":["import { version } from '../package.json';\n\nconst Version = version;\n\nexport default Version;\n","/* Native JavaScript for Bootstrap 5 | Base Component\n----------------------------------------------------- */\nimport { Data, isHTMLElement, isString, normalizeOptions, ObjectKeys, querySelector } from '@thednp/shorty';\n\nimport type { BaseOptions } from '../interface/baseComponent';\nimport Version from '../version';\n\n/** Returns a new `BaseComponent` instance. */\nexport default class BaseComponent {\n  declare element: HTMLElement;\n  declare options?: BaseOptions;\n\n  /**\n   * @param target `HTMLElement` or selector string\n   * @param config component instance options\n   */\n  constructor(target: HTMLElement | string, config?: BaseOptions) {\n    let element: HTMLElement | null;\n\n    try {\n      if (isHTMLElement(target)) {\n        element = target;\n      } else if (isString(target)) {\n        element = querySelector<HTMLElement>(target);\n        // istanbul ignore else @preserve\n        if (!element) throw Error(`\"${target}\" is not a valid selector.`);\n      } else {\n        throw Error(`your target is not an instance of HTMLElement.`);\n      }\n    } catch (e) {\n      throw Error(`${this.name} Error: ${(e as Error).message}`);\n    }\n\n    const prevInstance = Data.get<typeof this>(element, this.name);\n    // istanbul ignore else @preserve\n    if (prevInstance) {\n      // remove previously attached event listeners\n      // to avoid memory leaks\n      prevInstance._toggleEventListeners();\n    }\n\n    this.element = element;\n    this.options =\n      this.defaults && ObjectKeys(this.defaults).length\n        ? normalizeOptions(element, this.defaults, config || {}, 'bs')\n        : // istanbul ignore next @preserve\n          {};\n\n    Data.set(element, this.name, this);\n  }\n\n  // istanbul ignore next @preserve\n  get version() {\n    return Version;\n  }\n\n  // istanbul ignore next @preserve\n  get name() {\n    return 'BaseComponent';\n  }\n\n  // istanbul ignore next @preserve\n  get defaults() {\n    return {};\n  }\n\n  /** just to have something to extend from */\n  // istanbul ignore next @preserve coverage wise this isn't important\n  _toggleEventListeners = () => {\n    // do something to please linters\n  };\n\n  /** Removes component from target element. */\n  dispose() {\n    Data.remove<typeof this>(this.element, this.name);\n    ObjectKeys(this).forEach(prop => {\n      delete this[prop];\n    });\n  }\n}\n"],"names":["Version","version","BaseComponent","target","config","__publicField","element","isHTMLElement","isString","querySelector","e","prevInstance","Data","ObjectKeys","normalizeOptions","prop"],"mappings":"8NAEMA,EAAUC,ECMhB,MAAqBC,CAAc,CAQjC,YAAYC,EAA8BC,EAAsB,CAoDhEC,EAAA,6BAAwB,IAAM,CAAA,GAnDxB,IAAAC,EAEA,GAAA,CACE,GAAAC,EAAAA,cAAcJ,CAAM,EACZG,EAAAH,UACDK,EAAAA,SAASL,CAAM,EAAG,CAC3BG,EAAUG,EAAAA,cAA2BN,CAAM,EAAA;AAE3C,GAAI,CAACG,EAAS,MAAM,MAAM,IAAIH,CAAM,4BAA4B,CAAA,KAEhE,OAAM,MAAM,gDAAgD,QAEvDO,EAAG,CACV,MAAM,MAAM,GAAG,KAAK,IAAI,WAAYA,EAAY,OAAO,EAAE,CAC3D,CAEA,MAAMC,EAAeC,EAAAA,KAAK,IAAiBN,EAAS,KAAK,IAAI,EAAA;AAEzDK,GAGFA,EAAa,sBAAsB,EAGrC,KAAK,QAAUL,EACf,KAAK,QACH,KAAK,UAAYO,EAAA,WAAW,KAAK,QAAQ,EAAE,OACvCC,EAAA,iBAAiBR,EAAS,KAAK,SAAUF,GAAU,GAAI,IAAI,EAE3D,CAAC,EAEPQ,EAAA,KAAK,IAAIN,EAAS,KAAK,KAAM,IAAI,CACnC,CAGA,IAAI,SAAU,CACL,OAAAN,CACT,CAGA,IAAI,MAAO,CACF,MAAA,eACT,CAGA,IAAI,UAAW,CACb,MAAO,EACT,CASA,SAAU,CACRY,EAAA,KAAK,OAAoB,KAAK,QAAS,KAAK,IAAI,EACrCC,EAAAA,WAAA,IAAI,EAAE,QAAgBE,GAAA,CAC/B,OAAO,KAAKA,CAAI,CAAA,CACjB,CACH,CACF"}