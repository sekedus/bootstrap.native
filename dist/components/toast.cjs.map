{"version":3,"file":"toast.cjs","sources":["../../src/strings/toastString.ts","../../src/strings/toastComponent.ts","../../src/components/toast.ts"],"sourcesContent":["/** @type {string} */\nconst toastString = \"toast\";\nexport default toastString;\n","/** @type {string} */\nconst toastComponent = \"Toast\";\nexport default toastComponent;\n","/* Native JavaScript for Bootstrap 5 | Toast\n-------------------------------------------- */\nimport {\n  addClass,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focusinEvent,\n  focusoutEvent,\n  getDocument,\n  getInstance,\n  hasClass,\n  mouseclickEvent,\n  mouseenterEvent,\n  mouseleaveEvent,\n  querySelector,\n  querySelectorAll,\n  reflow,\n  removeClass,\n  Timer,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport dataBsDismiss from \"../strings/dataBsDismiss\";\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport toastString from \"../strings/toastString\";\nimport toastComponent from \"../strings/toastComponent\";\nimport getTargetElement from \"../util/getTargetElement\";\nimport BaseComponent from \"./base-component\";\nimport { ToastEvent, ToastOptions } from \"../interface/toast\";\n\n// TOAST PRIVATE GC\n// ================\nconst toastSelector = `.${toastString}`;\nconst toastDismissSelector = `[${dataBsDismiss}=\"${toastString}\"]`;\nconst toastToggleSelector = `[${dataBsToggle}=\"${toastString}\"]`;\nconst showingClass = \"showing\";\n/** @deprecated */\nconst hideClass = \"hide\";\n\nconst toastDefaults = {\n  animation: true,\n  autohide: true,\n  delay: 5000,\n};\n\n/**\n * Static method which returns an existing `Toast` instance associated\n * to a target `Element`.\n */\nconst getToastInstance = (element: HTMLElement) =>\n  getInstance<Toast>(element, toastComponent);\n\n/**\n * A `Toast` initialization callback.\n */\nconst toastInitCallback = (element: HTMLElement) => new Toast(element);\n\n// TOAST CUSTOM EVENTS\n// ===================\nconst showToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `show.bs.${toastString}`,\n);\nconst shownToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `shown.bs.${toastString}`,\n);\nconst hideToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `hide.bs.${toastString}`,\n);\nconst hiddenToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `hidden.bs.${toastString}`,\n);\n\n// TOAST PRIVATE METHODS\n// =====================\n/**\n * Executes after the toast is shown to the user.\n *\n * @param self the `Toast` instance\n */\nconst showToastComplete = (self: Toast) => {\n  const { element, options } = self;\n  removeClass(element, showingClass);\n  Timer.clear(element, showingClass);\n\n  dispatchEvent(element, shownToastEvent);\n  // istanbul ignore else @preserve\n  if (options.autohide) {\n    Timer.set(element, () => self.hide(), options.delay, toastString);\n  }\n};\n\n/**\n * Executes after the toast is hidden to the user.\n *\n * @param self the `Toast` instance\n */\nconst hideToastComplete = (self: Toast) => {\n  const { element } = self;\n  removeClass(element, showingClass);\n  removeClass(element, showClass);\n  addClass(element, hideClass); // B/C\n  Timer.clear(element, toastString);\n  dispatchEvent(element, hiddenToastEvent);\n};\n\n/**\n * Executes before hiding the toast.\n *\n * @param self the `Toast` instance\n */\nconst hideToast = (self: Toast) => {\n  const { element, options } = self;\n  addClass(element, showingClass);\n\n  if (options.animation) {\n    reflow(element);\n    emulateTransitionEnd(element, () => hideToastComplete(self));\n  } else {\n    hideToastComplete(self);\n  }\n};\n\n/**\n * Executes before showing the toast.\n *\n * @param self the `Toast` instance\n */\nconst showToast = (self: Toast) => {\n  const { element, options } = self;\n  Timer.set(\n    element,\n    () => {\n      removeClass(element, hideClass); // B/C\n      reflow(element);\n      addClass(element, showClass);\n      addClass(element, showingClass);\n\n      if (options.animation) {\n        emulateTransitionEnd(element, () => showToastComplete(self));\n      } else {\n        showToastComplete(self);\n      }\n    },\n    17,\n    showingClass,\n  );\n};\n\n// TOAST EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for toast.\n *\n * @param e the `Event` object\n */\nconst toastClickHandler = (e: Event) => {\n  const { target } = e;\n\n  const trigger = target && closest(target as HTMLElement, toastToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getToastInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    // istanbul ignore else @preserve\n    if (trigger && trigger.tagName === \"A\") e.preventDefault();\n    self.relatedTarget = trigger;\n    self.show();\n  }\n};\n\n/**\n * Executes when user interacts with the toast without closing it,\n * usually by hovering or focusing it.\n *\n * @param e the `Toast` instance\n */\nconst interactiveToastHandler = (e: MouseEvent) => {\n  const element = e.target as HTMLElement;\n  const self = getToastInstance(element);\n  const { type, relatedTarget } = e;\n\n  // istanbul ignore else @preserve: a solid filter is required\n  if (\n    self && element !== relatedTarget &&\n    !element.contains(relatedTarget as Node)\n  ) {\n    if ([mouseenterEvent, focusinEvent].includes(type)) {\n      Timer.clear(element, toastString);\n    } else {\n      Timer.set(element, () => self.hide(), self.options.delay, toastString);\n    }\n  }\n};\n\n// TOAST DEFINITION\n// ================\n/** Creates a new `Toast` instance. */\nexport default class Toast extends BaseComponent {\n  static selector = toastSelector;\n  static init = toastInitCallback;\n  static getInstance = getToastInstance;\n  declare options: ToastOptions;\n  declare dismiss: HTMLElement | null;\n  declare triggers: HTMLElement[];\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target the target `.toast` element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ToastOptions>) {\n    super(target, config);\n    const { element, options } = this;\n\n    // set fadeClass, the options.animation will override the markup\n    if (options.animation && !hasClass(element, fadeClass)) {\n      addClass(element, fadeClass);\n    } else if (!options.animation && hasClass(element, fadeClass)) {\n      removeClass(element, fadeClass);\n    }\n\n    // dismiss button\n    this.dismiss = querySelector(toastDismissSelector, element);\n\n    // toast can have multiple triggering elements\n    this.triggers = [\n      ...querySelectorAll(toastToggleSelector, getDocument(element)),\n    ].filter(\n      (btn) => getTargetElement(btn) === element,\n    );\n\n    // add event listener\n    this._toggleEventListeners(true);\n  }\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return toastComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return toastDefaults;\n  }\n  /**\n   * Returns *true* when toast is visible.\n   */\n  get isShown() {\n    return hasClass(this.element, showClass);\n  }\n\n  // TOAST PUBLIC METHODS\n  // ====================\n  /** Shows the toast. */\n  show = () => {\n    const { element, isShown } = this;\n\n    // istanbul ignore else @preserve\n    if (element && !isShown) {\n      dispatchEvent(element, showToastEvent);\n      if (!showToastEvent.defaultPrevented) {\n        showToast(this);\n      }\n    }\n  };\n\n  /** Hides the toast. */\n  hide = () => {\n    const { element, isShown } = this;\n\n    // istanbul ignore else @preserve\n    if (element && isShown) {\n      dispatchEvent(element, hideToastEvent);\n      if (!hideToastEvent.defaultPrevented) {\n        hideToast(this);\n      }\n    }\n  };\n\n  /**\n   * Toggles on/off the `click` event listener.\n   *\n   * @param add when `true`, it will add the listener\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { element, triggers, dismiss, options, hide } = this;\n\n    // istanbul ignore else @preserve\n    if (dismiss) {\n      action(dismiss, mouseclickEvent, hide);\n    }\n\n    // istanbul ignore else @preserve\n    if (options.autohide) {\n      [focusinEvent, focusoutEvent, mouseenterEvent, mouseleaveEvent].forEach(\n        (e) => action(element, e, interactiveToastHandler),\n      );\n    }\n    // istanbul ignore else @preserve\n    if (triggers.length) {\n      triggers.forEach((btn) =>\n        action(btn, mouseclickEvent, toastClickHandler)\n      );\n    }\n  };\n\n  /** Removes the `Toast` component from the target element. */\n  dispose() {\n    const { element, isShown } = this;\n    this._toggleEventListeners();\n    Timer.clear(element, toastString);\n\n    if (isShown) {\n      removeClass(element, showClass);\n    }\n    super.dispose();\n  }\n}\n"],"names":["toastString","toastComponent","toastSelector","toastDismissSelector","dataBsDismiss","toastToggleSelector","dataBsToggle","showingClass","hideClass","toastDefaults","getToastInstance","element","getInstance","toastInitCallback","Toast","showToastEvent","createCustomEvent","shownToastEvent","hideToastEvent","hiddenToastEvent","showToastComplete","self","options","removeClass","Timer","dispatchEvent","hideToastComplete","showClass","addClass","hideToast","reflow","emulateTransitionEnd","showToast","toastClickHandler","e","target","trigger","closest","getTargetElement","interactiveToastHandler","type","relatedTarget","mouseenterEvent","focusinEvent","BaseComponent","config","__publicField","isShown","add","action","addListener","removeListener","triggers","dismiss","hide","mouseclickEvent","focusoutEvent","mouseleaveEvent","btn","hasClass","fadeClass","querySelector","querySelectorAll","getDocument"],"mappings":"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"}