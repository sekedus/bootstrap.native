{"version":3,"file":"toast.cjs","sources":["../../src/strings/toastString.ts","../../src/strings/toastComponent.ts","../../src/components/toast.ts"],"sourcesContent":["/** @type {string} */\nconst toastString = 'toast';\nexport default toastString;\n","/** @type {string} */\nconst toastComponent = 'Toast';\nexport default toastComponent;\n","/* Native JavaScript for Bootstrap 5 | Toast\n-------------------------------------------- */\nimport {\n  mouseclickEvent,\n  closest,\n  removeClass,\n  hasClass,\n  addClass,\n  focusoutEvent,\n  focusinEvent,\n  mouseleaveEvent,\n  mouseenterEvent,\n  createCustomEvent,\n  getDocument,\n  Timer,\n  getInstance,\n  reflow,\n  // ObjectAssign,\n  emulateTransitionEnd,\n  dispatchEvent,\n  querySelectorAll,\n  querySelector,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport dataBsDismiss from '../strings/dataBsDismiss';\nimport dataBsToggle from '../strings/dataBsToggle';\nimport toastString from '../strings/toastString';\nimport toastComponent from '../strings/toastComponent';\nimport getTargetElement from '../util/getTargetElement';\nimport BaseComponent from './base-component';\nimport { ToastOptions, ToastEvent } from '../interface/toast';\n\n// TOAST PRIVATE GC\n// ================\nconst toastSelector = `.${toastString}`;\nconst toastDismissSelector = `[${dataBsDismiss}=\"${toastString}\"]`;\nconst toastToggleSelector = `[${dataBsToggle}=\"${toastString}\"]`;\nconst showingClass = 'showing';\n/** @deprecated */\nconst hideClass = 'hide';\n\nconst toastDefaults = {\n  animation: true,\n  autohide: true,\n  delay: 5000,\n};\n\n/**\n * Static method which returns an existing `Toast` instance associated\n * to a target `Element`.\n */\nconst getToastInstance = (element: HTMLElement) => getInstance<Toast>(element, toastComponent);\n\n/**\n * A `Toast` initialization callback.\n */\nconst toastInitCallback = (element: HTMLElement) => new Toast(element);\n\n// TOAST CUSTOM EVENTS\n// ===================\nconst showToastEvent = createCustomEvent<ToastEvent>(`show.bs.${toastString}`);\nconst shownToastEvent = createCustomEvent<ToastEvent>(`shown.bs.${toastString}`);\nconst hideToastEvent = createCustomEvent<ToastEvent>(`hide.bs.${toastString}`);\nconst hiddenToastEvent = createCustomEvent<ToastEvent>(`hidden.bs.${toastString}`);\n\n// TOAST PRIVATE METHODS\n// =====================\n/**\n * Executes after the toast is shown to the user.\n *\n * @param self the `Toast` instance\n */\nconst showToastComplete = (self: Toast) => {\n  const { element, options } = self;\n  removeClass(element, showingClass);\n  Timer.clear(element, showingClass);\n\n  dispatchEvent(element, shownToastEvent);\n  /* istanbul ignore else */\n  if (options.autohide) {\n    Timer.set(element, () => self.hide(), options.delay, toastString);\n  }\n};\n\n/**\n * Executes after the toast is hidden to the user.\n *\n * @param self the `Toast` instance\n */\nconst hideToastComplete = (self: Toast) => {\n  const { element } = self;\n  removeClass(element, showingClass);\n  removeClass(element, showClass);\n  addClass(element, hideClass); // B/C\n  Timer.clear(element, toastString);\n  dispatchEvent(element, hiddenToastEvent);\n};\n\n/**\n * Executes before hiding the toast.\n *\n * @param self the `Toast` instance\n */\nconst hideToast = (self: Toast) => {\n  const { element, options } = self;\n  addClass(element, showingClass);\n\n  if (options.animation) {\n    reflow(element);\n    emulateTransitionEnd(element, () => hideToastComplete(self));\n  } else {\n    hideToastComplete(self);\n  }\n};\n\n/**\n * Executes before showing the toast.\n *\n * @param self the `Toast` instance\n */\nconst showToast = (self: Toast) => {\n  const { element, options } = self;\n  Timer.set(\n    element,\n    () => {\n      removeClass(element, hideClass); // B/C\n      reflow(element);\n      addClass(element, showClass);\n      addClass(element, showingClass);\n\n      if (options.animation) {\n        emulateTransitionEnd(element, () => showToastComplete(self));\n      } else {\n        showToastComplete(self);\n      }\n    },\n    17,\n    showingClass,\n  );\n};\n\n/**\n * Toggles on/off the `click` event listener.\n *\n * @param self the `Toast` instance\n * @param add when `true`, it will add the listener\n */\nconst toggleToastHandlers = (self: Toast, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element, triggers, dismiss, options } = self;\n\n  /* istanbul ignore else */\n  if (dismiss) {\n    action(dismiss, mouseclickEvent, self.hide);\n  }\n\n  /* istanbul ignore else */\n  if (options.autohide) {\n    [focusinEvent, focusoutEvent, mouseenterEvent, mouseleaveEvent].forEach(e =>\n      action(element, e, interactiveToastHandler as EventListener),\n    );\n  }\n  /* istanbul ignore else */\n  if (triggers.length) {\n    triggers.forEach(btn => action(btn, mouseclickEvent, toastClickHandler));\n  }\n};\n\n// TOAST EVENT HANDLERS\n// ====================\n/**\n * Executes after the instance has been disposed.\n *\n * @param {Toast} self the `Toast` instance\n */\nconst completeDisposeToast = (self: Toast) => {\n  Timer.clear(self.element, toastString);\n  toggleToastHandlers(self);\n};\n\n/**\n * Handles the `click` event listener for toast.\n *\n * @param e the `Event` object\n */\nconst toastClickHandler = (e: Event) => {\n  const { target } = e;\n\n  const trigger = target && closest(target as HTMLElement, toastToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getToastInstance(element);\n  if (!self) return;\n\n  /* istanbul ignore else */\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n  self.relatedTarget = trigger;\n  self.show();\n};\n\n/**\n * Executes when user interacts with the toast without closing it,\n * usually by hovering or focusing it.\n *\n * @param e the `Toast` instance\n */\nconst interactiveToastHandler = (e: MouseEvent) => {\n  const element = e.target as HTMLElement;\n  const self = getToastInstance(element);\n  const { type, relatedTarget } = e;\n\n  /* istanbul ignore next: a solid filter is required */\n  if (!self || element === relatedTarget || element.contains(relatedTarget as Node)) return;\n\n  if ([mouseenterEvent, focusinEvent].includes(type)) {\n    Timer.clear(element, toastString);\n  } else {\n    Timer.set(element, () => self.hide(), self.options.delay, toastString);\n  }\n};\n\n// TOAST DEFINITION\n// ================\n/** Creates a new `Toast` instance. */\nexport default class Toast extends BaseComponent {\n  static selector = toastSelector;\n  static init = toastInitCallback;\n  static getInstance = getToastInstance;\n  declare options: ToastOptions;\n  declare dismiss: HTMLElement | null;\n  declare triggers: HTMLElement[];\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target the target `.toast` element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ToastOptions>) {\n    super(target, config);\n    const { element, options } = this;\n\n    // set fadeClass, the options.animation will override the markup\n    if (options.animation && !hasClass(element, fadeClass)) addClass(element, fadeClass);\n    else if (!options.animation && hasClass(element, fadeClass)) removeClass(element, fadeClass);\n\n    // dismiss button\n    this.dismiss = querySelector(toastDismissSelector, element);\n\n    // toast can have multiple triggering elements\n    this.triggers = [...querySelectorAll(toastToggleSelector, getDocument(element))].filter(\n      btn => getTargetElement(btn) === element,\n    );\n\n    // bind\n    this.show = this.show.bind(this);\n    this.hide = this.hide.bind(this);\n\n    // add event listener\n    toggleToastHandlers(this, true);\n  }\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return toastComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return toastDefaults;\n  }\n  /**\n   * Returns *true* when toast is visible.\n   */\n  get isShown() {\n    return hasClass(this.element, showClass);\n  }\n\n  // TOAST PUBLIC METHODS\n  // ====================\n  /** Shows the toast. */\n  show() {\n    const { element, isShown } = this;\n\n    /* istanbul ignore else */\n    if (element && !isShown) {\n      dispatchEvent(element, showToastEvent);\n      if (showToastEvent.defaultPrevented) return;\n\n      showToast(this);\n    }\n  }\n\n  /** Hides the toast. */\n  hide() {\n    const { element, isShown } = this;\n\n    /* istanbul ignore else */\n    if (element && isShown) {\n      dispatchEvent(element, hideToastEvent);\n      if (hideToastEvent.defaultPrevented) return;\n      hideToast(this);\n    }\n  }\n\n  /** Removes the `Toast` component from the target element. */\n  dispose() {\n    const { element, isShown } = this;\n\n    /* istanbul ignore else */\n    if (isShown) {\n      removeClass(element, showClass);\n    }\n\n    completeDisposeToast(this);\n\n    super.dispose();\n  }\n}\n"],"names":["toastString","toastComponent","toastSelector","toastDismissSelector","dataBsDismiss","toastToggleSelector","dataBsToggle","showingClass","hideClass","toastDefaults","getToastInstance","element","getInstance","toastInitCallback","Toast","showToastEvent","createCustomEvent","shownToastEvent","hideToastEvent","hiddenToastEvent","showToastComplete","self","options","removeClass","Timer","dispatchEvent","hideToastComplete","showClass","addClass","hideToast","reflow","emulateTransitionEnd","showToast","toggleToastHandlers","add","action","addListener","removeListener","triggers","dismiss","mouseclickEvent","focusinEvent","focusoutEvent","mouseenterEvent","mouseleaveEvent","e","interactiveToastHandler","btn","toastClickHandler","completeDisposeToast","target","trigger","closest","getTargetElement","type","relatedTarget","BaseComponent","config","hasClass","fadeClass","querySelector","querySelectorAll","getDocument","isShown"],"mappings":"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"}