{"version":3,"file":"modal.cjs","sources":["../../src/components/modal.ts"],"sourcesContent":["/* Native JavaScript for Bootstrap 5 | Modal\n-------------------------------------------- */\nimport {\n  addClass,\n  ariaHidden,\n  ariaModal,\n  closest,\n  createCustomEvent,\n  CSS4Declaration,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focus,\n  getDocument,\n  getDocumentBody,\n  getDocumentElement,\n  getElementTransitionDuration,\n  getInstance,\n  hasClass,\n  isRTL,\n  KeyboardEvent,\n  keydownEvent,\n  keyEscape,\n  mouseclickEvent,\n  MouseEvent,\n  querySelector,\n  querySelectorAll,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n  setElementStyle,\n  Timer,\n  toggleFocusTrap,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport dataBsDismiss from \"../strings/dataBsDismiss\";\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport modalString from \"../strings/modalString\";\nimport modalComponent from \"../strings/modalComponent\";\nimport offcanvasComponent from \"../strings/offcanvasComponent\";\nimport getTargetElement from \"../util/getTargetElement\";\nimport { measureScrollbar, setScrollbar } from \"../util/scrollbar\";\nimport {\n  appendOverlay,\n  getCurrentOpen,\n  hideOverlay,\n  modalActiveSelector,\n  overlay,\n  removeOverlay,\n  showOverlay,\n  toggleOverlayType,\n} from \"../util/backdrop\";\nimport isVisible from \"../util/isVisible\";\nimport BaseComponent from \"./base-component\";\nimport { ModalEvent, ModalOptions } from \"../interface/modal\";\nimport { hasPopup } from \"../util/popupContainer\";\n\n// MODAL PRIVATE GC\n// ================\nconst modalSelector = `.${modalString}`;\nconst modalToggleSelector = `[${dataBsToggle}=\"${modalString}\"]`;\nconst modalDismissSelector = `[${dataBsDismiss}=\"${modalString}\"]`;\nconst modalStaticClass = `${modalString}-static`;\n\nconst modalDefaults = {\n  backdrop: true,\n  keyboard: true,\n};\n\ntype ModalEventProps = {\n  relatedTarget: HTMLElement | undefined;\n};\n\n/**\n * Static method which returns an existing `Modal` instance associated\n * to a target `Element`.\n */\nconst getModalInstance = (element: HTMLElement) =>\n  getInstance<Modal>(element, modalComponent);\n\n/**\n * A `Modal` initialization callback.\n */\nconst modalInitCallback = (element: HTMLElement) => new Modal(element);\n\n// MODAL CUSTOM EVENTS\n// ===================\nconst showModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `show.bs.${modalString}`,\n);\nconst shownModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `shown.bs.${modalString}`,\n);\nconst hideModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `hide.bs.${modalString}`,\n);\nconst hiddenModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `hidden.bs.${modalString}`,\n);\n\n// MODAL PRIVATE METHODS\n// =====================\n/**\n * Applies special style for the `<body>` and fixed elements\n * when a modal instance is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst setModalScrollbar = (self: Modal) => {\n  const { element } = self;\n  const scrollbarWidth = measureScrollbar(element);\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  const { clientHeight: modalHeight, scrollHeight: modalScrollHeight } =\n    element;\n  const modalOverflow = modalHeight !== modalScrollHeight;\n\n  // istanbul ignore next @preserve: impossible to test?\n  if (!modalOverflow && scrollbarWidth) {\n    const pad = !isRTL(element)\n      ? \"paddingRight\"\n      // istanbul ignore next @preserve\n      : \"paddingLeft\";\n    const padStyle = { [pad]: `${scrollbarWidth}px` } as Partial<\n      CSS4Declaration\n    >;\n    setElementStyle(element, padStyle);\n  }\n  setScrollbar(element, modalOverflow || clientHeight !== scrollHeight);\n};\n\n/**\n * Toggles on/off the listeners of events that close the modal.\n *\n * @param self the `Modal` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleModalDismiss = (self: Modal, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n  action(element, mouseclickEvent, modalDismissHandler);\n  action(getDocument(element), keydownEvent, modalKeyHandler);\n\n  if (add) self._observer.observe(element);\n  else self._observer.disconnect();\n};\n\n/**\n * Executes after a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalHide = (self: Modal) => {\n  const { triggers, element, relatedTarget } = self;\n  removeOverlay(element);\n  setElementStyle(element, { paddingRight: \"\", display: \"\" });\n  toggleModalDismiss(self);\n\n  const focusElement = showModalEvent.relatedTarget || triggers.find(isVisible);\n  // istanbul ignore else @preserve\n  if (focusElement) focus(focusElement as HTMLElement);\n\n  hiddenModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, hiddenModalEvent);\n  toggleFocusTrap(element);\n};\n\n/**\n * Executes after a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalShow = (self: Modal) => {\n  const { element, relatedTarget } = self;\n  focus(element);\n  toggleModalDismiss(self, true);\n\n  shownModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, shownModalEvent);\n  toggleFocusTrap(element);\n};\n\n/**\n * Executes before a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalShow = (self: Modal) => {\n  const { element, hasFade } = self;\n  setElementStyle(element, { display: \"block\" });\n  setModalScrollbar(self);\n  // istanbul ignore else @preserve\n  if (!getCurrentOpen(element)) {\n    setElementStyle(getDocumentBody(element), { overflow: \"hidden\" });\n  }\n\n  addClass(element, showClass);\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, \"true\");\n\n  if (hasFade) emulateTransitionEnd(element, () => afterModalShow(self));\n  else afterModalShow(self);\n};\n\n/**\n * Executes before a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalHide = (self: Modal) => {\n  const { element, options, hasFade } = self;\n\n  // callback can also be the transitionEvent object, we wanna make sure it's not\n  // call is not forced and overlay is visible\n  if (\n    options.backdrop && hasFade && hasClass(overlay, showClass) &&\n    !getCurrentOpen(element)\n  ) {\n    // AND no modal is visible\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => afterModalHide(self));\n  } else {\n    afterModalHide(self);\n  }\n};\n\n// MODAL EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for modal.\n *\n * @param e the `Event` object\n */\nconst modalClickHandler = (e: MouseEvent<HTMLElement>) => {\n  const { target } = e;\n\n  const trigger = target && closest(target, modalToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getModalInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    // istanbul ignore else @preserve\n    if (trigger && trigger.tagName === \"A\") e.preventDefault();\n    self.relatedTarget = trigger;\n    self.toggle();\n  }\n};\n\n/**\n * Handles the `keydown` event listener for modal\n * to hide the modal when user type the `ESC` key.\n *\n * @param e the `Event` object\n */\nconst modalKeyHandler = ({ code, target }: KeyboardEvent<HTMLElement>) => {\n  const element = querySelector(modalActiveSelector, getDocument(target));\n  const self = element && getModalInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    const { options } = self;\n    // istanbul ignore else @preserve\n    if (\n      options.keyboard &&\n      code === keyEscape && // the keyboard option is enabled and the key is 27\n      hasClass(element, showClass)\n    ) {\n      // the modal is not visible\n      self.relatedTarget = null;\n      self.hide();\n    }\n  }\n};\n\n/**\n * Handles the `click` event listeners that hide the modal.\n *\n * @param e the `Event` object\n */\nconst modalDismissHandler = (e: MouseEvent<HTMLElement>) => {\n  const { currentTarget } = e;\n  const self = currentTarget && getModalInstance(currentTarget);\n\n  // this timer is needed\n  // istanbul ignore else @preserve\n  if (self && currentTarget && !Timer.get(currentTarget)) {\n    const { options, isStatic, modalDialog } = self;\n    const { backdrop } = options;\n    const { target } = e;\n\n    const selectedText = getDocument(currentTarget)?.getSelection()?.toString()\n      .length;\n    const targetInsideDialog = modalDialog.contains(target);\n    const dismiss = target && closest(target, modalDismissSelector);\n\n    // istanbul ignore else @preserve\n    if (isStatic && !targetInsideDialog) {\n      Timer.set(\n        currentTarget,\n        () => {\n          addClass(currentTarget, modalStaticClass);\n          emulateTransitionEnd(modalDialog, () => staticTransitionEnd(self));\n        },\n        17,\n      );\n    } else if (\n      dismiss || (!selectedText && !isStatic && !targetInsideDialog && backdrop)\n    ) {\n      self.relatedTarget = dismiss || null;\n      self.hide();\n      e.preventDefault();\n    }\n  }\n};\n\n/**\n * Handles the `transitionend` event listeners for `Modal`.\n *\n * @param self the `Modal` instance\n */\nconst staticTransitionEnd = (self: Modal) => {\n  const { element, modalDialog } = self;\n  const duration = (getElementTransitionDuration(modalDialog) || 0) + 17;\n  removeClass(element, modalStaticClass);\n  // user must wait for zoom out transition\n  Timer.set(element, () => Timer.clear(element), duration);\n};\n\n// MODAL DEFINITION\n// ================\n/** Returns a new `Modal` instance. */\nexport default class Modal extends BaseComponent {\n  static selector = modalSelector;\n  static init = modalInitCallback;\n  static getInstance = getModalInstance;\n  declare options: ModalOptions;\n  declare modalDialog: HTMLElement;\n  declare triggers: HTMLElement[];\n  declare isStatic: boolean;\n  declare hasFade: boolean;\n  declare relatedTarget: HTMLElement | null;\n  declare _observer: ResizeObserver;\n\n  /**\n   * @param target usually the `.modal` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ModalOptions>) {\n    super(target, config);\n\n    // the modal\n    const { element } = this;\n\n    // the modal-dialog\n    const modalDialog = querySelector(`.${modalString}-dialog`, element);\n\n    // istanbul ignore else @preserve\n    if (modalDialog) {\n      this.modalDialog = modalDialog;\n      // modal can have multiple triggering elements\n      this.triggers = [\n        ...querySelectorAll(modalToggleSelector, getDocument(element)),\n      ].filter(\n        (btn) => getTargetElement(btn) === element,\n      );\n\n      // additional internals\n      this.isStatic = this.options.backdrop === \"static\";\n      this.hasFade = hasClass(element, fadeClass);\n      this.relatedTarget = null;\n      this._observer = new ResizeObserver(() => this.update());\n\n      // attach event listeners\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return modalComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return modalDefaults;\n  }\n\n  // MODAL PUBLIC METHODS\n  // ====================\n  /** Toggles the visibility of the modal. */\n  toggle() {\n    if (hasClass(this.element, showClass)) this.hide();\n    else this.show();\n  }\n\n  /** Shows the modal to the user. */\n  show() {\n    const { element, options, hasFade, relatedTarget } = this;\n    const { backdrop } = options;\n    let overlayDelay = 0;\n\n    // istanbul ignore else @preserve\n    if (!hasClass(element, showClass)) {\n      showModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, showModalEvent);\n      if (!showModalEvent.defaultPrevented) {\n        // we elegantly hide any opened modal/offcanvas\n        const currentOpen = getCurrentOpen(element);\n\n        // istanbul ignore else @preserve\n        if (currentOpen && currentOpen !== element) {\n          const that = getModalInstance(currentOpen) ||\n            // istanbul ignore next @preserve\n            getInstance<typeof BaseComponent & { hide: () => void }>(\n              currentOpen,\n              offcanvasComponent,\n            );\n          // istanbul ignore else @preserve\n          if (that) that.hide();\n        }\n        if (backdrop) {\n          if (!hasPopup(overlay)) {\n            appendOverlay(element, hasFade, true);\n          } else {\n            toggleOverlayType(true);\n          }\n\n          overlayDelay = getElementTransitionDuration(overlay);\n          showOverlay();\n\n          setTimeout(() => beforeModalShow(this), overlayDelay);\n        } else {\n          beforeModalShow(this);\n          // istanbul ignore else @preserve\n          if (currentOpen && hasClass(overlay, showClass)) {\n            hideOverlay();\n          }\n        }\n      }\n    }\n  }\n\n  /** Hide the modal from the user. */\n  hide() {\n    const { element, hasFade, relatedTarget } = this;\n\n    // istanbul ignore else @preserve\n    if (hasClass(element, showClass)) {\n      hideModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, hideModalEvent);\n\n      // istanbul ignore else @preserve\n      if (!hideModalEvent.defaultPrevented) {\n        removeClass(element, showClass);\n        setAttribute(element, ariaHidden, \"true\");\n        removeAttribute(element, ariaModal);\n\n        if (hasFade) {\n          emulateTransitionEnd(element, () => beforeModalHide(this));\n        } else {\n          beforeModalHide(this);\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates the modal layout.\n   */\n  update = () => {\n    // istanbul ignore else @preserve\n    if (hasClass(this.element, showClass)) setModalScrollbar(this);\n  };\n\n  /**\n   * Toggles on/off the `click` event listener of the `Modal` instance.\n   *\n   * @param add when `true`, event listener(s) is/are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { triggers } = this;\n\n    // istanbul ignore else @preserve\n    if (triggers.length) {\n      triggers.forEach((btn) =>\n        action(btn, mouseclickEvent, modalClickHandler)\n      );\n    }\n  };\n\n  /** Removes the `Modal` component from target element. */\n  dispose() {\n    const clone = { ...this };\n    const { modalDialog, hasFade } = clone;\n    const callback = () => setTimeout(() => super.dispose(), 17);\n\n    this.hide();\n    this._toggleEventListeners();\n\n    if (hasFade) {\n      // use transitionend callback\n      emulateTransitionEnd(modalDialog, callback);\n    } else {\n      callback();\n    }\n  }\n}\n"],"names":["modalSelector","modalString","modalToggleSelector","dataBsToggle","modalDismissSelector","dataBsDismiss","modalStaticClass","modalDefaults","getModalInstance","element","getInstance","modalComponent","modalInitCallback","Modal","showModalEvent","createCustomEvent","shownModalEvent","hideModalEvent","hiddenModalEvent","setModalScrollbar","self","scrollbarWidth","measureScrollbar","clientHeight","scrollHeight","getDocumentElement","modalHeight","modalScrollHeight","modalOverflow","padStyle","isRTL","setElementStyle","setScrollbar","toggleModalDismiss","add","action","addListener","removeListener","mouseclickEvent","modalDismissHandler","getDocument","keydownEvent","modalKeyHandler","afterModalHide","triggers","relatedTarget","removeOverlay","focusElement","isVisible","dispatchEvent","toggleFocusTrap","afterModalShow","focus","beforeModalShow","hasFade","getCurrentOpen","getDocumentBody","addClass","showClass","removeAttribute","ariaHidden","setAttribute","ariaModal","emulateTransitionEnd","beforeModalHide","options","hasClass","overlay","hideOverlay","modalClickHandler","e","target","trigger","closest","getTargetElement","code","querySelector","modalActiveSelector","keyEscape","currentTarget","Timer","isStatic","modalDialog","backdrop","selectedText","targetInsideDialog","dismiss","staticTransitionEnd","duration","getElementTransitionDuration","removeClass","BaseComponent","config","__publicField","btn","querySelectorAll","fadeClass","overlayDelay","currentOpen","that","offcanvasComponent","hasPopup","toggleOverlayType","appendOverlay","showOverlay","clone","callback"],"mappings":"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"}