{"version":3,"file":"modal.cjs","sources":["../../src/components/modal.ts"],"sourcesContent":["/* Native JavaScript for Bootstrap 5 | Modal\n-------------------------------------------- */\nimport {\n  keyEscape,\n  getElementTransitionDuration,\n  removeAttribute,\n  setAttribute,\n  keydownEvent,\n  mouseclickEvent,\n  resizeEvent,\n  ariaModal,\n  ariaHidden,\n  getInstance,\n  isRTL,\n  removeClass,\n  hasClass,\n  addClass,\n  closest,\n  querySelectorAll,\n  querySelector,\n  getDocumentElement,\n  getDocumentBody,\n  getDocument,\n  getWindow,\n  CSS4Declaration,\n  setElementStyle,\n  createCustomEvent,\n  emulateTransitionEnd,\n  passiveHandler,\n  dispatchEvent,\n  focus,\n  Timer,\n  MouseEvent,\n  KeyboardEvent,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport dataBsToggle from '../strings/dataBsToggle';\nimport dataBsDismiss from '../strings/dataBsDismiss';\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport modalString from '../strings/modalString';\nimport modalComponent from '../strings/modalComponent';\nimport offcanvasComponent from '../strings/offcanvasComponent';\n\nimport getTargetElement from '../util/getTargetElement';\nimport { setScrollbar, measureScrollbar } from '../util/scrollbar';\nimport {\n  overlay,\n  modalActiveSelector,\n  toggleOverlayType,\n  appendOverlay,\n  showOverlay,\n  hideOverlay,\n  getCurrentOpen,\n  removeOverlay,\n} from '../util/backdrop';\nimport isVisible from '../util/isVisible';\nimport BaseComponent from './base-component';\nimport { ModalOptions, ModalEvent } from '../interface/modal';\nimport { hasPopup } from '../util/popupContainer';\n\n// MODAL PRIVATE GC\n// ================\nconst modalSelector = `.${modalString}`;\nconst modalToggleSelector = `[${dataBsToggle}=\"${modalString}\"]`;\nconst modalDismissSelector = `[${dataBsDismiss}=\"${modalString}\"]`;\nconst modalStaticClass = `${modalString}-static`;\n\nconst modalDefaults = {\n  backdrop: true,\n  keyboard: true,\n};\n\n/**\n * Static method which returns an existing `Modal` instance associated\n * to a target `Element`.\n */\nconst getModalInstance = (element: HTMLElement) => getInstance<Modal>(element, modalComponent);\n\n/**\n * A `Modal` initialization callback.\n */\nconst modalInitCallback = (element: HTMLElement) => new Modal(element);\n\n// MODAL CUSTOM EVENTS\n// ===================\nconst showModalEvent = createCustomEvent<ModalEvent>(`show.bs.${modalString}`);\nconst shownModalEvent = createCustomEvent<ModalEvent>(`shown.bs.${modalString}`);\nconst hideModalEvent = createCustomEvent<ModalEvent>(`hide.bs.${modalString}`);\nconst hiddenModalEvent = createCustomEvent<ModalEvent>(`hidden.bs.${modalString}`);\n\n// MODAL PRIVATE METHODS\n// =====================\n/**\n * Applies special style for the `<body>` and fixed elements\n * when a modal instance is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst setModalScrollbar = (self: Modal) => {\n  const { element } = self;\n  const scrollbarWidth = measureScrollbar(element);\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  const { clientHeight: modalHeight, scrollHeight: modalScrollHeight } = element;\n  const modalOverflow = modalHeight !== modalScrollHeight;\n\n  /* istanbul ignore else */\n  if (!modalOverflow && scrollbarWidth) {\n    const pad = !isRTL(element) ? 'paddingRight' : /* istanbul ignore next */ 'paddingLeft';\n    const padStyle = {} as Partial<CSS4Declaration>;\n    padStyle[pad] = `${scrollbarWidth}px`;\n    setElementStyle(element, padStyle);\n  }\n  setScrollbar(element, modalOverflow || clientHeight !== scrollHeight);\n};\n\n/**\n * Toggles on/off the listeners of events that close the modal.\n *\n * @param self the `Modal` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleModalDismiss = (self: Modal, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element, update } = self;\n  action(element, mouseclickEvent, modalDismissHandler);\n  action(getWindow(element), resizeEvent, update, passiveHandler);\n  action(getDocument(element), keydownEvent, modalKeyHandler);\n};\n\n/**\n * Executes after a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalHide = (self: Modal) => {\n  const { triggers, element, relatedTarget } = self;\n  removeOverlay(element);\n  setElementStyle(element, { paddingRight: '', display: '' });\n  toggleModalDismiss(self);\n\n  const focusElement = showModalEvent.relatedTarget || triggers.find(isVisible);\n  /* istanbul ignore else */\n  if (focusElement) focus(focusElement as HTMLElement);\n\n  hiddenModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, hiddenModalEvent);\n};\n\n/**\n * Executes after a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalShow = (self: Modal) => {\n  const { element, relatedTarget } = self;\n  focus(element);\n  toggleModalDismiss(self, true);\n\n  shownModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, shownModalEvent);\n};\n\n/**\n * Executes before a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalShow = (self: Modal) => {\n  const { element, hasFade } = self;\n  setElementStyle(element, { display: 'block' });\n  setModalScrollbar(self);\n  /* istanbul ignore else */\n  if (!getCurrentOpen(element)) {\n    setElementStyle(getDocumentBody(element), { overflow: 'hidden' });\n  }\n\n  addClass(element, showClass);\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, 'true');\n\n  if (hasFade) emulateTransitionEnd(element, () => afterModalShow(self));\n  else afterModalShow(self);\n};\n\n/**\n * Executes before a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalHide = (self: Modal) => {\n  const { element, options, hasFade } = self;\n\n  // callback can also be the transitionEvent object, we wanna make sure it's not\n  // call is not forced and overlay is visible\n  if (options.backdrop && hasFade && hasClass(overlay, showClass) && !getCurrentOpen(element)) {\n    // AND no modal is visible\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => afterModalHide(self));\n  } else {\n    afterModalHide(self);\n  }\n};\n\n// MODAL EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for modal.\n *\n * @param e the `Event` object\n */\nconst modalClickHandler = (e: MouseEvent<HTMLElement>) => {\n  const { target } = e;\n\n  const trigger = target && closest(target, modalToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getModalInstance(element);\n\n  /* istanbul ignore else */\n  if (self) {\n    /* istanbul ignore else */\n    if (trigger && trigger.tagName === 'A') e.preventDefault();\n    self.relatedTarget = trigger;\n    self.toggle();\n  }\n};\n\n/**\n * Handles the `keydown` event listener for modal\n * to hide the modal when user type the `ESC` key.\n *\n * @param e the `Event` object\n */\nconst modalKeyHandler = ({ code, target }: KeyboardEvent<HTMLElement>) => {\n  const element = querySelector(modalActiveSelector, getDocument(target));\n  const self = element && getModalInstance(element);\n\n  /* istanbul ignore else */\n  if (self) {\n    const { options } = self;\n    /* istanbul ignore else */\n    if (\n      options.keyboard &&\n      code === keyEscape && // the keyboard option is enabled and the key is 27\n      hasClass(element, showClass)\n    ) {\n      // the modal is not visible\n      self.relatedTarget = null;\n      self.hide();\n    }\n  }\n};\n\n/**\n * Handles the `click` event listeners that hide the modal.\n *\n * @param e the `Event` object\n */\nconst modalDismissHandler = (e: MouseEvent<HTMLElement>) => {\n  const { currentTarget } = e;\n  const self = currentTarget ? getModalInstance(currentTarget) : null;\n\n  // this timer is needed\n  /* istanbul ignore else: must have a filter */\n  if (self && currentTarget && !Timer.get(currentTarget)) {\n    const { options, isStatic, modalDialog } = self;\n    const { backdrop } = options;\n    const { target } = e;\n\n    const selectedText = getDocument(currentTarget)?.getSelection()?.toString().length;\n    const targetInsideDialog = modalDialog.contains(target);\n    const dismiss = target && closest(target, modalDismissSelector);\n\n    /* istanbul ignore else */\n    if (isStatic && !targetInsideDialog) {\n      Timer.set(\n        currentTarget,\n        () => {\n          addClass(currentTarget, modalStaticClass);\n          emulateTransitionEnd(modalDialog, () => staticTransitionEnd(self));\n        },\n        17,\n      );\n    } else if (dismiss || (!selectedText && !isStatic && !targetInsideDialog && backdrop)) {\n      self.relatedTarget = dismiss || null;\n      self.hide();\n      e.preventDefault();\n    }\n  }\n};\n\n/**\n * Handles the `transitionend` event listeners for `Modal`.\n *\n * @param self the `Modal` instance\n */\nconst staticTransitionEnd = (self: Modal) => {\n  const { element, modalDialog } = self;\n  const duration = (getElementTransitionDuration(modalDialog) || 0) + 17;\n  removeClass(element, modalStaticClass);\n  // user must wait for zoom out transition\n  Timer.set(element, () => Timer.clear(element), duration);\n};\n\n// MODAL DEFINITION\n// ================\n/** Returns a new `Modal` instance. */\nexport default class Modal extends BaseComponent {\n  static selector = modalSelector;\n  static init = modalInitCallback;\n  static getInstance = getModalInstance;\n  declare options: ModalOptions;\n  declare modalDialog: HTMLElement;\n  declare triggers: HTMLElement[];\n  declare isStatic: boolean;\n  declare hasFade: boolean;\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target usually the `.modal` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ModalOptions>) {\n    super(target, config);\n\n    // the modal\n    const { element } = this;\n\n    // the modal-dialog\n    const modalDialog = querySelector(`.${modalString}-dialog`, element);\n\n    /* istanbul ignore else */\n    if (modalDialog) {\n      this.modalDialog = modalDialog;\n      // modal can have multiple triggering elements\n      this.triggers = [...querySelectorAll(modalToggleSelector, getDocument(element))].filter(\n        btn => getTargetElement(btn) === element,\n      );\n\n      // additional internals\n      this.isStatic = this.options.backdrop === 'static';\n      this.hasFade = hasClass(element, fadeClass);\n      this.relatedTarget = null;\n\n      // attach event listeners\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return modalComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return modalDefaults;\n  }\n\n  // MODAL PUBLIC METHODS\n  // ====================\n  /** Toggles the visibility of the modal. */\n  toggle() {\n    if (hasClass(this.element, showClass)) this.hide();\n    else this.show();\n  }\n\n  /** Shows the modal to the user. */\n  show() {\n    const { element, options, hasFade, relatedTarget } = this;\n    const { backdrop } = options;\n    let overlayDelay = 0;\n\n    if (!hasClass(element, showClass)) {\n      showModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, showModalEvent);\n      if (!showModalEvent.defaultPrevented) {\n        // we elegantly hide any opened modal/offcanvas\n        const currentOpen = getCurrentOpen(element);\n\n        if (currentOpen && currentOpen !== element) {\n          const that =\n            getModalInstance(currentOpen) ||\n            /* istanbul ignore next */\n            getInstance<typeof BaseComponent & { hide: () => void }>(currentOpen, offcanvasComponent);\n          if (that) that.hide();\n        }\n        if (backdrop) {\n          if (!hasPopup(overlay)) {\n            appendOverlay(element, hasFade, true);\n          } else {\n            toggleOverlayType(true);\n          }\n\n          overlayDelay = getElementTransitionDuration(overlay);\n          showOverlay();\n\n          setTimeout(() => beforeModalShow(this), overlayDelay);\n        } else {\n          beforeModalShow(this);\n          /* istanbul ignore else */\n          if (currentOpen && hasClass(overlay, showClass)) {\n            hideOverlay();\n          }\n        }\n      }\n    }\n  }\n\n  /** Hide the modal from the user. */\n  hide() {\n    const { element, hasFade, relatedTarget } = this;\n\n    if (hasClass(element, showClass)) {\n      hideModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, hideModalEvent);\n\n      if (!hideModalEvent.defaultPrevented) {\n        removeClass(element, showClass);\n        setAttribute(element, ariaHidden, 'true');\n        removeAttribute(element, ariaModal);\n\n        /* istanbul ignore else */\n        if (hasFade) {\n          emulateTransitionEnd(element, () => beforeModalHide(this));\n        } else {\n          beforeModalHide(this);\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates the modal layout.\n   */\n  update = () => {\n    /* istanbul ignore else */\n    if (hasClass(this.element, showClass)) setModalScrollbar(this);\n  };\n\n  /**\n   * Toggles on/off the `click` event listener of the `Modal` instance.\n   *\n   * @param add when `true`, event listener(s) is/are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { triggers } = this;\n\n    /* istanbul ignore else */\n    if (triggers.length) {\n      triggers.forEach(btn => action(btn, mouseclickEvent, modalClickHandler));\n    }\n  };\n\n  /** Removes the `Modal` component from target element. */\n  dispose() {\n    const clone = { ...this };\n    const { element, modalDialog } = clone;\n    // const callback = () => setTimeout(() => super.dispose(), 17);\n    const callback = () => super.dispose();\n    this._toggleEventListeners();\n\n    this.hide();\n\n    /* istanbul ignore else */\n    if (hasClass(element, 'fade')) {\n      // use transitionend callback\n      emulateTransitionEnd(modalDialog, callback);\n    } else {\n      callback();\n    }\n  }\n}\n"],"names":["modalSelector","modalString","modalToggleSelector","dataBsToggle","modalDismissSelector","dataBsDismiss","modalStaticClass","modalDefaults","getModalInstance","element","getInstance","modalComponent","modalInitCallback","Modal","showModalEvent","createCustomEvent","shownModalEvent","hideModalEvent","hiddenModalEvent","setModalScrollbar","self","scrollbarWidth","measureScrollbar","clientHeight","scrollHeight","getDocumentElement","modalHeight","modalScrollHeight","modalOverflow","pad","isRTL","padStyle","setElementStyle","setScrollbar","toggleModalDismiss","add","action","addListener","removeListener","update","mouseclickEvent","modalDismissHandler","getWindow","resizeEvent","passiveHandler","getDocument","keydownEvent","modalKeyHandler","afterModalHide","triggers","relatedTarget","removeOverlay","focusElement","isVisible","focus","dispatchEvent","afterModalShow","beforeModalShow","hasFade","getCurrentOpen","getDocumentBody","addClass","showClass","removeAttribute","ariaHidden","setAttribute","ariaModal","emulateTransitionEnd","beforeModalHide","options","hasClass","overlay","hideOverlay","modalClickHandler","e","target","trigger","closest","getTargetElement","code","querySelector","modalActiveSelector","keyEscape","currentTarget","Timer","isStatic","modalDialog","backdrop","selectedText","targetInsideDialog","dismiss","staticTransitionEnd","duration","getElementTransitionDuration","removeClass","BaseComponent","config","__publicField","btn","querySelectorAll","fadeClass","overlayDelay","currentOpen","that","offcanvasComponent","hasPopup","toggleOverlayType","appendOverlay","showOverlay","clone","callback"],"mappings":"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"}