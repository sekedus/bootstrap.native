{"version":3,"file":"modal.cjs","sources":["../../src/components/modal.ts"],"sourcesContent":["/* Native JavaScript for Bootstrap 5 | Modal\n-------------------------------------------- */\nimport {\n  keyEscape,\n  getElementTransitionDuration,\n  removeAttribute,\n  setAttribute,\n  keydownEvent,\n  mouseclickEvent,\n  resizeEvent,\n  ariaModal,\n  ariaHidden,\n  getInstance,\n  isHTMLElement,\n  isRTL,\n  isFunction,\n  removeClass,\n  hasClass,\n  addClass,\n  closest,\n  querySelectorAll,\n  querySelector,\n  getDocumentElement,\n  getDocumentBody,\n  getDocument,\n  getWindow,\n  CSS4Declaration,\n  setElementStyle,\n  createCustomEvent,\n  emulateTransitionEnd,\n  passiveHandler,\n  dispatchEvent,\n  focus,\n  Timer,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport dataBsToggle from '../strings/dataBsToggle';\nimport dataBsDismiss from '../strings/dataBsDismiss';\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport modalString from '../strings/modalString';\nimport modalComponent from '../strings/modalComponent';\nimport offcanvasComponent from '../strings/offcanvasComponent';\n\nimport getTargetElement from '../util/getTargetElement';\nimport { setScrollbar, measureScrollbar } from '../util/scrollbar';\nimport {\n  overlay,\n  modalActiveSelector,\n  toggleOverlayType,\n  appendOverlay,\n  showOverlay,\n  hideOverlay,\n  getCurrentOpen,\n  removeOverlay,\n} from '../util/backdrop';\nimport isVisible from '../util/isVisible';\nimport BaseComponent from './base-component';\nimport { ModalOptions, ModalEvent } from '../interface/modal';\nimport { hasPopup } from '../util/popupContainer';\n\n// MODAL PRIVATE GC\n// ================\nconst modalSelector = `.${modalString}`;\nconst modalToggleSelector = `[${dataBsToggle}=\"${modalString}\"]`;\nconst modalDismissSelector = `[${dataBsDismiss}=\"${modalString}\"]`;\nconst modalStaticClass = `${modalString}-static`;\n\nconst modalDefaults = {\n  backdrop: true,\n  keyboard: true,\n};\n\n/**\n * Static method which returns an existing `Modal` instance associated\n * to a target `Element`.\n */\nconst getModalInstance = (element: HTMLElement) => getInstance<Modal>(element, modalComponent);\n\n/**\n * A `Modal` initialization callback.\n */\nconst modalInitCallback = (element: HTMLElement) => new Modal(element);\n\n// MODAL CUSTOM EVENTS\n// ===================\nconst showModalEvent = createCustomEvent<ModalEvent>(`show.bs.${modalString}`);\nconst shownModalEvent = createCustomEvent<ModalEvent>(`shown.bs.${modalString}`);\nconst hideModalEvent = createCustomEvent<ModalEvent>(`hide.bs.${modalString}`);\nconst hiddenModalEvent = createCustomEvent<ModalEvent>(`hidden.bs.${modalString}`);\n\n// MODAL PRIVATE METHODS\n// =====================\n/**\n * Applies special style for the `<body>` and fixed elements\n * when a modal instance is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst setModalScrollbar = (self: Modal) => {\n  const { element } = self;\n  const scrollbarWidth = measureScrollbar(element);\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  const { clientHeight: modalHeight, scrollHeight: modalScrollHeight } = element;\n  const modalOverflow = modalHeight !== modalScrollHeight;\n\n  /* istanbul ignore else */\n  if (!modalOverflow && scrollbarWidth) {\n    const pad = !isRTL(element) ? 'paddingRight' : /* istanbul ignore next */ 'paddingLeft';\n    const padStyle = {} as Partial<CSS4Declaration>;\n    padStyle[pad] = `${scrollbarWidth}px`;\n    setElementStyle(element, padStyle);\n  }\n  setScrollbar(element, modalOverflow || clientHeight !== scrollHeight);\n};\n\n/**\n * Toggles on/off the listeners of events that close the modal.\n *\n * @param self the `Modal` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleModalDismiss = (self: Modal, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n  action(element, mouseclickEvent, modalDismissHandler as EventListener);\n  action(getWindow(element), resizeEvent, self.update, passiveHandler);\n  action(getDocument(element), keydownEvent, modalKeyHandler as EventListener);\n};\n\n/**\n * Toggles on/off the `click` event listener of the `Modal` instance.\n *\n * @param self the `Modal` instance\n * @param add when `true`, event listener is added\n */\nconst toggleModalHandler = (self: Modal, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { triggers } = self;\n\n  /* istanbul ignore else */\n  if (triggers.length) {\n    triggers.forEach(btn => action(btn, mouseclickEvent, modalClickHandler as EventListener));\n  }\n};\n\n/**\n * Executes after a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n * @param callback the `Modal` instance\n */\nconst afterModalHide = (self: Modal, callback?: () => void) => {\n  const { triggers, element, relatedTarget } = self;\n  removeOverlay(element);\n  setElementStyle(element, { paddingRight: '', display: '' });\n  toggleModalDismiss(self);\n\n  const focusElement = showModalEvent.relatedTarget || triggers.find(isVisible);\n  /* istanbul ignore else */\n  if (focusElement) focus(focusElement as HTMLElement);\n\n  /* istanbul ignore else */\n  if (isFunction(callback)) callback();\n\n  hiddenModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, hiddenModalEvent);\n};\n\n/**\n * Executes after a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalShow = (self: Modal) => {\n  const { element, relatedTarget } = self;\n  focus(element);\n  toggleModalDismiss(self, true);\n\n  shownModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, shownModalEvent);\n};\n\n/**\n * Executes before a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalShow = (self: Modal) => {\n  const { element, hasFade } = self;\n  setElementStyle(element, { display: 'block' });\n\n  setModalScrollbar(self);\n  /* istanbul ignore else */\n  if (!getCurrentOpen(element)) {\n    setElementStyle(getDocumentBody(element), { overflow: 'hidden' });\n  }\n\n  addClass(element, showClass);\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, 'true');\n\n  if (hasFade) emulateTransitionEnd(element, () => afterModalShow(self));\n  else afterModalShow(self);\n};\n\n/**\n * Executes before a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n * @param callback when `true` skip animation\n */\nconst beforeModalHide = (self: Modal, callback?: () => void) => {\n  const { element, options, hasFade } = self;\n\n  // callback can also be the transitionEvent object, we wanna make sure it's not\n  // call is not forced and overlay is visible\n  if (options.backdrop && !callback && hasFade && hasClass(overlay, showClass) && !getCurrentOpen(element)) {\n    // AND no modal is visible\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => afterModalHide(self));\n  } else {\n    afterModalHide(self, callback);\n  }\n};\n\n// MODAL EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for modal.\n *\n * @param e the `Event` object\n */\nconst modalClickHandler = (e: MouseEvent) => {\n  const { target } = e;\n\n  const trigger = target && closest(target as HTMLElement, modalToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getModalInstance(element);\n\n  /* istanbul ignore next */\n  if (!self) return;\n\n  /* istanbul ignore else */\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n  self.relatedTarget = trigger;\n  self.toggle();\n};\n\n/**\n * Handles the `keydown` event listener for modal\n * to hide the modal when user type the `ESC` key.\n *\n * @param e the `Event` object\n */\nconst modalKeyHandler = ({ code, target }: KeyboardEvent) => {\n  const element = querySelector(modalActiveSelector, getDocument(target as Node));\n  const self = element && getModalInstance(element);\n\n  /* istanbul ignore next */\n  if (!self) return;\n\n  const { options } = self;\n  /* istanbul ignore else */\n  if (\n    options.keyboard &&\n    code === keyEscape && // the keyboard option is enabled and the key is 27\n    hasClass(element, showClass)\n  ) {\n    // the modal is not visible\n    self.relatedTarget = null;\n    self.hide();\n  }\n};\n\n/**\n * Handles the `click` event listeners that hide the modal.\n *\n * @param e the `Event` object\n */\nfunction modalDismissHandler(this: HTMLElement, e: MouseEvent) {\n  const self = getModalInstance(this);\n\n  // this timer is needed\n  /* istanbul ignore next: must have a filter */\n  if (!self || Timer.get(this)) return;\n\n  const { options, isStatic, modalDialog } = self;\n  const { backdrop } = options;\n  const { target } = e;\n\n  const selectedText = getDocument(this)?.getSelection()?.toString().length;\n  const targetInsideDialog = modalDialog?.contains(target as HTMLElement);\n  const dismiss = target && closest(target as HTMLElement, modalDismissSelector);\n\n  /* istanbul ignore else */\n  if (isStatic && !targetInsideDialog) {\n    Timer.set(\n      this,\n      () => {\n        addClass(this, modalStaticClass);\n        emulateTransitionEnd(modalDialog as HTMLElement, () => staticTransitionEnd(self));\n      },\n      17,\n    );\n  } else if (dismiss || (!selectedText && !isStatic && !targetInsideDialog && backdrop)) {\n    self.relatedTarget = dismiss || null;\n    self.hide();\n    e.preventDefault();\n  }\n}\n\n/**\n * Handles the `transitionend` event listeners for `Modal`.\n *\n * @param self the `Modal` instance\n */\nconst staticTransitionEnd = (self: Modal) => {\n  const { element, modalDialog } = self;\n  const duration = (isHTMLElement(modalDialog) ? getElementTransitionDuration(modalDialog) : 0) + 17;\n  removeClass(element, modalStaticClass);\n  // user must wait for zoom out transition\n  Timer.set(element, () => Timer.clear(element), duration);\n};\n\n// MODAL DEFINITION\n// ================\n/** Returns a new `Modal` instance. */\nexport default class Modal extends BaseComponent {\n  static selector = modalSelector;\n  static init = modalInitCallback;\n  static getInstance = getModalInstance;\n  declare options: ModalOptions;\n  declare modalDialog: HTMLElement | null;\n  declare triggers: HTMLElement[];\n  declare isStatic: boolean;\n  declare hasFade: boolean;\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target usually the `.modal` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ModalOptions>) {\n    super(target, config);\n\n    // the modal\n    const { element } = this;\n\n    // the modal-dialog\n    this.modalDialog = querySelector(`.${modalString}-dialog`, element);\n\n    // modal can have multiple triggering elements\n    this.triggers = [...querySelectorAll(modalToggleSelector, getDocument(element))].filter(\n      btn => getTargetElement(btn) === element,\n    );\n\n    // additional internals\n    this.isStatic = this.options.backdrop === 'static';\n    this.hasFade = hasClass(element, fadeClass);\n    this.relatedTarget = null;\n\n    // attach event listeners\n    toggleModalHandler(this, true);\n\n    // bind\n    this.update = this.update.bind(this);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return modalComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return modalDefaults;\n  }\n\n  // MODAL PUBLIC METHODS\n  // ====================\n  /** Toggles the visibility of the modal. */\n  toggle() {\n    if (hasClass(this.element, showClass)) this.hide();\n    else this.show();\n  }\n\n  /** Shows the modal to the user. */\n  show() {\n    const { element, options, hasFade, relatedTarget } = this;\n    const { backdrop } = options;\n    let overlayDelay = 0;\n\n    if (hasClass(element, showClass)) return;\n\n    showModalEvent.relatedTarget = relatedTarget || undefined;\n    dispatchEvent(element, showModalEvent);\n    if (showModalEvent.defaultPrevented) return;\n\n    // we elegantly hide any opened modal/offcanvas\n    const currentOpen = getCurrentOpen(element);\n\n    if (currentOpen && currentOpen !== element) {\n      const that =\n        getModalInstance(currentOpen) ||\n        /* istanbul ignore next */\n        getInstance<typeof BaseComponent & { hide: () => void }>(currentOpen, offcanvasComponent);\n      if (that) that.hide();\n    }\n    if (backdrop) {\n      if (!hasPopup(overlay)) {\n        appendOverlay(element, hasFade, true);\n      } else {\n        toggleOverlayType(true);\n      }\n\n      overlayDelay = getElementTransitionDuration(overlay);\n      showOverlay();\n      setTimeout(() => beforeModalShow(this), overlayDelay);\n    } else {\n      beforeModalShow(this);\n      /* istanbul ignore else */\n      if (currentOpen && hasClass(overlay, showClass)) {\n        hideOverlay();\n      }\n    }\n  }\n\n  /**\n   * Hide the modal from the user.\n   *\n   * @param callback when defined it will skip animation\n   */\n  hide(callback?: () => void) {\n    const { element, hasFade, relatedTarget } = this;\n\n    if (!hasClass(element, showClass)) return;\n\n    hideModalEvent.relatedTarget = relatedTarget || undefined;\n    dispatchEvent(element, hideModalEvent);\n    if (hideModalEvent.defaultPrevented) return;\n    removeClass(element, showClass);\n    setAttribute(element, ariaHidden, 'true');\n    removeAttribute(element, ariaModal);\n\n    // if (hasFade && callback) {\n    /* istanbul ignore else */\n    if (hasFade) {\n      emulateTransitionEnd(element, () => beforeModalHide(this, callback));\n    } else {\n      beforeModalHide(this, callback);\n    }\n  }\n\n  /**\n   * Updates the modal layout.\n   */\n  update() {\n    /* istanbul ignore else */\n    if (hasClass(this.element, showClass)) setModalScrollbar(this);\n  }\n\n  /** Removes the `Modal` component from target element. */\n  dispose() {\n    toggleModalHandler(this);\n    // use callback\n    this.hide(() => super.dispose());\n  }\n}\n"],"names":["modalSelector","modalString","modalToggleSelector","dataBsToggle","modalDismissSelector","dataBsDismiss","modalStaticClass","modalDefaults","getModalInstance","element","getInstance","modalComponent","modalInitCallback","Modal","showModalEvent","createCustomEvent","shownModalEvent","hideModalEvent","hiddenModalEvent","setModalScrollbar","self","scrollbarWidth","measureScrollbar","clientHeight","scrollHeight","getDocumentElement","modalHeight","modalScrollHeight","modalOverflow","pad","isRTL","padStyle","setElementStyle","setScrollbar","toggleModalDismiss","add","action","addListener","removeListener","mouseclickEvent","modalDismissHandler","getWindow","resizeEvent","passiveHandler","getDocument","keydownEvent","modalKeyHandler","toggleModalHandler","triggers","btn","modalClickHandler","afterModalHide","callback","relatedTarget","removeOverlay","focusElement","isVisible","focus","isFunction","dispatchEvent","afterModalShow","beforeModalShow","hasFade","getCurrentOpen","getDocumentBody","addClass","showClass","removeAttribute","ariaHidden","setAttribute","ariaModal","emulateTransitionEnd","beforeModalHide","options","hasClass","overlay","hideOverlay","e","target","trigger","closest","getTargetElement","code","querySelector","modalActiveSelector","keyEscape","Timer","isStatic","modalDialog","backdrop","selectedText","targetInsideDialog","dismiss","staticTransitionEnd","duration","isHTMLElement","getElementTransitionDuration","removeClass","BaseComponent","config","querySelectorAll","fadeClass","overlayDelay","currentOpen","that","offcanvasComponent","hasPopup","toggleOverlayType","appendOverlay","showOverlay"],"mappings":"kiBAiEMA,EAAgB,IAAIC,EAAA,cACpBC,EAAsB,IAAIC,EAAAA,iBAAiBF,EAAAA,gBAC3CG,EAAuB,IAAIC,EAAAA,kBAAkBJ,EAAAA,gBAC7CK,EAAmB,GAAGL,uBAEtBM,EAAgB,CACpB,SAAU,GACV,SAAU,EACZ,EAMMC,EAAoBC,GAAyBC,EAAA,GAAmBD,EAASE,EAAc,cAAA,EAKvFC,EAAqBH,GAAyB,IAAII,EAAMJ,CAAO,EAI/DK,EAAiBC,EAAAA,GAA8B,WAAWd,EAAa,aAAA,EACvEe,EAAkBD,EAAAA,GAA8B,YAAYd,EAAa,aAAA,EACzEgB,EAAiBF,EAAAA,GAA8B,WAAWd,EAAa,aAAA,EACvEiB,EAAmBH,EAAAA,GAA8B,aAAad,EAAa,aAAA,EAU3EkB,EAAqBC,GAAgB,CACnC,KAAA,CAAE,QAAAX,CAAY,EAAAW,EACdC,EAAiBC,mBAAiBb,CAAO,EACzC,CAAE,aAAAc,EAAc,aAAAC,CAAa,EAAIC,IAAmBhB,CAAO,EAC3D,CAAE,aAAciB,EAAa,aAAcC,GAAsBlB,EACjEmB,EAAgBF,IAAgBC,EAGlC,GAAA,CAACC,GAAiBP,EAAgB,CACpC,MAAMQ,EAAOC,EAAM,GAAArB,CAAO,EAAgD,cAA5C,eACxBsB,EAAW,CAAA,EACjBA,EAASF,GAAO,GAAGR,MACnBW,KAAgBvB,EAASsB,CAAQ,CACnC,CACaE,EAAAA,aAAAxB,EAASmB,GAAiBL,IAAiBC,CAAY,CACtE,EAQMU,EAAqB,CAACd,EAAae,IAAkB,CACnD,MAAAC,EAASD,EAAME,EAAc,EAAAC,IAC7B,CAAE,QAAA7B,CAAY,EAAAW,EACbgB,EAAA3B,EAAS8B,KAAiBC,CAAoC,EACrEJ,EAAOK,KAAUhC,CAAO,EAAGiC,EAAa,GAAAtB,EAAK,OAAQuB,EAAAA,EAAc,EACnEP,EAAOQ,EAAAA,EAAYnC,CAAO,EAAGoC,EAAA,GAAcC,CAAgC,CAC7E,EAQMC,EAAqB,CAAC3B,EAAae,IAAkB,CACnD,MAAAC,EAASD,EAAME,EAAc,EAAAC,IAC7B,CAAE,SAAAU,CAAa,EAAA5B,EAGjB4B,EAAS,QACXA,EAAS,QAAeC,GAAAb,EAAOa,EAAKV,EAAA,GAAiBW,CAAkC,CAAC,CAE5F,EAQMC,EAAiB,CAAC/B,EAAagC,IAA0B,CAC7D,KAAM,CAAE,SAAAJ,EAAU,QAAAvC,EAAS,cAAA4C,CAAA,EAAkBjC,EAC7CkC,EAAA,cAAc7C,CAAO,EACrBuB,EAAA,GAAgBvB,EAAS,CAAE,aAAc,GAAI,QAAS,GAAI,EAC1DyB,EAAmBd,CAAI,EAEvB,MAAMmC,EAAezC,EAAe,eAAiBkC,EAAS,KAAKQ,CAAS,EAExED,GAAcE,EAAA,GAAMF,CAA2B,EAG/CG,EAAAA,GAAWN,CAAQ,GAAYA,IAEnClC,EAAiB,cAAgBmC,EACjCM,IAAclD,EAASS,CAAgB,CACzC,EAOM0C,EAAkBxC,GAAgB,CAChC,KAAA,CAAE,QAAAX,EAAS,cAAA4C,CAAkB,EAAAjC,EACnCqC,EAAA,GAAMhD,CAAO,EACbyB,EAAmBd,EAAM,EAAI,EAE7BJ,EAAgB,cAAgBqC,EAChCM,IAAclD,EAASO,CAAe,CACxC,EAOM6C,EAAmBzC,GAAgB,CACjC,KAAA,CAAE,QAAAX,EAAS,QAAAqD,CAAY,EAAA1C,EAC7BY,EAAAA,GAAgBvB,EAAS,CAAE,QAAS,OAAS,CAAA,EAE7CU,EAAkBC,CAAI,EAEjB2C,EAAAA,eAAetD,CAAO,GACzBuB,EAAA,GAAgBgC,KAAgBvD,CAAO,EAAG,CAAE,SAAU,SAAU,EAGlEwD,KAASxD,EAASyD,EAAAA,SAAS,EAC3BC,KAAgB1D,EAAS2D,EAAAA,EAAU,EACtBC,EAAAA,EAAA5D,EAAS6D,KAAW,MAAM,EAEnCR,EAASS,EAAAA,GAAqB9D,EAAS,IAAMmD,EAAexC,CAAI,CAAC,EAChEwC,EAAexC,CAAI,CAC1B,EAQMoD,EAAkB,CAACpD,EAAagC,IAA0B,CAC9D,KAAM,CAAE,QAAA3C,EAAS,QAAAgE,EAAS,QAAAX,CAAA,EAAY1C,EAIlCqD,EAAQ,UAAY,CAACrB,GAAYU,GAAWY,EAAAA,GAASC,EAAS,QAAAT,WAAS,GAAK,CAACH,EAAe,eAAAtD,CAAO,GAEzFmE,EAAAA,cACZL,EAAAA,GAAqBI,EAAAA,QAAS,IAAMxB,EAAe/B,CAAI,CAAC,GAExD+B,EAAe/B,EAAMgC,CAAQ,CAEjC,EASMF,EAAqB2B,GAAkB,CACrC,KAAA,CAAE,OAAAC,CAAW,EAAAD,EAEbE,EAAUD,GAAUE,EAAQ,GAAAF,EAAuB5E,CAAmB,EACtEO,EAAUsE,GAAWE,EAAA,iBAAiBF,CAAO,EAC7C3D,EAAOX,GAAWD,EAAiBC,CAAO,EAG3CW,IAGD2D,GAAWA,EAAQ,UAAY,KAAKF,EAAE,eAAe,EACzDzD,EAAK,cAAgB2D,EACrB3D,EAAK,OAAO,EACd,EAQM0B,EAAkB,CAAC,CAAE,KAAAoC,EAAM,OAAAJ,KAA4B,CAC3D,MAAMrE,EAAU0E,EAAAA,GAAcC,EAAAA,oBAAqBxC,EAAAA,EAAYkC,CAAc,CAAC,EACxE1D,EAAOX,GAAWD,EAAiBC,CAAO,EAGhD,GAAI,CAACW,EAAM,OAEL,KAAA,CAAE,QAAAqD,CAAY,EAAArD,EAGlBqD,EAAQ,UACRS,IAASG,MACTX,KAASjE,EAASyD,EAAAA,SAAS,IAG3B9C,EAAK,cAAgB,KACrBA,EAAK,KAAK,EAEd,EAOA,SAASoB,EAAuCqC,EAAe,CACvD,MAAAzD,EAAOZ,EAAiB,IAAI,EAIlC,GAAI,CAACY,GAAQkE,KAAM,IAAI,IAAI,EAAG,OAE9B,KAAM,CAAE,QAAAb,EAAS,SAAAc,EAAU,YAAAC,CAAA,EAAgBpE,EACrC,CAAE,SAAAqE,CAAa,EAAAhB,EACf,CAAE,OAAAK,CAAW,EAAAD,EAEba,EAAe9C,EAAAA,EAAY,IAAI,GAAG,gBAAgB,SAAW,EAAA,OAC7D+C,EAAqBH,GAAa,SAASV,CAAqB,EAChEc,EAAUd,GAAUE,EAAQ,GAAAF,EAAuB1E,CAAoB,EAGzEmF,GAAY,CAACI,EACTL,EAAAA,GAAA,IACJ,KACA,IAAM,CACJrB,KAAS,KAAM3D,CAAgB,EAC/BiE,EAAAA,GAAqBiB,EAA4B,IAAMK,EAAoBzE,CAAI,CAAC,CAClF,EACA,EAAA,GAEOwE,GAAY,CAACF,GAAgB,CAACH,GAAY,CAACI,GAAsBF,KAC1ErE,EAAK,cAAgBwE,GAAW,KAChCxE,EAAK,KAAK,EACVyD,EAAE,eAAe,EAErB,CAOA,MAAMgB,EAAuBzE,GAAgB,CACrC,KAAA,CAAE,QAAAX,EAAS,YAAA+E,CAAgB,EAAApE,EAC3B0E,GAAYC,EAAAA,EAAcP,CAAW,EAAIQ,EAAAA,GAA6BR,CAAW,EAAI,GAAK,GAChGS,KAAYxF,EAASH,CAAgB,EAErCgF,KAAM,IAAI7E,EAAS,IAAM6E,EAAAA,GAAM,MAAM7E,CAAO,EAAGqF,CAAQ,CACzD,EAKA,MAAqBjF,UAAcqF,CAAc,CAC/C,OAAO,SAAWlG,EAClB,OAAO,KAAOY,EACd,OAAO,YAAcJ,EAYrB,YAAYsE,EAA8BqB,EAAgC,CACxE,MAAMrB,EAAQqB,CAAM,EAGd,KAAA,CAAE,QAAA1F,CAAY,EAAA,KAGpB,KAAK,YAAc0E,EAAAA,GAAc,IAAIlF,EAAAA,qBAAsBQ,CAAO,EAG7D,KAAA,SAAW,CAAC,GAAG2F,EAAA,GAAiBlG,EAAqB0C,IAAYnC,CAAO,CAAC,CAAC,EAAE,OAC/EwC,GAAOgC,EAAAA,iBAAiBhC,CAAG,IAAMxC,CAAA,EAI9B,KAAA,SAAW,KAAK,QAAQ,WAAa,SACrC,KAAA,QAAUiE,EAAAA,GAASjE,EAAS4F,EAAS,SAAA,EAC1C,KAAK,cAAgB,KAGrBtD,EAAmB,KAAM,EAAI,EAG7B,KAAK,OAAS,KAAK,OAAO,KAAK,IAAI,CACrC,CAKA,IAAI,MAAO,CACF,OAAApC,gBACT,CAIA,IAAI,UAAW,CACN,OAAAJ,CACT,CAKA,QAAS,CACHmE,KAAS,KAAK,QAASR,WAAS,EAAG,KAAK,KAAK,EAC5C,KAAK,KAAK,CACjB,CAGA,MAAO,CACL,KAAM,CAAE,QAAAzD,EAAS,QAAAgE,EAAS,QAAAX,EAAS,cAAAT,GAAkB,KAC/C,CAAEoC,SAAAA,CAAa,EAAAhB,EACrB,IAAI6B,EAAe,EAMnB,GAJI5B,EAAA,GAASjE,EAASyD,WAAS,IAE/BpD,EAAe,cAAgBuC,GAAiB,OAChDM,IAAclD,EAASK,CAAc,EACjCA,EAAe,kBAAkB,OAG/B,MAAAyF,EAAcxC,iBAAetD,CAAO,EAEtC,GAAA8F,GAAeA,IAAgB9F,EAAS,CAC1C,MAAM+F,EACJhG,EAAiB+F,CAAW,GAE5B7F,EAAAA,GAAyD6F,EAAaE,EAAAA,kBAAkB,EACtFD,GAAMA,EAAK,KAAK,CACtB,CACIf,GACGiB,EAAAA,SAAS/B,EAAAA,OAAO,EAGnBgC,EAAA,kBAAkB,EAAI,EAFRC,EAAAA,cAAAnG,EAASqD,EAAS,EAAI,EAKtCwC,EAAeN,EAAAA,GAA6BrB,EAAAA,OAAO,EACvCkC,EAAAA,cACZ,WAAW,IAAMhD,EAAgB,IAAI,EAAGyC,CAAY,IAEpDzC,EAAgB,IAAI,EAEhB0C,GAAe7B,EAAAA,GAASC,EAAS,QAAAT,EAAS,SAAA,GAChCU,EAAAA,cAGlB,CAOA,KAAKxB,EAAuB,CAC1B,KAAM,CAAE,QAAA3C,EAAS,QAAAqD,EAAS,cAAAT,CAAA,EAAkB,KAEvCqB,EAAAA,GAASjE,EAASyD,WAAS,IAEhCjD,EAAe,cAAgBoC,GAAiB,OAChDM,IAAclD,EAASQ,CAAc,EACjC,CAAAA,EAAe,mBACnBgF,KAAYxF,EAASyD,EAAAA,SAAS,EACjBG,EAAAA,EAAA5D,EAAS2D,KAAY,MAAM,EACxCD,KAAgB1D,EAAS6D,EAAAA,EAAS,EAI9BR,EACFS,EAAA,GAAqB9D,EAAS,IAAM+D,EAAgB,KAAMpB,CAAQ,CAAC,EAEnEoB,EAAgB,KAAMpB,CAAQ,GAElC,CAKA,QAAS,CAEHsB,KAAS,KAAK,QAASR,WAAS,GAAG/C,EAAkB,IAAI,CAC/D,CAGA,SAAU,CACR4B,EAAmB,IAAI,EAEvB,KAAK,KAAK,IAAM,MAAM,QAAS,CAAA,CACjC,CACF"}