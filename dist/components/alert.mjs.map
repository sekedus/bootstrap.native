{"version":3,"file":"alert.mjs","sources":["../../src/strings/alertString.ts","../../src/strings/alertComponent.ts","../../src/components/alert.ts"],"sourcesContent":["/** @type {string} */\nconst alertString = 'alert';\nexport default alertString;\n","/** @type {string} */\nconst alertComponent = 'Alert';\nexport default alertComponent;\n","/* Native JavaScript for Bootstrap 5 | Alert\n-------------------------------------------- */\nimport {\n  emulateTransitionEnd,\n  mouseclickEvent,\n  getInstance,\n  querySelector,\n  closest,\n  // ObjectAssign,\n  hasClass,\n  removeClass,\n  dispatchEvent,\n  createCustomEvent,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport dataBsDismiss from '../strings/dataBsDismiss';\nimport alertString from '../strings/alertString';\nimport alertComponent from '../strings/alertComponent';\nimport type { AlertEvent } from '../interface/alert';\n// import type { BaseOptions } from 'src/interface/baseComponent';\n\nimport BaseComponent from './base-component';\n\n// ALERT PRIVATE GC\n// ================\nconst alertSelector = `.${alertString}`;\nconst alertDismissSelector = `[${dataBsDismiss}=\"${alertString}\"]`;\n\n/**\n * Static method which returns an existing `Alert` instance associated\n * to a target `Element`.\n *\n */\nconst getAlertInstance = (element: HTMLElement) => getInstance<Alert>(element, alertComponent);\n\n/**\n * An `Alert` initialization callback.\n */\nconst alertInitCallback = <T>(element: HTMLElement) => new Alert(element) as T;\n\n// ALERT CUSTOM EVENTS\n// ===================\nconst closeAlertEvent = createCustomEvent<AlertEvent>(`close.bs.${alertString}`);\nconst closedAlertEvent = createCustomEvent<AlertEvent>(`closed.bs.${alertString}`);\n\n// ALERT EVENT HANDLER\n// ===================\n/**\n * Alert `transitionend` callback.\n *\n * @param that target Alert instance\n */\nconst alertTransitionEnd = (that: Alert) => {\n  const { element } = that;\n  toggleAlertHandler(that);\n\n  dispatchEvent(element, closedAlertEvent);\n\n  that.dispose();\n  element.remove();\n};\n\n// ALERT PRIVATE METHOD\n// ====================\n/**\n * Toggle on / off the `click` event listener.\n *\n * @param that the target alert instance\n * @param add when `true`, event listener is added\n */\nconst toggleAlertHandler = (that: Alert, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { dismiss } = that;\n  /* istanbul ignore else */\n  if (dismiss) action(dismiss, mouseclickEvent, that.close);\n};\n\n// ALERT DEFINITION\n// ================\n/** Creates a new Alert instance. */\nexport default class Alert extends BaseComponent {\n  static selector = alertSelector;\n  static init = alertInitCallback;\n  static getInstance = getAlertInstance;\n\n  dismiss: HTMLElement | null;\n\n  constructor(target: HTMLElement | string) {\n    super(target);\n\n    // the dismiss button\n    this.dismiss = querySelector(alertDismissSelector, this.element);\n\n    // add event listener\n    toggleAlertHandler(this, true);\n  }\n\n  /** Returns component name string. */\n  get name() {\n    return alertComponent;\n  }\n\n  // ALERT PUBLIC METHODS\n  // ====================\n  /**\n   * Public method that hides the `.alert` element from the user,\n   * disposes the instance once animation is complete, then\n   * removes the element from the DOM.\n   *\n   * @param e the `click` event\n   */\n  close(e?: Event) {\n    const self = e ? (getAlertInstance(closest(e.target as HTMLElement, alertSelector) as HTMLElement) as Alert) : this;\n    const { element } = self;\n\n    /* istanbul ignore else */\n    if (element && hasClass(element, showClass)) {\n      dispatchEvent(element, closeAlertEvent);\n      if (closeAlertEvent.defaultPrevented) return;\n\n      removeClass(element, showClass);\n\n      if (hasClass(element, fadeClass)) {\n        emulateTransitionEnd(element, () => alertTransitionEnd(self));\n      } else alertTransitionEnd(self);\n    }\n  }\n\n  /** Remove the component from target element. */\n  dispose() {\n    toggleAlertHandler(this);\n    super.dispose();\n  }\n}\n"],"names":["alertString","alertComponent","alertSelector","alertDismissSelector","dataBsDismiss","getAlertInstance","element","getInstance","alertInitCallback","Alert","closeAlertEvent","createCustomEvent","closedAlertEvent","alertTransitionEnd","that","toggleAlertHandler","dispatchEvent","add","action","addListener","removeListener","dismiss","mouseclickEvent","BaseComponent","target","querySelector","e","self","closest","hasClass","showClass","removeClass","fadeClass","emulateTransitionEnd"],"mappings":";;;;;;AACA,MAAMA,IAAc,SCAdC,IAAiB,SC4BjBC,IAAgB,IAAIF,KACpBG,IAAuB,IAAIC,MAAkBJ,OAO7CK,IAAmB,CAACC,MAAyBC,EAAmBD,GAASL,CAAc,GAKvFO,IAAoB,CAAIF,MAAyB,IAAIG,EAAMH,CAAO,GAIlEI,IAAkBC,EAA8B,YAAYX,GAAa,GACzEY,IAAmBD,EAA8B,aAAaX,GAAa,GAS3Ea,IAAqB,CAACC,MAAgB;AACpC,QAAA,EAAE,SAAAR,EAAY,IAAAQ;AACpB,EAAAC,EAAmBD,CAAI,GAEvBE,EAAcV,GAASM,CAAgB,GAEvCE,EAAK,QAAQ,GACbR,EAAQ,OAAO;AACjB,GAUMS,IAAqB,CAACD,GAAaG,MAAkB;AACnD,QAAAC,IAASD,IAAME,IAAcC,GAC7B,EAAE,SAAAC,EAAY,IAAAP;AAEhB,EAAAO,KAAgBH,EAAAG,GAASC,GAAiBR,EAAK,KAAK;AAC1D;AAKA,MAAqBL,UAAcc,EAAc;AAAA,EAC/C,OAAO,WAAWrB;AAAA,EAClB,OAAO,OAAOM;AAAA,EACd,OAAO,cAAcH;AAAA,EAErB;AAAA,EAEA,YAAYmB,GAA8B;AACxC,UAAMA,CAAM,GAGZ,KAAK,UAAUC,EAActB,GAAsB,KAAK,OAAO,GAG/DY,EAAmB,MAAM,EAAI;AAAA,EAC/B;AAAA,EAGA,IAAI,OAAO;AACF,WAAAd;AAAA,EACT;AAAA,EAWA,MAAMyB,GAAW;AACT,UAAAC,IAAOD,IAAKrB,EAAiBuB,EAAQF,EAAE,QAAuBxB,CAAa,CAAgB,IAAc,MACzG,EAAE,SAAAI,EAAY,IAAAqB;AAGpB,QAAIrB,KAAWuB,EAASvB,GAASwB,CAAS,GAAG;AAE3C,UADAd,EAAcV,GAASI,CAAe,GAClCA,EAAgB;AAAkB;AAEtCqB,MAAAA,EAAYzB,GAASwB,CAAS,GAE1BD,EAASvB,GAAS0B,CAAS,IAC7BC,EAAqB3B,GAAS,MAAMO,EAAmBc,CAAI,CAAC,IACvDd,EAAmBc,CAAI;AAAA,IAChC;AAAA,EACF;AAAA,EAGA,UAAU;AACR,IAAAZ,EAAmB,IAAI,GACvB,MAAM,QAAQ;AAAA,EAChB;AACF;"}