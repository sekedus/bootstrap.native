{"version":3,"file":"alert.mjs","sources":["../../src/strings/alertString.ts","../../src/strings/alertComponent.ts","../../src/components/alert.ts"],"sourcesContent":["/** @type {string} */\nconst alertString = 'alert';\nexport default alertString;\n","/** @type {string} */\nconst alertComponent = 'Alert';\nexport default alertComponent;\n","/* Native JavaScript for Bootstrap 5 | Alert\n-------------------------------------------- */\nimport {\n  emulateTransitionEnd,\n  mouseclickEvent,\n  getInstance,\n  querySelector,\n  hasClass,\n  removeClass,\n  dispatchEvent,\n  createCustomEvent,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport dataBsDismiss from '../strings/dataBsDismiss';\nimport alertString from '../strings/alertString';\nimport alertComponent from '../strings/alertComponent';\nimport type { AlertEvent } from '../interface/alert';\n\nimport BaseComponent from './base-component';\n\n// ALERT PRIVATE GC\n// ================\nconst alertSelector = `.${alertString}`;\nconst alertDismissSelector = `[${dataBsDismiss}=\"${alertString}\"]`;\n\n/**\n * Static method which returns an existing `Alert` instance associated\n * to a target `Element`.\n *\n */\nconst getAlertInstance = (element: HTMLElement) => getInstance<Alert>(element, alertComponent);\n\n/**\n * An `Alert` initialization callback.\n */\nconst alertInitCallback = <T>(element: HTMLElement) => new Alert(element) as T;\n\n// ALERT CUSTOM EVENTS\n// ===================\nconst closeAlertEvent = createCustomEvent<AlertEvent>(`close.bs.${alertString}`);\nconst closedAlertEvent = createCustomEvent<AlertEvent>(`closed.bs.${alertString}`);\n\n// ALERT EVENT HANDLER\n// ===================\n/**\n * Alert `transitionend` callback.\n *\n * @param that target Alert instance\n */\nconst alertTransitionEnd = (self: Alert) => {\n  const { element } = self;\n  dispatchEvent(element, closedAlertEvent);\n\n  self._toggleEventListeners();\n  self.dispose();\n  element.remove();\n};\n\n// ALERT DEFINITION\n// ================\n/** Creates a new Alert instance. */\nexport default class Alert extends BaseComponent {\n  static selector = alertSelector;\n  static init = alertInitCallback;\n  static getInstance = getAlertInstance;\n  dismiss: HTMLElement | null;\n\n  constructor(target: HTMLElement | string) {\n    super(target);\n\n    // the dismiss button\n    this.dismiss = querySelector(alertDismissSelector, this.element);\n\n    // add event listener\n    this._toggleEventListeners(true);\n  }\n\n  /** Returns component name string. */\n  get name() {\n    return alertComponent;\n  }\n\n  // ALERT PUBLIC METHODS\n  // ====================\n  /**\n   * Public method that hides the `.alert` element from the user,\n   * disposes the instance once animation is complete, then\n   * removes the element from the DOM.\n   */\n  close = () => {\n    const { element } = this;\n\n    /* istanbul ignore else */\n    if (element && hasClass(element, showClass)) {\n      dispatchEvent(element, closeAlertEvent);\n\n      if (!closeAlertEvent.defaultPrevented) {\n        removeClass(element, showClass);\n\n        if (hasClass(element, fadeClass)) {\n          emulateTransitionEnd(element, () => alertTransitionEnd(this));\n        } else alertTransitionEnd(this);\n      }\n    }\n  };\n  /**\n   * Toggle on / off the `click` event listener.\n   *\n   * @param add when `true`, event listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { dismiss, close } = this;\n    /* istanbul ignore else */\n    if (dismiss) action(dismiss, mouseclickEvent, close);\n  };\n\n  /** Remove the component from target element. */\n  dispose() {\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n"],"names":["alertString","alertComponent","alertSelector","alertDismissSelector","dataBsDismiss","getAlertInstance","element","getInstance","alertInitCallback","Alert","closeAlertEvent","createCustomEvent","closedAlertEvent","alertTransitionEnd","self","dispatchEvent","BaseComponent","target","__publicField","hasClass","showClass","removeClass","fadeClass","emulateTransitionEnd","add","action","addListener","removeListener","dismiss","close","mouseclickEvent","querySelector"],"mappings":";;;;;;;;;AACA,MAAMA,IAAc,SCAdC,IAAiB,SCyBjBC,IAAgB,IAAIF,CAAW,IAC/BG,IAAuB,IAAIC,CAAa,KAAKJ,CAAW,MAOxDK,IAAmB,CAACC,MAAyBC,EAAmBD,GAASL,CAAc,GAKvFO,IAAoB,CAAIF,MAAyB,IAAIG,EAAMH,CAAO,GAIlEI,IAAkBC,EAA8B,YAAYX,CAAW,EAAE,GACzEY,IAAmBD,EAA8B,aAAaX,CAAW,EAAE,GAS3Ea,IAAqB,CAACC,MAAgB;AACpC,QAAA,EAAE,SAAAR,EAAY,IAAAQ;AACpB,EAAAC,EAAcT,GAASM,CAAgB,GAEvCE,EAAK,sBAAsB,GAC3BA,EAAK,QAAQ,GACbR,EAAQ,OAAO;AACjB;AAKA,MAAqBG,UAAcO,EAAc;AAAA,EAM/C,YAAYC,GAA8B;AACxC,UAAMA,CAAM;AAHd,IAAAC,EAAA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,EAAA,eAAQ,MAAM;AACN,YAAA,EAAE,SAAAZ,EAAY,IAAA;AAGpB,MAAIA,KAAWa,EAASb,GAASc,CAAS,MACxCL,EAAcT,GAASI,CAAe,GAEjCA,EAAgB,qBACnBW,EAAYf,GAASc,CAAS,GAE1BD,EAASb,GAASgB,CAAS,IAC7BC,EAAqBjB,GAAS,MAAMO,EAAmB,IAAI,CAAC,IACvDA,EAAmB,IAAI;AAAA,IAElC;AAOF;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAK,EAAA,+BAAwB,CAACM,MAAkB;AACnC,YAAAC,IAASD,IAAME,IAAcC,GAC7B,EAAE,SAAAC,GAAS,OAAAC,EAAU,IAAA;AAEvB,MAAAD,KAAgBH,EAAAG,GAASE,GAAiBD,CAAK;AAAA,IAAA;AA3CnD,SAAK,UAAUE,EAAc5B,GAAsB,KAAK,OAAO,GAG/D,KAAK,sBAAsB,EAAI;AAAA,EACjC;AAAA;AAAA,EAGA,IAAI,OAAO;AACF,WAAAF;AAAA,EACT;AAAA;AAAA,EAsCA,UAAU;AACR,SAAK,sBAAsB,GAC3B,MAAM,QAAQ;AAAA,EAChB;AACF;AA5DEiB,EADmBT,GACZ,YAAWP,IAClBgB,EAFmBT,GAEZ,QAAOD,IACdU,EAHmBT,GAGZ,eAAcJ;"}