{"version":3,"file":"scrollspy.cjs","sources":["../../src/strings/scrollspyString.ts","../../src/strings/scrollspyComponent.ts","../../src/components/scrollspy.ts"],"sourcesContent":["/** @type {string} */\nconst scrollspyString = 'scrollspy';\nexport default scrollspyString;\n","/** @type {string} */\nconst scrollspyComponent = 'ScrollSpy';\nexport default scrollspyComponent;\n","/* Native JavaScript for Bootstrap 5 | ScrollSpy\n------------------------------------------------ */\nimport {\n  getDocumentBody,\n  getDocumentElement,\n  getDocument,\n  getWindow,\n  removeClass,\n  hasClass,\n  addClass,\n  getElementsByTagName,\n  getAttribute,\n  querySelector,\n  isHTMLElement,\n  isWindow,\n  createCustomEvent,\n  getInstance,\n  scrollEvent,\n  // ObjectAssign,\n  passiveHandler,\n  dispatchEvent,\n  getBoundingClientRect,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport activeClass from '../strings/activeClass';\nimport scrollspyString from '../strings/scrollspyString';\nimport scrollspyComponent from '../strings/scrollspyComponent';\n\nimport BaseComponent from './base-component';\nimport { ScrollSpyOptions, ScrollSpyEvent } from '../interface/scrollspy';\n\n// SCROLLSPY PRIVATE GC\n// ====================\nconst scrollspySelector = '[data-bs-spy=\"scroll\"]';\n\nconst scrollspyDefaults: ScrollSpyOptions = {\n  offset: 10,\n  target: null,\n};\n\n/**\n * Static method which returns an existing `ScrollSpy` instance associated\n * to a target `Element`.\n */\nconst getScrollSpyInstance = (element: HTMLElement) => getInstance<ScrollSpy>(element, scrollspyComponent);\n\n/**\n * A `ScrollSpy` initialization callback.\n */\nconst scrollspyInitCallback = (element: HTMLElement) => new ScrollSpy(element);\n\n// SCROLLSPY CUSTOM EVENT\n// ======================\nconst activateScrollSpy = createCustomEvent<ScrollSpyEvent>(`activate.bs.${scrollspyString}`);\n\n// SCROLLSPY PRIVATE METHODS\n// =========================\n/**\n * Update the state of all items.\n *\n * @param self the `ScrollSpy` instance\n */\nconst updateSpyTargets = (self: ScrollSpy) => {\n  const { target, scrollTarget, options, itemsLength, scrollHeight, element } = self;\n  const { offset } = options;\n  const isWin = isWindow(scrollTarget as Node | Window);\n\n  const links = target && getElementsByTagName('A', target);\n  const scrollHEIGHT = scrollTarget && getScrollHeight(scrollTarget);\n\n  self.scrollTop = isWin ? (scrollTarget as Window).scrollY : (scrollTarget as HTMLElement).scrollTop;\n\n  // only update items/offsets once or with each mutation\n  /* istanbul ignore else */\n  if (links && (itemsLength !== links.length || scrollHEIGHT !== scrollHeight)) {\n    let href;\n    let targetItem;\n    let rect;\n\n    // reset arrays & update\n    self.items = [];\n    self.offsets = [];\n    self.scrollHeight = scrollHEIGHT as number;\n    self.maxScroll = self.scrollHeight - getOffsetHeight(self);\n\n    [...links].forEach(link => {\n      href = getAttribute(link, 'href');\n      targetItem =\n        href && href.charAt(0) === '#' && href.slice(-1) !== '#' && querySelector(href, getDocument(element));\n\n      if (targetItem) {\n        self.items.push(link);\n        rect = getBoundingClientRect(targetItem);\n        self.offsets.push((isWin ? rect.top + self.scrollTop : targetItem.offsetTop) - offset);\n      }\n    });\n    self.itemsLength = self.items.length;\n  }\n};\n\n/**\n * Returns the `scrollHeight` property of the scrolling element.\n *\n * @param scrollTarget the `ScrollSpy` instance\n * @return `scrollTarget` height\n */\nconst getScrollHeight = (scrollTarget: Node | Window) => {\n  return isHTMLElement(scrollTarget as Node)\n    ? (scrollTarget as HTMLElement).scrollHeight\n    : getDocumentElement(scrollTarget as Node).scrollHeight;\n};\n\n/**\n * Returns the height property of the scrolling element.\n *\n * @param params the `ScrollSpy` instance\n */\nconst getOffsetHeight = ({ element, scrollTarget }: ScrollSpy) => {\n  return isWindow(scrollTarget as Node) ? (scrollTarget as Window).innerHeight : getBoundingClientRect(element).height;\n};\n\n/**\n * Clear all items of the target.\n *\n * @param target a single item\n */\nconst clear = (target: HTMLElement) => {\n  [...getElementsByTagName('A', target)].forEach(item => {\n    if (hasClass(item, activeClass)) removeClass(item, activeClass);\n  });\n};\n\n/**\n * Activates a new item.\n *\n * @param self the `ScrollSpy` instance\n * @param item a single item\n */\nconst activate = (self: ScrollSpy, item: HTMLElement) => {\n  const { target, element } = self;\n  if (isHTMLElement(target)) clear(target);\n  self.activeItem = item;\n  addClass(item, activeClass);\n\n  // activate all parents\n  const parents: HTMLElement[] = [];\n  let parentItem = item;\n  while (parentItem !== getDocumentBody(element)) {\n    parentItem = parentItem.parentElement as HTMLElement;\n    if (hasClass(parentItem, 'nav') || hasClass(parentItem, 'dropdown-menu')) parents.push(parentItem);\n  }\n\n  parents.forEach(menuItem => {\n    const parentLink = menuItem.previousElementSibling as HTMLElement | null;\n\n    /* istanbul ignore else */\n    if (parentLink && !hasClass(parentLink, activeClass)) {\n      addClass(parentLink, activeClass);\n    }\n  });\n\n  // dispatch\n  activateScrollSpy.relatedTarget = item;\n  dispatchEvent(element, activateScrollSpy);\n};\n\n/**\n * Toggles on/off the component event listener.\n *\n * @param self the `ScrollSpy` instance\n * @param add when `true`, listener is added\n */\nconst toggleSpyHandlers = (self: ScrollSpy, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  action(self.scrollTarget as EventTarget, scrollEvent, self.refresh, passiveHandler);\n};\n\n// SCROLLSPY DEFINITION\n// ====================\n/** Returns a new `ScrollSpy` instance. */\nexport default class ScrollSpy extends BaseComponent {\n  static selector = scrollspySelector;\n  static init = scrollspyInitCallback;\n  static getInstance = getScrollSpyInstance;\n  declare options: ScrollSpyOptions;\n  declare target: HTMLElement | null;\n  declare scrollTarget: HTMLElement | Window | null;\n  declare scrollTop: number;\n  declare maxScroll: number;\n  declare scrollHeight: number;\n  declare activeItem: HTMLElement | null;\n  declare items: HTMLElement[];\n  declare itemsLength: number;\n  declare offsets: number[];\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ScrollSpyOptions>) {\n    super(target, config);\n\n    // initialization element & options\n    const { element, options } = this;\n\n    // additional properties\n    this.target = querySelector(options.target as HTMLElement | string, getDocument(element));\n\n    // invalidate\n    if (!this.target) return;\n\n    // set initial state\n    this.scrollTarget = element.clientHeight < element.scrollHeight ? element : getWindow(element);\n\n    // bind events\n    this.refresh = this.refresh.bind(this);\n\n    // add event handlers\n    toggleSpyHandlers(this, true);\n\n    this.refresh();\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return scrollspyComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return scrollspyDefaults;\n  }\n  /* eslint-enable */\n\n  // SCROLLSPY PUBLIC METHODS\n  // ========================\n  /** Updates all items. */\n  refresh() {\n    const { target } = this;\n\n    // check if target is visible and invalidate\n    /* istanbul ignore next */\n    if (target?.offsetHeight === 0) return;\n\n    updateSpyTargets(this);\n\n    const { scrollTop, maxScroll, itemsLength, items, activeItem } = this;\n\n    if (scrollTop >= maxScroll) {\n      const newActiveItem = items[itemsLength - 1];\n\n      /* istanbul ignore else */\n      if (activeItem !== newActiveItem) {\n        activate(this, newActiveItem);\n      }\n      return;\n    }\n\n    const { offsets } = this;\n\n    if (activeItem && scrollTop < offsets[0] && offsets[0] > 0) {\n      this.activeItem = null;\n      if (isHTMLElement(target)) clear(target);\n      return;\n    }\n\n    items.forEach((item, i) => {\n      if (\n        activeItem !== item &&\n        scrollTop >= offsets[i] &&\n        (typeof offsets[i + 1] === 'undefined' || scrollTop < offsets[i + 1])\n      ) {\n        activate(this, item);\n      }\n    });\n  }\n\n  /** Removes `ScrollSpy` from the target element. */\n  dispose() {\n    toggleSpyHandlers(this);\n    super.dispose();\n  }\n}\n"],"names":["scrollspyString","scrollspyComponent","scrollspySelector","scrollspyDefaults","getScrollSpyInstance","element","getInstance","scrollspyInitCallback","ScrollSpy","activateScrollSpy","createCustomEvent","updateSpyTargets","self","target","scrollTarget","options","itemsLength","scrollHeight","offset","isWin","isWindow","links","getElementsByTagName","scrollHEIGHT","getScrollHeight","href","targetItem","rect","getOffsetHeight","link","getAttribute","querySelector","getDocument","getBoundingClientRect","isHTMLElement","getDocumentElement","clear","item","hasClass","activeClass","removeClass","activate","addClass","parents","parentItem","getDocumentBody","menuItem","parentLink","dispatchEvent","toggleSpyHandlers","add","addListener","removeListener","scrollEvent","passiveHandler","BaseComponent","config","getWindow","scrollTop","maxScroll","items","activeItem","newActiveItem","offsets","i"],"mappings":"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"}