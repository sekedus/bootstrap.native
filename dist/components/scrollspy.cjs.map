{"version":3,"file":"scrollspy.cjs","sources":["../../src/strings/scrollspyString.ts","../../src/strings/scrollspyComponent.ts","../../src/components/scrollspy.ts"],"sourcesContent":["/** @type {string} */\nconst scrollspyString = \"scrollspy\";\nexport default scrollspyString;\n","/** @type {string} */\nconst scrollspyComponent = \"ScrollSpy\";\nexport default scrollspyComponent;\n","/* Native JavaScript for Bootstrap 5 | ScrollSpy\n------------------------------------------------ */\nimport {\n  addClass,\n  createCustomEvent,\n  dispatchEvent,\n  getAttribute,\n  getBoundingClientRect,\n  getDocument,\n  getDocumentBody,\n  getDocumentElement,\n  getElementsByTagName,\n  getInstance,\n  hasClass,\n  isHTMLElement,\n  querySelector,\n  removeClass,\n} from \"@thednp/shorty\";\n\nimport PositionObserver from \"@thednp/position-observer\";\n\nimport activeClass from \"../strings/activeClass\";\nimport scrollspyString from \"../strings/scrollspyString\";\nimport scrollspyComponent from \"../strings/scrollspyComponent\";\n\nimport BaseComponent from \"./base-component\";\nimport { ScrollSpyEvent, ScrollSpyOptions } from \"../interface/scrollspy\";\n\n// SCROLLSPY PRIVATE GC\n// ====================\nconst scrollspySelector = '[data-bs-spy=\"scroll\"]';\n\nconst scrollspyDefaults: Partial<ScrollSpyOptions> = {\n  offset: 10,\n  target: undefined,\n};\n\ntype ScrollSpyEventProps = {\n  relatedTarget: HTMLElement;\n};\n\n/**\n * Static method which returns an existing `ScrollSpy` instance associated\n * to a target `Element`.\n */\nconst getScrollSpyInstance = (element: Element) =>\n  getInstance<ScrollSpy>(element, scrollspyComponent);\n\n/**\n * A `ScrollSpy` initialization callback.\n */\nconst scrollspyInitCallback = (element: Element) => new ScrollSpy(element);\n\n// SCROLLSPY CUSTOM EVENT\n// ======================\nconst activateScrollSpy = createCustomEvent<\n  ScrollSpyEventProps,\n  ScrollSpyEvent\n>(`activate.bs.${scrollspyString}`);\n\n// SCROLLSPY PRIVATE METHODS\n// =========================\n/**\n * Update the state of all items.\n *\n * @param self the `ScrollSpy` instance\n */\nconst updateSpyTargets = (self: ScrollSpy) => {\n  const {\n    target,\n    scrollTarget,\n    options,\n    itemsLength,\n    scrollHeight,\n    element,\n    _observer,\n  } = self;\n  const { offset } = options;\n  const isRoot = scrollTarget !== element;\n\n  const links = target && getElementsByTagName<HTMLAnchorElement>(\"A\", target);\n  const doc = getDocument(element);\n  const scrollHEIGHT = scrollTarget.scrollHeight;\n\n  self.scrollTop = scrollTarget.scrollTop;\n\n  // only update items/offsets once or with each mutation\n  // istanbul ignore else @preserve\n  if (\n    links && (scrollHEIGHT !== scrollHeight || itemsLength !== links.length)\n  ) {\n    let href: string | null;\n    let ref: string | undefined;\n    let targetItem: HTMLElement | null;\n    let rect;\n\n    // reset arrays & update\n    self.items = [];\n    self.targets = [];\n    self.offsets = [];\n    self.scrollHeight = scrollHEIGHT;\n    self.maxScroll = self.scrollHeight - getOffsetHeight(self);\n\n    Array.from(links).forEach((link) => {\n      href = getAttribute(link, \"href\");\n      ref = href?.slice(1);\n      targetItem = ref?.length ? doc.getElementById(ref) : null;\n\n      if (targetItem) {\n        self.items.push(link);\n        self.targets.push(targetItem);\n        rect = _observer?.getEntry(targetItem)?.boundingClientRect ||\n          getBoundingClientRect(targetItem);\n        self.offsets.push(\n          (isRoot ? rect.top + self.scrollTop : targetItem.offsetTop) - offset,\n        );\n      }\n    });\n    self.itemsLength = self.items.length;\n  }\n};\n\n/**\n * Toggles on/off the component observer.\n *\n * @param self the ScrollSpy instance\n * @param add when `true`, listener is added\n */\nconst toggleObservers = (\n  { targets, scrollTarget, element, _observer }: ScrollSpy,\n  add?: boolean,\n) => {\n  if (add) {\n    if (scrollTarget === element) {\n      targets?.forEach((targetItem) => _observer.observe(targetItem));\n    } else {\n      _observer.observe(element);\n    }\n  } else _observer.disconnect();\n};\n\n/**\n * Returns the `scrollHeight` property of the scrolling element.\n *\n * @param scrollTarget the `ScrollSpy` instance\n * @return `scrollTarget` height\n */\nconst getScrollHeight = (scrollTarget: Element) => {\n  return scrollTarget.scrollHeight;\n};\n\n/**\n * Returns the height property of the scrolling element.\n *\n * @param params the `ScrollSpy` instance\n */\nconst getOffsetHeight = ({ element, scrollTarget }: ScrollSpy) => {\n  return scrollTarget !== element\n    ? scrollTarget.clientHeight\n    : getBoundingClientRect(element).height;\n};\n\n/**\n * Clear all items of the target.\n *\n * @param target a single item\n */\nconst clear = (target: Element) => {\n  Array.from(getElementsByTagName<HTMLAnchorElement>(\"A\", target)).forEach(\n    (item) => {\n      if (hasClass(item, activeClass)) removeClass(item, activeClass);\n    },\n  );\n};\n\n/**\n * Activates a new item.\n *\n * @param self the `ScrollSpy` instance\n * @param item a single item\n */\nconst activate = (self: ScrollSpy, item: HTMLElement) => {\n  const { target, element } = self;\n\n  // istanbul ignore else @preserve\n  if (isHTMLElement(target)) clear(target);\n\n  self.activeItem = item;\n  addClass(item, activeClass);\n\n  // activate all parents\n  const parents: HTMLElement[] = [];\n  let parentItem = item;\n  while (parentItem !== getDocumentBody(element)) {\n    parentItem = parentItem.parentElement as HTMLElement;\n    if (hasClass(parentItem, \"nav\") || hasClass(parentItem, \"dropdown-menu\")) {\n      parents.push(parentItem);\n    }\n  }\n\n  parents.forEach((menuItem) => {\n    const parentLink = menuItem.previousElementSibling as HTMLElement | null;\n\n    // istanbul ignore else @preserve\n    if (parentLink && !hasClass(parentLink, activeClass)) {\n      addClass(parentLink, activeClass);\n    }\n  });\n\n  // dispatch\n  activateScrollSpy.relatedTarget = item;\n  dispatchEvent(element, activateScrollSpy);\n};\n\n// SCROLLSPY DEFINITION\n// ====================\n/** Returns a new `ScrollSpy` instance. */\nexport default class ScrollSpy extends BaseComponent {\n  static selector = scrollspySelector;\n  static init = scrollspyInitCallback;\n  static getInstance = getScrollSpyInstance;\n  declare element: HTMLElement;\n  declare options: ScrollSpyOptions;\n  declare target: HTMLElement | null;\n  declare scrollTarget: HTMLElement;\n  declare scrollTop: number;\n  declare maxScroll: number;\n  declare scrollHeight: number;\n  declare activeItem: HTMLElement | null;\n  declare items: HTMLElement[];\n  declare targets: HTMLElement[];\n  declare itemsLength: number;\n  declare offsets: number[];\n  declare _observer: PositionObserver;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(\n    target: Element | string,\n    config?: Partial<ScrollSpyOptions>,\n  ) {\n    super(target, config);\n\n    // initialization element & options\n    const { element, options } = this;\n\n    // get target\n    const spyTarget = querySelector(\n      options.target,\n      getDocument(element),\n    );\n\n    // invalidate\n    if (!spyTarget) return;\n    this.target = spyTarget;\n\n    // set initial state\n    this.scrollTarget = element.clientHeight < element.scrollHeight\n      ? element\n      : getDocumentElement(element);\n    this.scrollHeight = getScrollHeight(this.scrollTarget);\n\n    // run an initial burst, we need to know the targets\n    this.refresh();\n\n    // create observer\n    this._observer = new PositionObserver((entries) => {\n      requestAnimationFrame(() => {\n        // istanbul ignore else @preserve\n        if (entries.some((entry) => entry.isVisible)) {\n          this.refresh();\n        }\n      });\n    }, {\n      root: this.scrollTarget,\n    });\n\n    // add event handlers\n    toggleObservers(this, true);\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return scrollspyComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return scrollspyDefaults;\n  }\n  /* eslint-enable */\n\n  // SCROLLSPY PUBLIC METHODS\n  // ========================\n  /** Updates all items. */\n  refresh = () => {\n    const { target } = this;\n    // check if target is visible and invalidate\n    // istanbul ignore if @preserve\n    if (!isHTMLElement(target) || target.offsetHeight === 0) return;\n\n    updateSpyTargets(this);\n\n    const { scrollTop, maxScroll, itemsLength, items, activeItem } = this;\n\n    if (scrollTop >= maxScroll) {\n      const newActiveItem = items[itemsLength - 1];\n\n      // istanbul ignore else @preserve\n      if (activeItem !== newActiveItem) activate(this, newActiveItem);\n      return;\n    }\n\n    const { offsets } = this;\n\n    // istanbul ignore else @preserve\n    if (activeItem && scrollTop < offsets[0] && offsets[0] > 0) {\n      this.activeItem = null;\n      // istanbul ignore else @preserve\n      if (target) clear(target);\n      return;\n    }\n\n    items.forEach((item, i) => {\n      if (\n        activeItem !== item &&\n        scrollTop >= offsets[i] &&\n        (typeof offsets[i + 1] === \"undefined\" || scrollTop < offsets[i + 1])\n      ) {\n        activate(this, item);\n      }\n    });\n  };\n\n  /** Removes `ScrollSpy` from the target element. */\n  dispose() {\n    const clone = { ...this };\n    toggleObservers(clone);\n    super.dispose();\n  }\n}\n"],"names":["scrollspyString","scrollspyComponent","scrollspySelector","scrollspyDefaults","getScrollSpyInstance","element","getInstance","scrollspyInitCallback","ScrollSpy","activateScrollSpy","createCustomEvent","updateSpyTargets","self","target","scrollTarget","options","itemsLength","scrollHeight","_observer","offset","isRoot","links","getElementsByTagName","doc","getDocument","scrollHEIGHT","href","ref","targetItem","rect","getOffsetHeight","link","getAttribute","getBoundingClientRect","toggleObservers","targets","add","getScrollHeight","clear","item","hasClass","activeClass","removeClass","activate","isHTMLElement","addClass","parents","parentItem","getDocumentBody","menuItem","parentLink","dispatchEvent","BaseComponent","config","spyTarget","querySelector","getDocumentElement","PositionObserver","entries","entry","scrollTop","maxScroll","items","activeItem","newActiveItem","offsets","i","clone"],"mappings":"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"}