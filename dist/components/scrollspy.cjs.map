{"version":3,"file":"scrollspy.cjs","sources":["../../src/strings/scrollspyString.ts","../../src/strings/scrollspyComponent.ts","../../src/components/scrollspy.ts"],"sourcesContent":["/** @type {string} */\nconst scrollspyString = 'scrollspy';\nexport default scrollspyString;\n","/** @type {string} */\nconst scrollspyComponent = 'ScrollSpy';\nexport default scrollspyComponent;\n","/* Native JavaScript for Bootstrap 5 | ScrollSpy\n------------------------------------------------ */\nimport {\n  getDocumentBody,\n  getDocumentElement,\n  getDocument,\n  getWindow,\n  removeClass,\n  hasClass,\n  addClass,\n  getElementsByTagName,\n  getAttribute,\n  querySelector,\n  isHTMLElement,\n  isWindow,\n  createCustomEvent,\n  getInstance,\n  scrollEvent,\n  passiveHandler,\n  dispatchEvent,\n  getBoundingClientRect,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport activeClass from '../strings/activeClass';\nimport scrollspyString from '../strings/scrollspyString';\nimport scrollspyComponent from '../strings/scrollspyComponent';\n\nimport BaseComponent from './base-component';\nimport { ScrollSpyOptions, ScrollSpyEvent } from '../interface/scrollspy';\n\n// SCROLLSPY PRIVATE GC\n// ====================\nconst scrollspySelector = '[data-bs-spy=\"scroll\"]';\n\nconst scrollspyDefaults: ScrollSpyOptions = {\n  offset: 10,\n  target: null,\n};\n\n/**\n * Static method which returns an existing `ScrollSpy` instance associated\n * to a target `Element`.\n */\nconst getScrollSpyInstance = (element: HTMLElement) => getInstance<ScrollSpy>(element, scrollspyComponent);\n\n/**\n * A `ScrollSpy` initialization callback.\n */\nconst scrollspyInitCallback = (element: HTMLElement) => new ScrollSpy(element);\n\n// SCROLLSPY CUSTOM EVENT\n// ======================\nconst activateScrollSpy = createCustomEvent<ScrollSpyEvent>(`activate.bs.${scrollspyString}`);\n\n// SCROLLSPY PRIVATE METHODS\n// =========================\n/**\n * Update the state of all items.\n *\n * @param self the `ScrollSpy` instance\n */\nconst updateSpyTargets = (self: ScrollSpy) => {\n  const { target, scrollTarget, options, itemsLength, scrollHeight, element } = self;\n  const { offset } = options;\n  const isWin = isWindow(scrollTarget as Node | Window);\n\n  const links = target && getElementsByTagName('A', target);\n  const scrollHEIGHT = scrollTarget ? getScrollHeight(scrollTarget) : /* istanbul ignore next */ scrollHeight;\n\n  self.scrollTop = isWin ? (scrollTarget as Window).scrollY : (scrollTarget as HTMLElement).scrollTop;\n\n  // only update items/offsets once or with each mutation\n  /* istanbul ignore else */\n  if (links && (scrollHEIGHT !== scrollHeight || itemsLength !== links.length)) {\n    let href;\n    let targetItem;\n    let rect;\n\n    // reset arrays & update\n    self.items = [];\n    self.offsets = [];\n    self.scrollHeight = scrollHEIGHT;\n    self.maxScroll = self.scrollHeight - getOffsetHeight(self);\n\n    [...links].forEach(link => {\n      href = getAttribute(link, 'href');\n      targetItem =\n        href && href.charAt(0) === '#' && href.slice(-1) !== '#' && querySelector(href, getDocument(element));\n\n      if (targetItem) {\n        self.items.push(link);\n        rect = getBoundingClientRect(targetItem);\n        self.offsets.push((isWin ? rect.top + self.scrollTop : targetItem.offsetTop) - offset);\n      }\n    });\n    self.itemsLength = self.items.length;\n  }\n};\n\n/**\n * Returns the `scrollHeight` property of the scrolling element.\n *\n * @param scrollTarget the `ScrollSpy` instance\n * @return `scrollTarget` height\n */\nconst getScrollHeight = (scrollTarget: Node | Window) => {\n  return isHTMLElement(scrollTarget as Node)\n    ? (scrollTarget as HTMLElement).scrollHeight\n    : getDocumentElement(scrollTarget as Node).scrollHeight;\n};\n\n/**\n * Returns the height property of the scrolling element.\n *\n * @param params the `ScrollSpy` instance\n */\nconst getOffsetHeight = ({ element, scrollTarget }: ScrollSpy) => {\n  return isWindow(scrollTarget as Node) ? (scrollTarget as Window).innerHeight : getBoundingClientRect(element).height;\n};\n\n/**\n * Clear all items of the target.\n *\n * @param target a single item\n */\nconst clear = (target: HTMLElement) => {\n  [...getElementsByTagName('A', target)].forEach(item => {\n    if (hasClass(item, activeClass)) removeClass(item, activeClass);\n  });\n};\n\n/**\n * Activates a new item.\n *\n * @param self the `ScrollSpy` instance\n * @param item a single item\n */\nconst activate = (self: ScrollSpy, item: HTMLElement) => {\n  const { target, element } = self;\n  if (isHTMLElement(target)) clear(target);\n  self.activeItem = item;\n  addClass(item, activeClass);\n\n  // activate all parents\n  const parents: HTMLElement[] = [];\n  let parentItem = item;\n  while (parentItem !== getDocumentBody(element)) {\n    parentItem = parentItem.parentElement as HTMLElement;\n    if (hasClass(parentItem, 'nav') || hasClass(parentItem, 'dropdown-menu')) parents.push(parentItem);\n  }\n\n  parents.forEach(menuItem => {\n    const parentLink = menuItem.previousElementSibling as HTMLElement | null;\n\n    /* istanbul ignore else */\n    if (parentLink && !hasClass(parentLink, activeClass)) {\n      addClass(parentLink, activeClass);\n    }\n  });\n\n  // dispatch\n  activateScrollSpy.relatedTarget = item;\n  dispatchEvent(element, activateScrollSpy);\n};\n\n// SCROLLSPY DEFINITION\n// ====================\n/** Returns a new `ScrollSpy` instance. */\nexport default class ScrollSpy extends BaseComponent {\n  static selector = scrollspySelector;\n  static init = scrollspyInitCallback;\n  static getInstance = getScrollSpyInstance;\n  declare options: ScrollSpyOptions;\n  declare target: HTMLElement | null;\n  declare scrollTarget: HTMLElement | Window;\n  declare scrollTop: number;\n  declare maxScroll: number;\n  declare scrollHeight: number;\n  declare activeItem: HTMLElement | null;\n  declare items: HTMLElement[];\n  declare itemsLength: number;\n  declare offsets: number[];\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ScrollSpyOptions>) {\n    super(target, config);\n\n    // initialization element & options\n    const { element, options } = this;\n\n    // additional properties\n    this.target = querySelector(options.target as HTMLElement | string, getDocument(element));\n\n    // invalidate\n    if (this.target) {\n      // set initial state\n      this.scrollTarget = element.clientHeight < element.scrollHeight ? element : getWindow(element);\n      this.scrollHeight = getScrollHeight(this.scrollTarget);\n\n      // add event handlers\n      this._toggleEventListeners(true);\n\n      this.refresh();\n    }\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return scrollspyComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return scrollspyDefaults;\n  }\n  /* eslint-enable */\n\n  // SCROLLSPY PUBLIC METHODS\n  // ========================\n  /** Updates all items. */\n  refresh = () => {\n    const { target } = this;\n\n    // check if target is visible and invalidate\n    /* istanbul ignore else */\n    if (isHTMLElement(target) && target.offsetHeight > 0) {\n      updateSpyTargets(this);\n\n      const { scrollTop, maxScroll, itemsLength, items, activeItem } = this;\n\n      if (scrollTop >= maxScroll) {\n        const newActiveItem = items[itemsLength - 1];\n\n        /* istanbul ignore else */\n        if (activeItem !== newActiveItem) {\n          activate(this, newActiveItem);\n        }\n        return;\n      }\n\n      const { offsets } = this;\n\n      if (activeItem && scrollTop < offsets[0] && offsets[0] > 0) {\n        this.activeItem = null;\n        if (target) clear(target);\n        return;\n      }\n\n      items.forEach((item, i) => {\n        if (\n          activeItem !== item &&\n          scrollTop >= offsets[i] &&\n          (typeof offsets[i + 1] === 'undefined' || scrollTop < offsets[i + 1])\n        ) {\n          activate(this, item);\n        }\n      });\n    }\n  };\n\n  /**\n   * Toggles on/off the component event listener.\n   *\n   * @param add when `true`, listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    action(this.scrollTarget as EventTarget, scrollEvent, this.refresh, passiveHandler);\n  };\n\n  /** Removes `ScrollSpy` from the target element. */\n  dispose() {\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n"],"names":["scrollspyString","scrollspyComponent","scrollspySelector","scrollspyDefaults","getScrollSpyInstance","element","getInstance","scrollspyInitCallback","ScrollSpy","activateScrollSpy","createCustomEvent","updateSpyTargets","self","target","scrollTarget","options","itemsLength","scrollHeight","offset","isWin","isWindow","links","getElementsByTagName","scrollHEIGHT","getScrollHeight","href","targetItem","rect","getOffsetHeight","link","getAttribute","querySelector","getDocument","getBoundingClientRect","isHTMLElement","getDocumentElement","clear","item","hasClass","activeClass","removeClass","activate","addClass","parents","parentItem","getDocumentBody","menuItem","parentLink","dispatchEvent","BaseComponent","config","__publicField","scrollTop","maxScroll","items","activeItem","newActiveItem","offsets","i","add","addListener","removeListener","scrollEvent","passiveHandler","getWindow"],"mappings":"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"}