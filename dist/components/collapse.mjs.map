{"version":3,"file":"collapse.mjs","sources":["../../src/strings/collapseString.ts","../../src/strings/collapseComponent.ts","../../src/components/collapse.ts"],"sourcesContent":["/** @type {string} */\nconst collapseString = 'collapse';\nexport default collapseString;\n","/** @type {string} */\nconst collapseComponent = 'Collapse';\nexport default collapseComponent;\n","/* Native JavaScript for Bootstrap 5 | Collapse\n----------------------------------------------- */\nimport {\n  getInstance,\n  setAttribute,\n  getDocument,\n  closest,\n  querySelector,\n  querySelectorAll,\n  addClass,\n  hasClass,\n  removeClass,\n  mouseclickEvent,\n  ariaExpanded,\n  emulateTransitionEnd,\n  reflow,\n  // ObjectAssign,\n  dispatchEvent,\n  setElementStyle,\n  Timer,\n  createCustomEvent,\n  noop,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport dataBsToggle from '../strings/dataBsToggle';\nimport collapsingClass from '../strings/collapsingClass';\nimport showClass from '../strings/showClass';\nimport collapseString from '../strings/collapseString';\nimport collapseComponent from '../strings/collapseComponent';\n\nimport getTargetElement from '../util/getTargetElement';\nimport BaseComponent from './base-component';\nimport type { CollapseEvent, CollapseOptions } from '../interface/collapse';\n\n// COLLAPSE GC\n// ===========\nconst collapseSelector = `.${collapseString}`;\nconst collapseToggleSelector = `[${dataBsToggle}=\"${collapseString}\"]`;\nconst collapseDefaults = { parent: null };\n\n/**\n * Static method which returns an existing `Collapse` instance associated\n * to a target `Element`.\n */\nconst getCollapseInstance = (element: HTMLElement) => getInstance<Collapse>(element, collapseComponent);\n\n/**\n * A `Collapse` initialization callback.\n */\nconst collapseInitCallback = (element: HTMLElement) => new Collapse(element);\n\n// COLLAPSE CUSTOM EVENTS\n// ======================\nconst showCollapseEvent = createCustomEvent<CollapseEvent>(`show.bs.${collapseString}`);\nconst shownCollapseEvent = createCustomEvent<CollapseEvent>(`shown.bs.${collapseString}`);\nconst hideCollapseEvent = createCustomEvent<CollapseEvent>(`hide.bs.${collapseString}`);\nconst hiddenCollapseEvent = createCustomEvent<CollapseEvent>(`hidden.bs.${collapseString}`);\n\n// COLLAPSE PRIVATE METHODS\n// ========================\n/**\n * Expand the designated `Element`.\n *\n * @param self the `Collapse` instance\n */\nconst expandCollapse = (self: Collapse) => {\n  const { element, parent, triggers } = self;\n\n  dispatchEvent(element, showCollapseEvent);\n  if (showCollapseEvent.defaultPrevented) return;\n\n  Timer.set(element, noop, 17);\n  if (parent) Timer.set(parent, noop, 17);\n\n  addClass(element, collapsingClass);\n  removeClass(element, collapseString);\n\n  setElementStyle(element, { height: `${element.scrollHeight}px` });\n\n  emulateTransitionEnd(element, () => {\n    Timer.clear(element);\n    if (parent) Timer.clear(parent);\n\n    triggers.forEach(btn => setAttribute(btn, ariaExpanded, 'true'));\n\n    removeClass(element, collapsingClass);\n    addClass(element, collapseString);\n    addClass(element, showClass);\n\n    setElementStyle(element, { height: '' });\n\n    dispatchEvent(element, shownCollapseEvent);\n  });\n};\n\n/**\n * Collapse the designated `Element`.\n *\n * @param self the `Collapse` instance\n */\nconst collapseContent = (self: Collapse) => {\n  const { element, parent, triggers } = self;\n\n  dispatchEvent(element, hideCollapseEvent);\n\n  if (hideCollapseEvent.defaultPrevented) return;\n\n  Timer.set(element, noop, 17);\n  if (parent) Timer.set(parent, noop, 17);\n\n  setElementStyle(element, { height: `${element.scrollHeight}px` });\n\n  removeClass(element, collapseString);\n  removeClass(element, showClass);\n  addClass(element, collapsingClass);\n\n  reflow(element);\n  setElementStyle(element, { height: '0px' });\n\n  emulateTransitionEnd(element, () => {\n    Timer.clear(element);\n    /* istanbul ignore else */\n    if (parent) Timer.clear(parent);\n\n    triggers.forEach(btn => setAttribute(btn, ariaExpanded, 'false'));\n\n    removeClass(element, collapsingClass);\n    addClass(element, collapseString);\n\n    setElementStyle(element, { height: '' });\n\n    dispatchEvent(element, hiddenCollapseEvent);\n  });\n};\n\n/**\n * Toggles on/off the event listener(s) of the `Collapse` instance.\n *\n * @param self the `Collapse` instance\n * @param add when `true`, the event listener is added\n */\nconst toggleCollapseHandler = (self: Collapse, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { triggers } = self;\n\n  /* istanbul ignore else */\n  if (triggers.length) {\n    triggers.forEach(btn => action(btn, mouseclickEvent, collapseClickHandler as EventListener));\n  }\n};\n\n// COLLAPSE EVENT HANDLER\n// ======================\n/**\n * Handles the `click` event for the `Collapse` instance.\n *\n * @param e the `Event` object\n */\nconst collapseClickHandler = (e: MouseEvent) => {\n  const { target } = e; // our target is `HTMLElement`\n  const trigger = target && closest(target as HTMLElement, collapseToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getCollapseInstance(element);\n  /* istanbul ignore else */\n  if (self) self.toggle();\n\n  // event target is anchor link #398\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n};\n\n// COLLAPSE DEFINITION\n// ===================\n\n/** Returns a new `Colapse` instance. */\nexport default class Collapse extends BaseComponent {\n  static selector = collapseSelector;\n  static init = collapseInitCallback;\n  static getInstance = getCollapseInstance;\n  declare options: CollapseOptions;\n  declare parent: HTMLElement | null;\n  declare triggers: HTMLElement[];\n\n  /**\n   * @param target and `Element` that matches the selector\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<CollapseOptions>) {\n    super(target, config);\n\n    // initialization element\n    const { element, options } = this;\n    const doc = getDocument(element);\n\n    // set triggering elements\n    this.triggers = [...querySelectorAll(collapseToggleSelector, doc)].filter(btn => getTargetElement(btn) === element);\n\n    // set parent accordion\n    this.parent = querySelector(options.parent as HTMLElement | string, doc) || getTargetElement(element) || null;\n\n    // add event listeners\n    toggleCollapseHandler(this, true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return collapseComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return collapseDefaults;\n  }\n\n  // COLLAPSE PUBLIC METHODS\n  // =======================\n  /** Toggles the visibility of the collapse. */\n  toggle() {\n    if (!hasClass(this.element, showClass)) this.show();\n    else this.hide();\n  }\n\n  /** Hides the collapse. */\n  hide() {\n    const { triggers, element } = this;\n    if (Timer.get(element)) return;\n\n    collapseContent(this);\n    /* istanbul ignore else */\n    if (triggers.length) {\n      triggers.forEach(btn => addClass(btn, `${collapseString}d`));\n    }\n  }\n\n  /** Shows the collapse. */\n  show() {\n    const { element, parent, triggers } = this;\n    let activeCollapse;\n    let activeCollapseInstance;\n\n    if (parent) {\n      activeCollapse = [...querySelectorAll(`.${collapseString}.${showClass}`, parent)].find(i =>\n        getCollapseInstance(i),\n      );\n      activeCollapseInstance = activeCollapse && getCollapseInstance(activeCollapse);\n    }\n\n    if ((!parent || !Timer.get(parent)) && !Timer.get(element)) {\n      if (activeCollapseInstance && activeCollapse !== element) {\n        collapseContent(activeCollapseInstance);\n        activeCollapseInstance.triggers.forEach(btn => {\n          addClass(btn, `${collapseString}d`);\n        });\n      }\n\n      expandCollapse(this);\n      /* istanbul ignore else */\n      if (triggers.length) {\n        triggers.forEach(btn => removeClass(btn, `${collapseString}d`));\n      }\n    }\n  }\n\n  /** Remove the `Collapse` component from the target `Element`. */\n  dispose() {\n    toggleCollapseHandler(this);\n\n    super.dispose();\n  }\n}\n"],"names":["collapseString","collapseComponent","collapseSelector","collapseToggleSelector","dataBsToggle","collapseDefaults","getCollapseInstance","element","getInstance","collapseInitCallback","Collapse","showCollapseEvent","createCustomEvent","shownCollapseEvent","hideCollapseEvent","hiddenCollapseEvent","expandCollapse","self","parent","triggers","dispatchEvent","Timer","noop","addClass","collapsingClass","removeClass","setElementStyle","emulateTransitionEnd","btn","setAttribute","ariaExpanded","showClass","collapseContent","reflow","toggleCollapseHandler","add","action","addListener","removeListener","mouseclickEvent","collapseClickHandler","e","target","trigger","closest","getTargetElement","BaseComponent","config","options","doc","getDocument","querySelectorAll","querySelector","hasClass","activeCollapse","activeCollapseInstance"],"mappings":"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"}