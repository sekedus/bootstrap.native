{"version":3,"file":"base-component-DHbs0JQk.mjs","sources":["../../src/version.ts","../../src/components/base-component.ts"],"sourcesContent":["import { version } from \"../package.json\";\n\nconst Version = version;\n\nexport default Version;\n","/* Native JavaScript for Bootstrap 5 | Base Component\n----------------------------------------------------- */\nimport {\n  Data,\n  isHTMLElement,\n  isString,\n  normalizeOptions,\n  ObjectKeys,\n  querySelector,\n} from \"@thednp/shorty\";\n\nimport type { BaseOptions } from \"../interface/baseComponent\";\nimport Version from \"../version\";\n\n/** Returns a new `BaseComponent` instance. */\nexport default class BaseComponent {\n  declare element: HTMLElement;\n  declare options?: BaseOptions;\n\n  /**\n   * @param target `HTMLElement` or selector string\n   * @param config component instance options\n   */\n  constructor(target: HTMLElement | string, config?: BaseOptions) {\n    let element: HTMLElement | null;\n\n    try {\n      if (isHTMLElement(target)) {\n        element = target;\n      } else if (isString(target)) {\n        element = querySelector<HTMLElement>(target);\n        // istanbul ignore else @preserve\n        if (!element) throw Error(`\"${target}\" is not a valid selector.`);\n      } else {\n        throw Error(`your target is not an instance of HTMLElement.`);\n      }\n    } catch (e) {\n      throw Error(`${this.name} Error: ${(e as Error).message}`);\n    }\n\n    const prevInstance = Data.get<typeof this>(element, this.name);\n    // istanbul ignore else @preserve\n    if (prevInstance) {\n      // remove previously attached event listeners\n      // to avoid memory leaks\n      prevInstance._toggleEventListeners();\n    }\n\n    this.element = element;\n    this.options = this.defaults && ObjectKeys(this.defaults).length\n      ? normalizeOptions(element, this.defaults, config || {}, \"bs\")\n      // istanbul ignore next @preserve\n      : {};\n\n    Data.set(element, this.name, this);\n  }\n\n  // istanbul ignore next @preserve\n  get version() {\n    return Version;\n  }\n\n  // istanbul ignore next @preserve\n  get name() {\n    return \"BaseComponent\";\n  }\n\n  // istanbul ignore next @preserve\n  get defaults() {\n    return {};\n  }\n\n  /** just to have something to extend from */\n  // istanbul ignore next @preserve coverage wise this isn't important\n  _toggleEventListeners = () => {\n    // do something to please linters\n  };\n\n  /** Removes component from target element. */\n  dispose() {\n    Data.remove<typeof this>(this.element, this.name);\n    ObjectKeys(this).forEach((prop) => {\n      delete this[prop];\n    });\n  }\n}\n"],"names":["Version","version","BaseComponent","target","config","__publicField","element","isHTMLElement","isString","querySelector","e","prevInstance","Data","ObjectKeys","normalizeOptions","prop"],"mappings":";;;;oBAEMA,IAAUC;ACahB,MAAqBC,EAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAQjC,YAAYC,GAA8BC,GAAsB;AAmDhE;AAAA;AAAA,IAAAC,EAAA,+BAAwB,MAAM;AAAA,IAAA;AAlDxB,QAAAC;AAEA,QAAA;AACE,UAAAC,EAAcJ,CAAM;AACZ,QAAAG,IAAAH;AAAA,eACDK,EAASL,CAAM,GAAG;AAC3B,QAAAG,IAAUG,EAA2BN,CAAM;AAAA,QAAA;AAE3C,YAAI,CAACG,EAAS,OAAM,MAAM,IAAIH,CAAM,4BAA4B;AAAA,MAAA;AAEhE,cAAM,MAAM,gDAAgD;AAAA,aAEvDO,GAAG;AACV,YAAM,MAAM,GAAG,KAAK,IAAI,WAAYA,EAAY,OAAO,EAAE;AAAA,IAC3D;AAEA,UAAMC,IAAeC,EAAK,IAAiBN,GAAS,KAAK,IAAI;AAAA,IAAA;AAE7D,IAAIK,KAGFA,EAAa,sBAAsB,GAGrC,KAAK,UAAUL,GACf,KAAK,UAAU,KAAK,YAAYO,EAAW,KAAK,QAAQ,EAAE,SACtDC,EAAiBR,GAAS,KAAK,UAAUF,KAAU,IAAI,IAAI,IAE3D,IAEJQ,EAAK,IAAIN,GAAS,KAAK,MAAM,IAAI;AAAA,EACnC;AAAA;AAAA,EAGA,IAAI,UAAU;AACL,WAAAN;AAAA,EACT;AAAA;AAAA,EAGA,IAAI,OAAO;AACF,WAAA;AAAA,EACT;AAAA;AAAA,EAGA,IAAI,WAAW;AACb,WAAO;EACT;AAAA;AAAA,EASA,UAAU;AACR,IAAAY,EAAK,OAAoB,KAAK,SAAS,KAAK,IAAI,GAChDC,EAAW,IAAI,EAAE,QAAQ,CAACE,MAAS;AACjC,aAAO,KAAKA,CAAI;AAAA,IAAA,CACjB;AAAA,EACH;AACF;"}