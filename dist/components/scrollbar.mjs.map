{"version":3,"file":"scrollbar.mjs","sources":["../../src/strings/fixedTopClass.ts","../../src/strings/fixedBottomClass.ts","../../src/strings/stickyTopClass.ts","../../src/strings/positionStickyClass.ts","../../src/util/scrollbar.ts"],"sourcesContent":["/**\n * Global namespace for components `fixed-top` class.\n */\nconst fixedTopClass = 'fixed-top';\nexport default fixedTopClass;\n","/**\n * Global namespace for components `fixed-bottom` class.\n */\nconst fixedBottomClass = 'fixed-bottom';\nexport default fixedBottomClass;\n","/**\n * Global namespace for components `sticky-top` class.\n */\nconst stickyTopClass = 'sticky-top';\nexport default stickyTopClass;\n","/**\n * Global namespace for components `position-sticky` class.\n */\nconst positionStickyClass = 'position-sticky';\nexport default positionStickyClass;\n","import {\n  getWindow,\n  getDocumentElement,\n  getElementStyle,\n  getDocumentBody,\n  hasClass,\n  setElementStyle,\n  getElementsByClassName,\n} from '@thednp/shorty';\n\nimport fixedTopClass from '../strings/fixedTopClass';\nimport fixedBottomClass from '../strings/fixedBottomClass';\nimport stickyTopClass from '../strings/stickyTopClass';\nimport positionStickyClass from '../strings/positionStickyClass';\n\nconst getFixedItems = (parent?: ParentNode) => [\n  ...getElementsByClassName(fixedTopClass, parent),\n  ...getElementsByClassName(fixedBottomClass, parent),\n  ...getElementsByClassName(stickyTopClass, parent),\n  ...getElementsByClassName(positionStickyClass, parent),\n  ...getElementsByClassName('is-fixed', parent),\n];\n\n/**\n * Removes *padding* and *overflow* from the `<body>`\n * and all spacing from fixed items.\n *\n * @param element the target modal/offcanvas\n */\nexport const resetScrollbar = (element?: HTMLElement) => {\n  const bd = getDocumentBody(element);\n  setElementStyle(bd, {\n    paddingRight: '',\n    overflow: '',\n  });\n\n  const fixedItems = getFixedItems(bd);\n\n  if (fixedItems.length) {\n    fixedItems.forEach(fixed => {\n      setElementStyle(fixed, {\n        paddingRight: '',\n        marginRight: '',\n      });\n    });\n  }\n};\n\n/**\n * Returns the scrollbar width if the body does overflow\n * the window.\n *\n * @param element target element\n * @returns the scrollbar width value\n */\nexport const measureScrollbar = (element: HTMLElement) => {\n  const { clientWidth } = getDocumentElement(element);\n  const { innerWidth } = getWindow(element);\n  return Math.abs(innerWidth - clientWidth);\n};\n\n/**\n * Sets the `<body>` and fixed items style when modal / offcanvas\n * is shown to the user.\n *\n * @param element the target modal/offcanvas\n * @param overflow body does overflow or not\n */\nexport const setScrollbar = (element: HTMLElement, overflow?: boolean) => {\n  const bd = getDocumentBody(element);\n  const bodyPad = parseInt(getElementStyle(bd, 'paddingRight'), 10);\n  const isOpen = getElementStyle(bd, 'overflow') === 'hidden';\n  const sbWidth = isOpen && bodyPad ? 0 : measureScrollbar(element);\n  const fixedItems = getFixedItems(bd);\n\n  /* istanbul ignore else */\n  if (overflow) {\n    setElementStyle(bd, {\n      overflow: 'hidden',\n      paddingRight: `${bodyPad + sbWidth}px`,\n    });\n\n    /* istanbul ignore else */\n    if (fixedItems.length) {\n      fixedItems.forEach(fixed => {\n        const itemPadValue = getElementStyle(fixed, 'paddingRight');\n        fixed.style.paddingRight = `${parseInt(itemPadValue, 10) + sbWidth}px`;\n        /* istanbul ignore else */\n        if ([stickyTopClass, positionStickyClass].some(c => hasClass(fixed, c))) {\n          const itemMValue = getElementStyle(fixed, 'marginRight');\n          fixed.style.marginRight = `${parseInt(itemMValue, 10) - sbWidth}px`;\n        }\n      });\n    }\n  }\n};\n"],"names":["fixedTopClass","fixedBottomClass","stickyTopClass","positionStickyClass","getFixedItems","parent","getElementsByClassName","resetScrollbar","element","bd","getDocumentBody","setElementStyle","fixedItems","fixed","measureScrollbar","clientWidth","getDocumentElement","innerWidth","getWindow","setScrollbar","overflow","bodyPad","getElementStyle","sbWidth","itemPadValue","hasClass","c","itemMValue"],"mappings":";AAGA,MAAMA,IAAgB,aCAhBC,IAAmB,gBCAnBC,IAAiB,cCAjBC,IAAsB,mBCYtBC,IAAgB,CAACC,MAAwB;AAAA,EAC7C,GAAGC,EAAuBN,GAAeK,CAAM;AAAA,EAC/C,GAAGC,EAAuBL,GAAkBI,CAAM;AAAA,EAClD,GAAGC,EAAuBJ,GAAgBG,CAAM;AAAA,EAChD,GAAGC,EAAuBH,GAAqBE,CAAM;AAAA,EACrD,GAAGC,EAAuB,YAAYD,CAAM;AAC9C,GAQaE,IAAiB,CAACC,MAA0B;AACjD,QAAAC,IAAKC,EAAgBF,CAAO;AAClCG,EAAAA,EAAgBF,GAAI;AAAA,IAClB,cAAc;AAAA,IACd,UAAU;AAAA,EAAA,CACX;AAEK,QAAAG,IAAaR,EAAcK,CAAE;AAEnC,EAAIG,EAAW,UACbA,EAAW,QAAQ,CAASC,MAAA;AAC1BF,IAAAA,EAAgBE,GAAO;AAAA,MACrB,cAAc;AAAA,MACd,aAAa;AAAA,IAAA,CACd;AAAA,EAAA,CACF;AAEL,GASaC,IAAmB,CAACN,MAAyB;AACxD,QAAM,EAAE,aAAAO,EAAA,IAAgBC,EAAmBR,CAAO,GAC5C,EAAE,YAAAS,EAAA,IAAeC,EAAUV,CAAO;AACjC,SAAA,KAAK,IAAIS,IAAaF,CAAW;AAC1C,GASaI,IAAe,CAACX,GAAsBY,MAAuB;AAClE,QAAAX,IAAKC,EAAgBF,CAAO,GAC5Ba,IAAU,SAASC,EAAgBb,GAAI,cAAc,GAAG,EAAE,GAE1Dc,IADSD,EAAgBb,GAAI,UAAU,MAAM,YACzBY,IAAU,IAAIP,EAAiBN,CAAO,GAC1DI,IAAaR,EAAcK,CAAE;AAGnC,EAAIW,MACFT,EAAgBF,GAAI;AAAA,IAClB,UAAU;AAAA,IACV,cAAc,GAAGY,IAAUE;AAAA,EAAA,CAC5B,GAGGX,EAAW,UACbA,EAAW,QAAQ,CAASC,MAAA;AACpB,UAAAW,IAAeF,EAAgBT,GAAO,cAAc;AAGtD,QAFJA,EAAM,MAAM,eAAe,GAAG,SAASW,GAAc,EAAE,IAAID,OAEvD,CAACrB,GAAgBC,CAAmB,EAAE,KAAK,OAAKsB,EAASZ,GAAOa,CAAC,CAAC,GAAG;AACjE,YAAAC,IAAaL,EAAgBT,GAAO,aAAa;AACvD,MAAAA,EAAM,MAAM,cAAc,GAAG,SAASc,GAAY,EAAE,IAAIJ;AAAA,IAC1D;AAAA,EAAA,CACD;AAGP;"}