{"version":3,"file":"offcanvas.mjs","sources":["../../src/strings/offcanvasComponent.ts","../../src/components/offcanvas.ts"],"sourcesContent":["/** @type {string} */\nconst offcanvasComponent = 'Offcanvas';\nexport default offcanvasComponent;\n","/* Native JavaScript for Bootstrap 5 | OffCanvas\n------------------------------------------------ */\nimport {\n  ariaHidden,\n  addClass,\n  hasClass,\n  closest,\n  querySelectorAll,\n  querySelector,\n  removeAttribute,\n  isFunction,\n  setAttribute,\n  keyEscape,\n  keydownEvent,\n  mouseclickEvent,\n  ariaModal,\n  // ObjectAssign,\n  emulateTransitionEnd,\n  dispatchEvent,\n  getElementTransitionDuration,\n  getDocumentBody,\n  getDocumentElement,\n  getDocument,\n  removeClass,\n  setElementStyle,\n  createCustomEvent,\n  focus,\n  getInstance,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport dataBsDismiss from '../strings/dataBsDismiss';\nimport dataBsToggle from '../strings/dataBsToggle';\nimport showClass from '../strings/showClass';\nimport offcanvasString from '../strings/offcanvasString';\nimport offcanvasComponent from '../strings/offcanvasComponent';\n\nimport getTargetElement from '../util/getTargetElement';\nimport isVisible from '../util/isVisible';\nimport { setScrollbar } from '../util/scrollbar';\nimport { hasPopup } from '../util/popupContainer';\nimport {\n  overlay,\n  offcanvasActiveSelector,\n  toggleOverlayType,\n  appendOverlay,\n  showOverlay,\n  hideOverlay,\n  getCurrentOpen,\n  removeOverlay,\n} from '../util/backdrop';\nimport BaseComponent from './base-component';\nimport { OffcanvasOptions, OffcanvasEvent } from '../interface/offcanvas';\n\n// OFFCANVAS PRIVATE GC\n// ====================\nconst offcanvasSelector = `.${offcanvasString}`;\nconst offcanvasToggleSelector = `[${dataBsToggle}=\"${offcanvasString}\"]`;\nconst offcanvasDismissSelector = `[${dataBsDismiss}=\"${offcanvasString}\"]`;\nconst offcanvasTogglingClass = `${offcanvasString}-toggling`;\n\nconst offcanvasDefaults = {\n  backdrop: true, // boolean\n  keyboard: true, // boolean\n  scroll: false, // boolean\n};\n\n/**\n * Static method which returns an existing `Offcanvas` instance associated\n * to a target `Element`.\n */\nconst getOffcanvasInstance = (element: HTMLElement) => getInstance<Offcanvas>(element, offcanvasComponent);\n\n/**\n * An `Offcanvas` initialization callback.\n */\nconst offcanvasInitCallback = (element: HTMLElement) => new Offcanvas(element);\n\n// OFFCANVAS CUSTOM EVENTS\n// =======================\nconst showOffcanvasEvent = createCustomEvent<OffcanvasEvent>(`show.bs.${offcanvasString}`);\nconst shownOffcanvasEvent = createCustomEvent<OffcanvasEvent>(`shown.bs.${offcanvasString}`);\nconst hideOffcanvasEvent = createCustomEvent<OffcanvasEvent>(`hide.bs.${offcanvasString}`);\nconst hiddenOffcanvasEvent = createCustomEvent<OffcanvasEvent>(`hidden.bs.${offcanvasString}`);\n\n// OFFCANVAS PRIVATE METHODS\n// =========================\n/**\n * Sets additional style for the `<body>` and other elements\n * when showing an offcanvas to the user.\n *\n * @param self the `Offcanvas` instance\n */\nconst setOffCanvasScrollbar = (self: Offcanvas) => {\n  const { element } = self;\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  setScrollbar(element, clientHeight !== scrollHeight);\n};\n\n/**\n * Toggles on/off the `click` event listeners.\n *\n * @param self the `Offcanvas` instance\n * @param add when *true*, listeners are added\n */\nconst toggleOffcanvasEvents = (self: Offcanvas, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  self.triggers.forEach(btn => action(btn, mouseclickEvent, offcanvasTriggerHandler as EventListener));\n};\n\n/**\n * Toggles on/off the listeners of the events that close the offcanvas.\n *\n * @param self the `Offcanvas` instance\n * @param add when *true* listeners are added\n */\nconst toggleOffCanvasDismiss = (self: Offcanvas, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const doc = getDocument(self.element);\n  action(doc, keydownEvent, offcanvasKeyDismissHandler as EventListener);\n  action(doc, mouseclickEvent, offcanvasDismissHandler as EventListener);\n};\n\n/**\n * Executes before showing the offcanvas.\n *\n * @param self the `Offcanvas` instance\n */\nconst beforeOffcanvasShow = (self: Offcanvas) => {\n  const { element, options } = self;\n\n  /* istanbul ignore else */\n  if (!options.scroll) {\n    setOffCanvasScrollbar(self);\n    setElementStyle(getDocumentBody(element), { overflow: 'hidden' });\n  }\n\n  addClass(element, offcanvasTogglingClass);\n  addClass(element, showClass);\n  setElementStyle(element, { visibility: 'visible' });\n\n  emulateTransitionEnd(element, () => showOffcanvasComplete(self));\n};\n\n/**\n * Executes before hiding the offcanvas.\n *\n * @param self the `Offcanvas` instance\n * @param callback the hide callback\n */\nconst beforeOffcanvasHide = (self: Offcanvas, callback?: () => void) => {\n  const { element, options } = self;\n  const currentOpen = getCurrentOpen(element);\n\n  element.blur();\n\n  if (!currentOpen && options.backdrop && hasClass(overlay, showClass)) {\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => hideOffcanvasComplete(self, callback));\n  } else hideOffcanvasComplete(self, callback);\n};\n\n// OFFCANVAS EVENT HANDLERS\n// ========================\n/**\n * Handles the `click` event listeners.\n *\n * @param e the `Event` object\n */\nconst offcanvasTriggerHandler = (e: MouseEvent) => {\n  const trigger = closest(e.target as HTMLElement, offcanvasToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getOffcanvasInstance(element);\n\n  /* istanbul ignore else */\n  if (self) {\n    self.relatedTarget = trigger;\n    self.toggle();\n    /* istanbul ignore else */\n    if (trigger && trigger.tagName === 'A') {\n      e.preventDefault();\n    }\n  }\n};\n\n/**\n * Handles the event listeners that close the offcanvas.\n *\n * @param e the `Event` object\n */\nconst offcanvasDismissHandler = (e: MouseEvent) => {\n  const { target } = e;\n  const element = querySelector(offcanvasActiveSelector, getDocument(target as Node));\n  const offCanvasDismiss = querySelector(offcanvasDismissSelector, element as HTMLElement | undefined);\n  const self = element && getOffcanvasInstance(element);\n\n  /* istanbul ignore next: must have a filter */\n  if (!self) return;\n\n  const { options, triggers } = self;\n  const { backdrop } = options;\n  const trigger = closest(target as HTMLElement, offcanvasToggleSelector);\n  const selection = getDocument(element).getSelection();\n\n  if (overlay.contains(target as HTMLElement) && backdrop === 'static') return;\n\n  /* istanbul ignore else */\n  if (\n    !(selection && selection.toString().length) &&\n    ((!element.contains(target as HTMLElement) &&\n      backdrop &&\n      /* istanbul ignore next */ (!trigger || triggers.includes(target as HTMLElement))) ||\n      (offCanvasDismiss && offCanvasDismiss.contains(target as HTMLElement)))\n  ) {\n    self.relatedTarget = offCanvasDismiss && offCanvasDismiss.contains(target as HTMLElement) ? offCanvasDismiss : null;\n    self.hide();\n  }\n\n  /* istanbul ignore next */\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n};\n\n/**\n * Handles the `keydown` event listener for offcanvas\n * to hide it when user type the `ESC` key.\n *\n * @param e the `Event` object\n */\nconst offcanvasKeyDismissHandler = ({ code, target }: KeyboardEvent) => {\n  const element = querySelector(offcanvasActiveSelector, getDocument(target as Node));\n  const self = element && getOffcanvasInstance(element);\n\n  /* istanbul ignore next: must filter */\n  if (!self) return;\n\n  /* istanbul ignore else */\n  if (self.options.keyboard && code === keyEscape) {\n    self.relatedTarget = null;\n    self.hide();\n  }\n};\n\n/**\n * Handles the `transitionend` when showing the offcanvas.\n *\n * @param self the `Offcanvas` instance\n */\nconst showOffcanvasComplete = (self: Offcanvas) => {\n  const { element } = self;\n  removeClass(element, offcanvasTogglingClass);\n\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, 'true');\n  setAttribute(element, 'role', 'dialog');\n\n  dispatchEvent(element, shownOffcanvasEvent);\n\n  toggleOffCanvasDismiss(self, true);\n  focus(element);\n};\n\n/**\n * Handles the `transitionend` when hiding the offcanvas.\n *\n * @param self the `Offcanvas` instance\n * @param callback the hide callback\n */\nconst hideOffcanvasComplete = (self: Offcanvas, callback?: () => void) => {\n  const { element, triggers } = self;\n\n  setAttribute(element, ariaHidden, 'true');\n  removeAttribute(element, ariaModal);\n  removeAttribute(element, 'role');\n  setElementStyle(element, { visibility: '' });\n\n  const visibleTrigger = showOffcanvasEvent.relatedTarget || triggers.find(isVisible);\n  /* istanbul ignore else */\n  if (visibleTrigger) focus(visibleTrigger as HTMLElement);\n\n  removeOverlay(element);\n\n  dispatchEvent(element, hiddenOffcanvasEvent);\n  removeClass(element, offcanvasTogglingClass);\n\n  // must check for open instances\n  if (!getCurrentOpen(element)) {\n    toggleOffCanvasDismiss(self);\n  }\n  // callback\n  if (isFunction(callback)) callback();\n};\n\n// OFFCANVAS DEFINITION\n// ====================\n/** Returns a new `Offcanvas` instance. */\nexport default class Offcanvas extends BaseComponent {\n  static selector = offcanvasSelector;\n  static init = offcanvasInitCallback;\n  static getInstance = getOffcanvasInstance;\n  declare options: OffcanvasOptions;\n  declare triggers: HTMLElement[];\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target usually an `.offcanvas` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<OffcanvasOptions>) {\n    super(target, config);\n\n    // instance element\n    const { element } = this;\n\n    // all the triggering buttons\n    this.triggers = [...querySelectorAll(offcanvasToggleSelector, getDocument(element))].filter(\n      btn => getTargetElement(btn) === element,\n    );\n\n    // additional instance property\n    this.relatedTarget = null;\n\n    // attach event listeners\n    toggleOffcanvasEvents(this, true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return offcanvasComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return offcanvasDefaults;\n  }\n\n  // OFFCANVAS PUBLIC METHODS\n  // ========================\n  /** Shows or hides the offcanvas from the user. */\n  toggle() {\n    if (hasClass(this.element, showClass)) this.hide();\n    else this.show();\n  }\n\n  /** Shows the offcanvas to the user. */\n  show() {\n    const { element, options, relatedTarget } = this;\n    let overlayDelay = 0;\n\n    if (hasClass(element, showClass)) return;\n\n    showOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n    shownOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n    dispatchEvent(element, showOffcanvasEvent);\n    if (showOffcanvasEvent.defaultPrevented) return;\n\n    // we elegantly hide any opened modal/offcanvas\n    const currentOpen = getCurrentOpen(element);\n    if (currentOpen && currentOpen !== element) {\n      const this1 = getOffcanvasInstance(currentOpen);\n      const that1 =\n        this1 ||\n        /* istanbul ignore next */ getInstance<typeof BaseComponent & { hide: () => void }>(currentOpen, 'Modal');\n      if (that1) that1.hide();\n    }\n\n    if (options.backdrop) {\n      if (!hasPopup(overlay)) {\n        appendOverlay(true);\n      } else {\n        toggleOverlayType();\n      }\n\n      overlayDelay = getElementTransitionDuration(overlay);\n      showOverlay();\n\n      setTimeout(() => beforeOffcanvasShow(this), overlayDelay);\n    } else {\n      beforeOffcanvasShow(this);\n      /* istanbul ignore else */\n      if (currentOpen && hasClass(overlay, showClass)) {\n        hideOverlay();\n      }\n    }\n  }\n\n  /**\n   * Hides the offcanvas from the user.\n   *\n   * @param callback when `true` it will skip animation\n   */\n  hide(callback?: () => void) {\n    const { element, relatedTarget } = this;\n\n    if (!hasClass(element, showClass)) return;\n\n    hideOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n    hiddenOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n    dispatchEvent(element, hideOffcanvasEvent);\n    if (hideOffcanvasEvent.defaultPrevented) return;\n\n    addClass(element, offcanvasTogglingClass);\n    removeClass(element, showClass);\n\n    if (!callback) {\n      emulateTransitionEnd(element, () => beforeOffcanvasHide(this, callback));\n    } else beforeOffcanvasHide(this, callback);\n  }\n\n  /** Removes the `Offcanvas` from the target element. */\n  dispose() {\n    toggleOffcanvasEvents(this);\n    this.hide(() => super.dispose());\n  }\n}\n"],"names":["offcanvasComponent","offcanvasSelector","offcanvasString","offcanvasToggleSelector","dataBsToggle","offcanvasDismissSelector","dataBsDismiss","offcanvasTogglingClass","offcanvasDefaults","getOffcanvasInstance","element","getInstance","offcanvasInitCallback","Offcanvas","showOffcanvasEvent","createCustomEvent","shownOffcanvasEvent","hideOffcanvasEvent","hiddenOffcanvasEvent","setOffCanvasScrollbar","self","clientHeight","scrollHeight","getDocumentElement","setScrollbar","toggleOffcanvasEvents","add","action","addListener","removeListener","btn","mouseclickEvent","offcanvasTriggerHandler","toggleOffCanvasDismiss","doc","getDocument","keydownEvent","offcanvasKeyDismissHandler","offcanvasDismissHandler","beforeOffcanvasShow","options","setElementStyle","getDocumentBody","addClass","showClass","emulateTransitionEnd","showOffcanvasComplete","beforeOffcanvasHide","callback","currentOpen","getCurrentOpen","hasClass","overlay","hideOverlay","hideOffcanvasComplete","e","trigger","closest","getTargetElement","target","querySelector","offcanvasActiveSelector","offCanvasDismiss","triggers","backdrop","selection","code","keyEscape","removeClass","removeAttribute","ariaHidden","setAttribute","ariaModal","dispatchEvent","focus","visibleTrigger","isVisible","removeOverlay","isFunction","BaseComponent","config","querySelectorAll","relatedTarget","overlayDelay","that1","hasPopup","toggleOverlayType","appendOverlay","getElementTransitionDuration","showOverlay"],"mappings":"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"}