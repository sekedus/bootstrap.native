{"version":3,"file":"toast.mjs","sources":["../../src/strings/toastString.ts","../../src/strings/toastComponent.ts","../../src/components/toast.ts"],"sourcesContent":["/** @type {string} */\nconst toastString = 'toast';\nexport default toastString;\n","/** @type {string} */\nconst toastComponent = 'Toast';\nexport default toastComponent;\n","/* Native JavaScript for Bootstrap 5 | Toast\n-------------------------------------------- */\nimport {\n  addClass,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focusinEvent,\n  focusoutEvent,\n  getDocument,\n  getInstance,\n  hasClass,\n  mouseclickEvent,\n  mouseenterEvent,\n  mouseleaveEvent,\n  querySelector,\n  querySelectorAll,\n  reflow,\n  removeClass,\n  Timer,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport dataBsDismiss from '../strings/dataBsDismiss';\nimport dataBsToggle from '../strings/dataBsToggle';\nimport toastString from '../strings/toastString';\nimport toastComponent from '../strings/toastComponent';\nimport getTargetElement from '../util/getTargetElement';\nimport BaseComponent from './base-component';\nimport { ToastEvent, ToastOptions } from '../interface/toast';\n\n// TOAST PRIVATE GC\n// ================\nconst toastSelector = `.${toastString}`;\nconst toastDismissSelector = `[${dataBsDismiss}=\"${toastString}\"]`;\nconst toastToggleSelector = `[${dataBsToggle}=\"${toastString}\"]`;\nconst showingClass = 'showing';\n/** @deprecated */\nconst hideClass = 'hide';\n\nconst toastDefaults = {\n  animation: true,\n  autohide: true,\n  delay: 5000,\n};\n\n/**\n * Static method which returns an existing `Toast` instance associated\n * to a target `Element`.\n */\nconst getToastInstance = (element: HTMLElement) => getInstance<Toast>(element, toastComponent);\n\n/**\n * A `Toast` initialization callback.\n */\nconst toastInitCallback = (element: HTMLElement) => new Toast(element);\n\n// TOAST CUSTOM EVENTS\n// ===================\nconst showToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(`show.bs.${toastString}`);\nconst shownToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(`shown.bs.${toastString}`);\nconst hideToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(`hide.bs.${toastString}`);\nconst hiddenToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(`hidden.bs.${toastString}`);\n\n// TOAST PRIVATE METHODS\n// =====================\n/**\n * Executes after the toast is shown to the user.\n *\n * @param self the `Toast` instance\n */\nconst showToastComplete = (self: Toast) => {\n  const { element, options } = self;\n  removeClass(element, showingClass);\n  Timer.clear(element, showingClass);\n\n  dispatchEvent(element, shownToastEvent);\n  // istanbul ignore else @preserve\n  if (options.autohide) {\n    Timer.set(element, () => self.hide(), options.delay, toastString);\n  }\n};\n\n/**\n * Executes after the toast is hidden to the user.\n *\n * @param self the `Toast` instance\n */\nconst hideToastComplete = (self: Toast) => {\n  const { element } = self;\n  removeClass(element, showingClass);\n  removeClass(element, showClass);\n  addClass(element, hideClass); // B/C\n  Timer.clear(element, toastString);\n  dispatchEvent(element, hiddenToastEvent);\n};\n\n/**\n * Executes before hiding the toast.\n *\n * @param self the `Toast` instance\n */\nconst hideToast = (self: Toast) => {\n  const { element, options } = self;\n  addClass(element, showingClass);\n\n  if (options.animation) {\n    reflow(element);\n    emulateTransitionEnd(element, () => hideToastComplete(self));\n  } else {\n    hideToastComplete(self);\n  }\n};\n\n/**\n * Executes before showing the toast.\n *\n * @param self the `Toast` instance\n */\nconst showToast = (self: Toast) => {\n  const { element, options } = self;\n  Timer.set(\n    element,\n    () => {\n      removeClass(element, hideClass); // B/C\n      reflow(element);\n      addClass(element, showClass);\n      addClass(element, showingClass);\n\n      if (options.animation) {\n        emulateTransitionEnd(element, () => showToastComplete(self));\n      } else {\n        showToastComplete(self);\n      }\n    },\n    17,\n    showingClass,\n  );\n};\n\n// TOAST EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for toast.\n *\n * @param e the `Event` object\n */\nconst toastClickHandler = (e: Event) => {\n  const { target } = e;\n\n  const trigger = target && closest(target as HTMLElement, toastToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getToastInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    // istanbul ignore else @preserve\n    if (trigger && trigger.tagName === 'A') e.preventDefault();\n    self.relatedTarget = trigger;\n    self.show();\n  }\n};\n\n/**\n * Executes when user interacts with the toast without closing it,\n * usually by hovering or focusing it.\n *\n * @param e the `Toast` instance\n */\nconst interactiveToastHandler = (e: MouseEvent) => {\n  const element = e.target as HTMLElement;\n  const self = getToastInstance(element);\n  const { type, relatedTarget } = e;\n\n  // istanbul ignore else @preserve: a solid filter is required\n  if (self && element !== relatedTarget && !element.contains(relatedTarget as Node)) {\n    if ([mouseenterEvent, focusinEvent].includes(type)) {\n      Timer.clear(element, toastString);\n    } else {\n      Timer.set(element, () => self.hide(), self.options.delay, toastString);\n    }\n  }\n};\n\n// TOAST DEFINITION\n// ================\n/** Creates a new `Toast` instance. */\nexport default class Toast extends BaseComponent {\n  static selector = toastSelector;\n  static init = toastInitCallback;\n  static getInstance = getToastInstance;\n  declare options: ToastOptions;\n  declare dismiss: HTMLElement | null;\n  declare triggers: HTMLElement[];\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target the target `.toast` element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ToastOptions>) {\n    super(target, config);\n    const { element, options } = this;\n\n    // set fadeClass, the options.animation will override the markup\n    if (options.animation && !hasClass(element, fadeClass)) {\n      addClass(element, fadeClass);\n    } else if (!options.animation && hasClass(element, fadeClass)) {\n      removeClass(element, fadeClass);\n    }\n\n    // dismiss button\n    this.dismiss = querySelector(toastDismissSelector, element);\n\n    // toast can have multiple triggering elements\n    this.triggers = [...querySelectorAll(toastToggleSelector, getDocument(element))].filter(\n      btn => getTargetElement(btn) === element,\n    );\n\n    // add event listener\n    this._toggleEventListeners(true);\n  }\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return toastComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return toastDefaults;\n  }\n  /**\n   * Returns *true* when toast is visible.\n   */\n  get isShown() {\n    return hasClass(this.element, showClass);\n  }\n\n  // TOAST PUBLIC METHODS\n  // ====================\n  /** Shows the toast. */\n  show = () => {\n    const { element, isShown } = this;\n\n    // istanbul ignore else @preserve\n    if (element && !isShown) {\n      dispatchEvent(element, showToastEvent);\n      if (!showToastEvent.defaultPrevented) {\n        showToast(this);\n      }\n    }\n  };\n\n  /** Hides the toast. */\n  hide = () => {\n    const { element, isShown } = this;\n\n    // istanbul ignore else @preserve\n    if (element && isShown) {\n      dispatchEvent(element, hideToastEvent);\n      if (!hideToastEvent.defaultPrevented) {\n        hideToast(this);\n      }\n    }\n  };\n\n  /**\n   * Toggles on/off the `click` event listener.\n   *\n   * @param add when `true`, it will add the listener\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { element, triggers, dismiss, options, hide } = this;\n\n    // istanbul ignore else @preserve\n    if (dismiss) {\n      action(dismiss, mouseclickEvent, hide);\n    }\n\n    // istanbul ignore else @preserve\n    if (options.autohide) {\n      [focusinEvent, focusoutEvent, mouseenterEvent, mouseleaveEvent].forEach(e =>\n        action(element, e, interactiveToastHandler),\n      );\n    }\n    // istanbul ignore else @preserve\n    if (triggers.length) {\n      triggers.forEach(btn => action(btn, mouseclickEvent, toastClickHandler));\n    }\n  };\n\n  /** Removes the `Toast` component from the target element. */\n  dispose() {\n    const { element, isShown } = this;\n    this._toggleEventListeners();\n    Timer.clear(element, toastString);\n\n    if (isShown) {\n      removeClass(element, showClass);\n    }\n    super.dispose();\n  }\n}\n"],"names":["toastString","toastComponent","toastSelector","toastDismissSelector","dataBsDismiss","toastToggleSelector","dataBsToggle","showingClass","hideClass","toastDefaults","getToastInstance","element","getInstance","toastInitCallback","Toast","showToastEvent","createCustomEvent","shownToastEvent","hideToastEvent","hiddenToastEvent","showToastComplete","self","options","removeClass","Timer","dispatchEvent","hideToastComplete","showClass","addClass","hideToast","reflow","emulateTransitionEnd","showToast","toastClickHandler","e","target","trigger","closest","getTargetElement","interactiveToastHandler","type","relatedTarget","mouseenterEvent","focusinEvent","BaseComponent","config","__publicField","isShown","add","action","addListener","removeListener","triggers","dismiss","hide","mouseclickEvent","focusoutEvent","mouseleaveEvent","btn","hasClass","fadeClass","querySelector","querySelectorAll","getDocument"],"mappings":"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"}