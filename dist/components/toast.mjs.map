{"version":3,"file":"toast.mjs","sources":["../../src/strings/toastString.ts","../../src/strings/toastComponent.ts","../../src/components/toast.ts"],"sourcesContent":["/** @type {string} */\nconst toastString = 'toast';\nexport default toastString;\n","/** @type {string} */\nconst toastComponent = 'Toast';\nexport default toastComponent;\n","/* Native JavaScript for Bootstrap 5 | Toast\n-------------------------------------------- */\nimport {\n  mouseclickEvent,\n  closest,\n  removeClass,\n  hasClass,\n  addClass,\n  focusoutEvent,\n  focusinEvent,\n  mouseleaveEvent,\n  mouseenterEvent,\n  createCustomEvent,\n  getDocument,\n  Timer,\n  getInstance,\n  reflow,\n  // ObjectAssign,\n  emulateTransitionEnd,\n  dispatchEvent,\n  querySelectorAll,\n  querySelector,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport dataBsDismiss from '../strings/dataBsDismiss';\nimport dataBsToggle from '../strings/dataBsToggle';\nimport toastString from '../strings/toastString';\nimport toastComponent from '../strings/toastComponent';\nimport getTargetElement from '../util/getTargetElement';\nimport BaseComponent from './base-component';\nimport { ToastOptions, ToastEvent } from '../interface/toast';\n\n// TOAST PRIVATE GC\n// ================\nconst toastSelector = `.${toastString}`;\nconst toastDismissSelector = `[${dataBsDismiss}=\"${toastString}\"]`;\nconst toastToggleSelector = `[${dataBsToggle}=\"${toastString}\"]`;\nconst showingClass = 'showing';\n/** @deprecated */\nconst hideClass = 'hide';\n\nconst toastDefaults = {\n  animation: true,\n  autohide: true,\n  delay: 5000,\n};\n\n/**\n * Static method which returns an existing `Toast` instance associated\n * to a target `Element`.\n */\nconst getToastInstance = (element: HTMLElement) => getInstance<Toast>(element, toastComponent);\n\n/**\n * A `Toast` initialization callback.\n */\nconst toastInitCallback = (element: HTMLElement) => new Toast(element);\n\n// TOAST CUSTOM EVENTS\n// ===================\nconst showToastEvent = createCustomEvent<ToastEvent>(`show.bs.${toastString}`);\nconst shownToastEvent = createCustomEvent<ToastEvent>(`shown.bs.${toastString}`);\nconst hideToastEvent = createCustomEvent<ToastEvent>(`hide.bs.${toastString}`);\nconst hiddenToastEvent = createCustomEvent<ToastEvent>(`hidden.bs.${toastString}`);\n\n// TOAST PRIVATE METHODS\n// =====================\n/**\n * Executes after the toast is shown to the user.\n *\n * @param self the `Toast` instance\n */\nconst showToastComplete = (self: Toast) => {\n  const { element, options } = self;\n  removeClass(element, showingClass);\n  Timer.clear(element, showingClass);\n\n  dispatchEvent(element, shownToastEvent);\n  /* istanbul ignore else */\n  if (options.autohide) {\n    Timer.set(element, () => self.hide(), options.delay, toastString);\n  }\n};\n\n/**\n * Executes after the toast is hidden to the user.\n *\n * @param self the `Toast` instance\n */\nconst hideToastComplete = (self: Toast) => {\n  const { element } = self;\n  removeClass(element, showingClass);\n  removeClass(element, showClass);\n  addClass(element, hideClass); // B/C\n  Timer.clear(element, toastString);\n  dispatchEvent(element, hiddenToastEvent);\n};\n\n/**\n * Executes before hiding the toast.\n *\n * @param self the `Toast` instance\n */\nconst hideToast = (self: Toast) => {\n  const { element, options } = self;\n  addClass(element, showingClass);\n\n  if (options.animation) {\n    reflow(element);\n    emulateTransitionEnd(element, () => hideToastComplete(self));\n  } else {\n    hideToastComplete(self);\n  }\n};\n\n/**\n * Executes before showing the toast.\n *\n * @param self the `Toast` instance\n */\nconst showToast = (self: Toast) => {\n  const { element, options } = self;\n  Timer.set(\n    element,\n    () => {\n      removeClass(element, hideClass); // B/C\n      reflow(element);\n      addClass(element, showClass);\n      addClass(element, showingClass);\n\n      if (options.animation) {\n        emulateTransitionEnd(element, () => showToastComplete(self));\n      } else {\n        showToastComplete(self);\n      }\n    },\n    17,\n    showingClass,\n  );\n};\n\n/**\n * Toggles on/off the `click` event listener.\n *\n * @param self the `Toast` instance\n * @param add when `true`, it will add the listener\n */\nconst toggleToastHandlers = (self: Toast, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element, triggers, dismiss, options } = self;\n\n  /* istanbul ignore else */\n  if (dismiss) {\n    action(dismiss, mouseclickEvent, self.hide);\n  }\n\n  /* istanbul ignore else */\n  if (options.autohide) {\n    [focusinEvent, focusoutEvent, mouseenterEvent, mouseleaveEvent].forEach(e =>\n      action(element, e, interactiveToastHandler as EventListener),\n    );\n  }\n  /* istanbul ignore else */\n  if (triggers.length) {\n    triggers.forEach(btn => action(btn, mouseclickEvent, toastClickHandler));\n  }\n};\n\n// TOAST EVENT HANDLERS\n// ====================\n/**\n * Executes after the instance has been disposed.\n *\n * @param {Toast} self the `Toast` instance\n */\nconst completeDisposeToast = (self: Toast) => {\n  Timer.clear(self.element, toastString);\n  toggleToastHandlers(self);\n};\n\n/**\n * Handles the `click` event listener for toast.\n *\n * @param e the `Event` object\n */\nconst toastClickHandler = (e: Event) => {\n  const { target } = e;\n\n  const trigger = target && closest(target as HTMLElement, toastToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getToastInstance(element);\n  if (!self) return;\n\n  /* istanbul ignore else */\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n  self.relatedTarget = trigger;\n  self.show();\n};\n\n/**\n * Executes when user interacts with the toast without closing it,\n * usually by hovering or focusing it.\n *\n * @param e the `Toast` instance\n */\nconst interactiveToastHandler = (e: MouseEvent) => {\n  const element = e.target as HTMLElement;\n  const self = getToastInstance(element);\n  const { type, relatedTarget } = e;\n\n  /* istanbul ignore next: a solid filter is required */\n  if (!self || element === relatedTarget || element.contains(relatedTarget as Node)) return;\n\n  if ([mouseenterEvent, focusinEvent].includes(type)) {\n    Timer.clear(element, toastString);\n  } else {\n    Timer.set(element, () => self.hide(), self.options.delay, toastString);\n  }\n};\n\n// TOAST DEFINITION\n// ================\n/** Creates a new `Toast` instance. */\nexport default class Toast extends BaseComponent {\n  static selector = toastSelector;\n  static init = toastInitCallback;\n  static getInstance = getToastInstance;\n  declare options: ToastOptions;\n  declare dismiss: HTMLElement | null;\n  declare triggers: HTMLElement[];\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target the target `.toast` element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ToastOptions>) {\n    super(target, config);\n    const { element, options } = this;\n\n    // set fadeClass, the options.animation will override the markup\n    if (options.animation && !hasClass(element, fadeClass)) addClass(element, fadeClass);\n    else if (!options.animation && hasClass(element, fadeClass)) removeClass(element, fadeClass);\n\n    // dismiss button\n    this.dismiss = querySelector(toastDismissSelector, element);\n\n    // toast can have multiple triggering elements\n    this.triggers = [...querySelectorAll(toastToggleSelector, getDocument(element))].filter(\n      btn => getTargetElement(btn) === element,\n    );\n\n    // bind\n    this.show = this.show.bind(this);\n    this.hide = this.hide.bind(this);\n\n    // add event listener\n    toggleToastHandlers(this, true);\n  }\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return toastComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return toastDefaults;\n  }\n  /**\n   * Returns *true* when toast is visible.\n   */\n  get isShown() {\n    return hasClass(this.element, showClass);\n  }\n\n  // TOAST PUBLIC METHODS\n  // ====================\n  /** Shows the toast. */\n  show() {\n    const { element, isShown } = this;\n\n    /* istanbul ignore else */\n    if (element && !isShown) {\n      dispatchEvent(element, showToastEvent);\n      if (showToastEvent.defaultPrevented) return;\n\n      showToast(this);\n    }\n  }\n\n  /** Hides the toast. */\n  hide() {\n    const { element, isShown } = this;\n\n    /* istanbul ignore else */\n    if (element && isShown) {\n      dispatchEvent(element, hideToastEvent);\n      if (hideToastEvent.defaultPrevented) return;\n      hideToast(this);\n    }\n  }\n\n  /** Removes the `Toast` component from the target element. */\n  dispose() {\n    const { element, isShown } = this;\n\n    /* istanbul ignore else */\n    if (isShown) {\n      removeClass(element, showClass);\n    }\n\n    completeDisposeToast(this);\n\n    super.dispose();\n  }\n}\n"],"names":["toastString","toastComponent","toastSelector","toastDismissSelector","dataBsDismiss","toastToggleSelector","dataBsToggle","showingClass","hideClass","toastDefaults","getToastInstance","element","getInstance","toastInitCallback","Toast","showToastEvent","createCustomEvent","shownToastEvent","hideToastEvent","hiddenToastEvent","showToastComplete","self","options","removeClass","Timer","dispatchEvent","hideToastComplete","showClass","addClass","hideToast","reflow","emulateTransitionEnd","showToast","toggleToastHandlers","add","action","addListener","removeListener","triggers","dismiss","mouseclickEvent","focusinEvent","focusoutEvent","mouseenterEvent","mouseleaveEvent","e","interactiveToastHandler","btn","toastClickHandler","completeDisposeToast","target","trigger","closest","getTargetElement","type","relatedTarget","BaseComponent","config","hasClass","fadeClass","querySelector","querySelectorAll","getDocument","isShown"],"mappings":"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"}