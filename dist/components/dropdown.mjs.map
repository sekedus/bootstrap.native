{"version":3,"file":"dropdown.mjs","sources":["../../src/strings/dropdownComponent.ts","../../src/strings/dropdownMenuClass.ts","../../src/util/isEmptyAnchor.ts","../../src/components/dropdown.ts"],"sourcesContent":["/** @type {string} */\nconst dropdownComponent = 'Dropdown';\nexport default dropdownComponent;\n","/**\n * Global namespace for `.dropdown-menu`.\n */\nconst dropdownMenuClass = 'dropdown-menu';\nexport default dropdownMenuClass;\n","import { hasAttribute, closest, getAttribute } from '@thednp/shorty';\n\n/**\n * Checks if an *event.target* or its parent has an `href=\"#\"` value.\n * We need to prevent jumping around onclick, don't we?\n *\n * @param element the target element\n * @returns the query result\n */\nconst isEmptyAnchor = (element: HTMLElement) => {\n  // `EventTarget` must be `HTMLElement`\n  const parentAnchor = closest(element, 'A');\n  return (\n    (element.tagName === 'A' &&\n      // anchor href starts with #\n      hasAttribute(element, 'href') &&\n      (getAttribute(element, 'href') as string).slice(-1) === '#') ||\n    // OR a child of an anchor with href starts with #\n    (parentAnchor &&\n      hasAttribute(parentAnchor, 'href') &&\n      (getAttribute(parentAnchor, 'href') as string).slice(-1) === '#')\n  );\n};\nexport default isEmptyAnchor;\n","/* Native JavaScript for Bootstrap 5 | Dropdown\n----------------------------------------------- */\nimport {\n  ariaExpanded,\n  focusEvent,\n  keydownEvent,\n  setAttribute,\n  keyEscape,\n  keyArrowDown,\n  keyArrowUp,\n  mouseclickEvent,\n  resizeEvent,\n  scrollEvent,\n  keyupEvent,\n  dispatchEvent,\n  setElementStyle,\n  getInstance,\n  ObjectAssign,\n  passiveHandler,\n  getElementsByClassName,\n  closest,\n  getAttribute,\n  getDocument,\n  getBoundingClientRect,\n  getDocumentElement,\n  getElementStyle,\n  isRTL,\n  removeClass,\n  hasClass,\n  addClass,\n  createCustomEvent,\n  focus,\n  getWindow,\n  CSS4Declaration,\n  isHTMLElement,\n  mousedownEvent,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport showClass from '../strings/showClass';\nimport dataBsToggle from '../strings/dataBsToggle';\nimport dropdownClasses from '../strings/dropdownClasses';\nimport dropdownComponent from '../strings/dropdownComponent';\nimport dropdownMenuClass from '../strings/dropdownMenuClass';\n\nimport isEmptyAnchor from '../util/isEmptyAnchor';\nimport BaseComponent from './base-component';\nimport type { DropdownEvent, DropdownOptions } from '../interface/dropdown';\n\n// DROPDOWN PRIVATE GC\n// ===================\nconst [dropdownString, dropupString, dropstartString, dropendString] = dropdownClasses;\nconst dropdownSelector = `[${dataBsToggle}=\"${dropdownString}\"]`;\n\n/**\n * Static method which returns an existing `Dropdown` instance associated\n * to a target `Element`.\n */\nconst getDropdownInstance = (element: HTMLElement) => getInstance<Dropdown>(element, dropdownComponent);\n\n/**\n * A `Dropdown` initialization callback.\n */\nconst dropdownInitCallback = (element: HTMLElement) => new Dropdown(element);\n\n// DROPDOWN PRIVATE GC\n// ===================\n// const dropdownMenuStartClass = `${dropdownMenuClass}-start`;\nconst dropdownMenuEndClass = `${dropdownMenuClass}-end`;\nconst verticalClass = [dropdownString, dropupString];\nconst horizontalClass = [dropstartString, dropendString];\nconst menuFocusTags = ['A', 'BUTTON'];\n\nconst dropdownDefaults = {\n  offset: 5, // [number] 5(px)\n  display: 'dynamic', // [dynamic|static]\n};\n\n// DROPDOWN CUSTOM EVENTS\n// ======================\nconst showDropdownEvent = createCustomEvent<DropdownEvent>(`show.bs.${dropdownString}`);\nconst shownDropdownEvent = createCustomEvent<DropdownEvent>(`shown.bs.${dropdownString}`);\nconst hideDropdownEvent = createCustomEvent<DropdownEvent>(`hide.bs.${dropdownString}`);\nconst hiddenDropdownEvent = createCustomEvent<DropdownEvent>(`hidden.bs.${dropdownString}`);\nconst updatedDropdownEvent = createCustomEvent<DropdownEvent>(`updated.bs.${dropdownString}`);\n\n// DROPDOWN PRIVATE METHODS\n// ========================\n/**\n * Apply specific style or class names to a `.dropdown-menu` to automatically\n * accomodate the layout and the page scroll.\n *\n * @param self the `Dropdown` instance\n */\nconst styleDropdown = (self: Dropdown) => {\n  const { element, menu, parentElement, options } = self;\n  const { offset } = options;\n\n  // don't apply any style on mobile view\n  /* istanbul ignore else: this test requires a navbar */\n  if (getElementStyle(menu, 'position') !== 'static') {\n    const RTL = isRTL(element);\n    // const menuStart = hasClass(menu, dropdownMenuStartClass);\n    const menuEnd = hasClass(menu, dropdownMenuEndClass);\n\n    // reset menu offset and position\n    const resetProps = ['margin', 'top', 'bottom', 'left', 'right'];\n    resetProps.forEach(p => {\n      // menu.style[p] = '';\n      const style: { [key: string]: string } = {};\n      style[p] = '';\n      setElementStyle(menu, style);\n    });\n\n    // set initial position class\n    // take into account .btn-group parent as .dropdown\n    // this requires navbar/btn-group/input-group\n    let positionClass =\n      dropdownClasses.find(c => hasClass(parentElement, c)) ||\n      /* istanbul ignore next: fallback position */ dropdownString;\n\n    const dropdownMargin: { [key: string]: number[] } = {\n      dropdown: [offset, 0, 0],\n      dropup: [0, 0, offset],\n      dropstart: RTL ? [-1, 0, 0, offset] : [-1, offset, 0],\n      dropend: RTL ? [-1, offset, 0] : [-1, 0, 0, offset],\n    };\n\n    const dropdownPosition: { [key: string]: Partial<CSS4Declaration> } = {\n      dropdown: { top: '100%' },\n      dropup: { top: 'auto', bottom: '100%' },\n      dropstart: RTL ? { left: '100%', right: 'auto' } : { left: 'auto', right: '100%' },\n      dropend: RTL ? { left: 'auto', right: '100%' } : { left: '100%', right: 'auto' },\n      menuStart: RTL ? { right: '0', left: 'auto' } : { right: 'auto', left: '0' },\n      menuEnd: RTL ? { right: 'auto', left: '0' } : { right: '0', left: 'auto' },\n    };\n\n    const { offsetWidth: menuWidth, offsetHeight: menuHeight } = menu;\n\n    const { clientWidth, clientHeight } = getDocumentElement(element);\n    const {\n      left: targetLeft,\n      top: targetTop,\n      width: targetWidth,\n      height: targetHeight,\n    } = getBoundingClientRect(element);\n\n    // dropstart | dropend\n    const leftFullExceed = targetLeft - menuWidth - offset < 0;\n    // dropend\n    const rightFullExceed = targetLeft + menuWidth + targetWidth + offset >= clientWidth;\n    // dropstart | dropend\n    const bottomExceed = targetTop + menuHeight + offset >= clientHeight;\n    // dropdown\n    const bottomFullExceed = targetTop + menuHeight + targetHeight + offset >= clientHeight;\n    // dropup\n    const topExceed = targetTop - menuHeight - offset < 0;\n    // dropdown / dropup\n    const leftExceed = ((!RTL && menuEnd) || (RTL && !menuEnd)) && targetLeft + targetWidth - menuWidth < 0;\n    const rightExceed = ((RTL && menuEnd) || (!RTL && !menuEnd)) && targetLeft + menuWidth >= clientWidth;\n\n    // recompute position\n    // handle RTL as well\n    if (horizontalClass.includes(positionClass) && leftFullExceed && rightFullExceed) {\n      positionClass = dropdownString;\n    }\n    if (positionClass === dropstartString && (!RTL ? leftFullExceed : rightFullExceed)) {\n      positionClass = dropendString;\n    }\n    if (positionClass === dropendString && (RTL ? leftFullExceed : rightFullExceed)) {\n      positionClass = dropstartString;\n    }\n    if (positionClass === dropupString && topExceed && !bottomFullExceed) {\n      positionClass = dropdownString;\n    }\n    if (positionClass === dropdownString && bottomFullExceed && !topExceed) {\n      positionClass = dropupString;\n    }\n\n    // override position for horizontal classes\n    if (horizontalClass.includes(positionClass) && bottomExceed) {\n      ObjectAssign(dropdownPosition[positionClass], {\n        top: 'auto',\n        bottom: 0,\n      });\n    }\n\n    // override position for vertical classes\n    if (verticalClass.includes(positionClass) && (leftExceed || rightExceed)) {\n      // don't realign when menu is wider than window\n      // in both RTL and non-RTL readability is KING\n      let posAjust: { left: 'auto' | number; right: 'auto' | number } | undefined = { left: 'auto', right: 'auto' };\n      if (!leftExceed && rightExceed && !RTL) posAjust = { left: 'auto', right: 0 };\n      if (leftExceed && !rightExceed && RTL) posAjust = { left: 0, right: 'auto' };\n      if (posAjust) ObjectAssign(dropdownPosition[positionClass], posAjust);\n    }\n\n    const margins: number[] = dropdownMargin[positionClass];\n    setElementStyle(menu, {\n      ...dropdownPosition[positionClass],\n      margin: `${margins.map(x => (x ? `${x}px` : x)).join(' ')}`,\n    });\n\n    // override dropdown-menu-start | dropdown-menu-end\n    if (verticalClass.includes(positionClass) && menuEnd) {\n      /* istanbul ignore else */\n      if (menuEnd) {\n        const endAdjust =\n          (!RTL && leftExceed) || (RTL && rightExceed) ? 'menuStart' : /* istanbul ignore next */ 'menuEnd';\n        setElementStyle(menu, dropdownPosition[endAdjust]);\n      }\n    }\n    // trigger updated event\n    dispatchEvent(parentElement, updatedDropdownEvent);\n  }\n};\n\n/**\n * Returns an `Array` of focusable items in the given dropdown-menu.\n *\n * @param menu the target menu\n * @returns all children of the dropdown menu\n */\nconst getMenuItems = (menu: HTMLElement) => {\n  return [...menu.children]\n    .map(c => {\n      if (c && menuFocusTags.includes(c.tagName)) return c;\n      const { firstElementChild } = c;\n      if (firstElementChild && menuFocusTags.includes(firstElementChild.tagName)) {\n        return firstElementChild;\n      }\n      return null;\n    })\n    .filter(c => c);\n};\n\n/**\n * Toggles on/off the listeners for the events that close the dropdown\n * as well as event that request a new position for the dropdown.\n *\n * @param {Dropdown} self the `Dropdown` instance\n */\nconst toggleDropdownDismiss = (self: Dropdown) => {\n  const { element, options } = self;\n  const action = self.open ? addListener : removeListener;\n  const doc = getDocument(element);\n\n  action(doc, mouseclickEvent, dropdownDismissHandler);\n  action(doc, focusEvent, dropdownDismissHandler);\n  action(doc, keydownEvent, dropdownPreventScroll);\n  action(doc, keyupEvent, dropdownKeyHandler);\n\n  /* istanbul ignore else */\n  if (options.display === 'dynamic') {\n    [scrollEvent, resizeEvent].forEach(ev => {\n      action(getWindow(element), ev, dropdownLayoutHandler, passiveHandler);\n    });\n  }\n};\n\n/**\n * Returns the currently open `.dropdown` element.\n *\n * @param element target\n * @returns the query result\n */\nconst getCurrentOpenDropdown = (element: HTMLElement): HTMLElement | undefined => {\n  const currentParent = [...dropdownClasses, 'btn-group', 'input-group']\n    .map(c => getElementsByClassName(`${c} ${showClass}`, getDocument(element)))\n    .find(x => x.length);\n\n  if (currentParent && currentParent.length) {\n    return [...(currentParent[0].children as HTMLCollectionOf<HTMLElement>)].find(x =>\n      dropdownClasses.some(c => c === getAttribute(x, dataBsToggle)),\n    );\n  }\n  return undefined;\n};\n\n// DROPDOWN EVENT HANDLERS\n// =======================\n/**\n * Handles the `click` event for the `Dropdown` instance.\n *\n * @param e event object\n */\nconst dropdownDismissHandler = (e: MouseEvent) => {\n  const { target, type } = e;\n\n  /* istanbul ignore else */\n  if (target && isHTMLElement(target)) {\n    // some weird FF bug #409\n    const element = getCurrentOpenDropdown(target);\n    const self = element && getDropdownInstance(element);\n\n    /* istanbul ignore else */\n    if (self) {\n      const { parentElement, menu } = self;\n\n      const isForm =\n        parentElement &&\n        parentElement.contains(target) &&\n        (target.tagName === 'form' || closest(target, 'form') !== null);\n\n      if ([mouseclickEvent, mousedownEvent].includes(type) && isEmptyAnchor(target)) {\n        e.preventDefault();\n      }\n\n      /* istanbul ignore else */\n      if (!isForm && type !== focusEvent && target !== element && target !== menu) {\n        self.hide();\n      }\n    }\n  }\n};\n\n/**\n * Handles `click` event listener for `Dropdown`.\n *\n * @param e event object\n */\nconst dropdownClickHandler = (e: MouseEvent) => {\n  const { target } = e;\n  const element = target && closest(target as HTMLElement, dropdownSelector);\n  const self = element && getDropdownInstance(element);\n\n  /* istanbul ignore else */\n  if (self) {\n    e.stopPropagation();\n    self.toggle();\n    /* istanbul ignore else */\n    if (element && isEmptyAnchor(element)) e.preventDefault();\n  }\n};\n\n/**\n * Prevents scroll when dropdown-menu is visible.\n *\n * @param e event object\n */\nconst dropdownPreventScroll = (e: KeyboardEvent) => {\n  /* istanbul ignore else */\n  if ([keyArrowDown, keyArrowUp].includes(e.code)) e.preventDefault();\n};\n\n/**\n * Handles keyboard `keydown` events for `Dropdown`.\n *\n * @param e keyboard key\n */\nfunction dropdownKeyHandler(this: HTMLElement, e: KeyboardEvent) {\n  const { code } = e;\n  const element = getCurrentOpenDropdown(this);\n  const self = element && getDropdownInstance(element);\n  const { activeElement } = (element && getDocument(element)) as Document;\n\n  /* istanbul ignore else */\n  if (self && activeElement) {\n    const { menu, open } = self;\n    const menuItems = getMenuItems(menu);\n\n    // arrow up & down\n    if (menuItems && menuItems.length && [keyArrowDown, keyArrowUp].includes(code)) {\n      let idx = menuItems.indexOf(activeElement);\n      /* istanbul ignore else */\n      if (activeElement === element) {\n        idx = 0;\n      } else if (code === keyArrowUp) {\n        idx = idx > 1 ? idx - 1 : 0;\n      } else if (code === keyArrowDown) {\n        idx = idx < menuItems.length - 1 ? idx + 1 : idx;\n      }\n      /* istanbul ignore else */\n      if (menuItems[idx]) focus(menuItems[idx] as HTMLElement);\n    }\n\n    if (keyEscape === code && open) {\n      self.toggle();\n      focus(element);\n    }\n  }\n}\n\n/** Handles dropdown layout changes during resize / scroll. */\nfunction dropdownLayoutHandler(this: HTMLElement) {\n  const element = getCurrentOpenDropdown(this);\n  const self = element && getDropdownInstance(element);\n\n  /* istanbul ignore else */\n  if (self && self.open) styleDropdown(self);\n}\n\n// DROPDOWN DEFINITION\n// ===================\n/** Returns a new Dropdown instance. */\nexport default class Dropdown extends BaseComponent {\n  static selector = dropdownSelector;\n  static init = dropdownInitCallback;\n  static getInstance = getDropdownInstance;\n  declare options: DropdownOptions;\n  declare open: boolean;\n  declare parentElement: HTMLElement;\n  declare menu: HTMLElement;\n\n  /**\n   * @param target Element or string selector\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<DropdownOptions>) {\n    super(target, config);\n\n    // initialization element\n    const { parentElement } = this.element;\n    const [menu] = getElementsByClassName(dropdownMenuClass, parentElement as ParentNode);\n\n    // invalidate when dropdown-menu is missing\n    if (menu) {\n      // set targets\n      this.parentElement = parentElement as HTMLElement;\n      this.menu = menu;\n\n      // add event listener\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return dropdownComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return dropdownDefaults;\n  }\n\n  // DROPDOWN PUBLIC METHODS\n  // =======================\n  /** Shows/hides the dropdown menu to the user. */\n  toggle() {\n    if (this.open) this.hide();\n    else this.show();\n  }\n\n  /** Shows the dropdown menu to the user. */\n  show() {\n    const { element, open, menu, parentElement } = this;\n\n    /* istanbul ignore else */\n    if (!open) {\n      const currentElement = getCurrentOpenDropdown(element);\n      const currentInstance = currentElement && getDropdownInstance(currentElement);\n      if (currentInstance) currentInstance.hide();\n\n      // dispatch event\n      [showDropdownEvent, shownDropdownEvent, updatedDropdownEvent].forEach(e => {\n        e.relatedTarget = element;\n      });\n\n      dispatchEvent(parentElement, showDropdownEvent);\n      if (!showDropdownEvent.defaultPrevented) {\n        addClass(menu, showClass);\n        addClass(parentElement, showClass);\n        setAttribute(element, ariaExpanded, 'true');\n\n        // change menu position\n        styleDropdown(this);\n\n        this.open = !open;\n\n        focus(element); // focus the element\n        toggleDropdownDismiss(this);\n        dispatchEvent(parentElement, shownDropdownEvent);\n      }\n    }\n  }\n\n  /** Hides the dropdown menu from the user. */\n  hide() {\n    const { element, open, menu, parentElement } = this;\n\n    /* istanbul ignore else */\n    if (open) {\n      [hideDropdownEvent, hiddenDropdownEvent].forEach(e => {\n        e.relatedTarget = element;\n      });\n\n      dispatchEvent(parentElement, hideDropdownEvent);\n      if (!hideDropdownEvent.defaultPrevented) {\n        removeClass(menu, showClass);\n        removeClass(parentElement, showClass);\n        setAttribute(element, ariaExpanded, 'false');\n\n        this.open = !open;\n        // only re-attach handler if the instance is not disposed\n        toggleDropdownDismiss(this);\n        dispatchEvent(parentElement, hiddenDropdownEvent);\n      }\n    }\n  }\n\n  /**\n   * Toggles on/off the `click` event listener of the `Dropdown`.\n   *\n   * @param add when `true`, it will add the event listener\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    action(this.element, mouseclickEvent, dropdownClickHandler);\n  };\n\n  /** Removes the `Dropdown` component from the target element. */\n  dispose() {\n    if (this.open) this.hide();\n\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n"],"names":["dropdownComponent","dropdownMenuClass","isEmptyAnchor","element","parentAnchor","closest","hasAttribute","getAttribute","dropdownString","dropupString","dropstartString","dropendString","dropdownClasses","dropdownSelector","dataBsToggle","getDropdownInstance","getInstance","dropdownInitCallback","Dropdown","dropdownMenuEndClass","verticalClass","horizontalClass","menuFocusTags","dropdownDefaults","showDropdownEvent","createCustomEvent","shownDropdownEvent","hideDropdownEvent","hiddenDropdownEvent","updatedDropdownEvent","styleDropdown","self","menu","parentElement","options","offset","getElementStyle","RTL","isRTL","menuEnd","hasClass","p","style","setElementStyle","positionClass","c","dropdownMargin","dropdownPosition","menuWidth","menuHeight","clientWidth","clientHeight","getDocumentElement","targetLeft","targetTop","targetWidth","targetHeight","getBoundingClientRect","leftFullExceed","rightFullExceed","bottomExceed","bottomFullExceed","topExceed","leftExceed","rightExceed","ObjectAssign","posAjust","margins","x","dispatchEvent","getMenuItems","firstElementChild","toggleDropdownDismiss","action","addListener","removeListener","doc","getDocument","mouseclickEvent","dropdownDismissHandler","focusEvent","keydownEvent","dropdownPreventScroll","keyupEvent","dropdownKeyHandler","scrollEvent","resizeEvent","ev","getWindow","dropdownLayoutHandler","passiveHandler","getCurrentOpenDropdown","currentParent","getElementsByClassName","showClass","e","target","type","isHTMLElement","isForm","mousedownEvent","dropdownClickHandler","keyArrowDown","keyArrowUp","code","activeElement","open","menuItems","idx","focus","keyEscape","BaseComponent","config","__publicField","add","currentElement","currentInstance","addClass","setAttribute","ariaExpanded","removeClass"],"mappings":"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"}