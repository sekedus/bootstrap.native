{"version":3,"file":"backdrop.mjs","sources":["../../src/util/backdrop.ts"],"sourcesContent":["import {\n  createElement,\n  getDocument,\n  reflow,\n  removeClass,\n  hasClass,\n  addClass,\n  querySelector,\n  getDocumentBody,\n} from '@thednp/shorty';\n\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport modalString from '../strings/modalString';\nimport offcanvasString from '../strings/offcanvasString';\nimport { resetScrollbar } from './scrollbar';\nimport { appendPopup, removePopup } from './popupContainer';\n\nconst backdropString = 'backdrop';\nconst modalBackdropClass = `${modalString}-${backdropString}`;\nconst offcanvasBackdropClass = `${offcanvasString}-${backdropString}`;\nconst modalActiveSelector = `.${modalString}.${showClass}`;\nconst offcanvasActiveSelector = `.${offcanvasString}.${showClass}`;\n\n// any document would suffice\nconst overlay = createElement('div') as HTMLElement;\n\n/**\n * Returns the current active modal / offcancas element.\n *\n * @param element the context element\n * @returns the requested element\n */\nconst getCurrentOpen = (element?: HTMLElement): HTMLElement | null => {\n  return querySelector(`${modalActiveSelector},${offcanvasActiveSelector}`, getDocument(element));\n};\n\n/**\n * Toogles from a Modal overlay to an Offcanvas, or vice-versa.\n *\n * @param isModal\n */\nconst toggleOverlayType = (isModal?: boolean) => {\n  const targetClass = isModal ? modalBackdropClass : offcanvasBackdropClass;\n  [modalBackdropClass, offcanvasBackdropClass].forEach(c => {\n    removeClass(overlay, c);\n  });\n  addClass(overlay, targetClass);\n};\n\n/**\n * Append the overlay to DOM.\n *\n * @param element\n * @param hasFade\n * @param isModal\n */\nconst appendOverlay = (element: HTMLElement, hasFade: boolean, isModal?: boolean) => {\n  toggleOverlayType(isModal);\n  appendPopup(overlay, getDocumentBody(element));\n  if (hasFade) addClass(overlay, fadeClass);\n};\n\n/**\n * Shows the overlay to the user.\n */\nconst showOverlay = () => {\n  if (!hasClass(overlay, showClass)) {\n    addClass(overlay, showClass);\n    reflow(overlay);\n  }\n};\n\n/**\n * Hides the overlay from the user.\n */\nconst hideOverlay = () => {\n  removeClass(overlay, showClass);\n};\n\n/**\n * Removes the overlay from DOM.\n *\n * @param element\n */\nconst removeOverlay = (element?: HTMLElement): void => {\n  if (!getCurrentOpen(element)) {\n    removeClass(overlay, fadeClass);\n    removePopup(overlay, getDocumentBody(element));\n    resetScrollbar(element);\n  }\n};\n\nexport {\n  overlay,\n  offcanvasBackdropClass,\n  modalBackdropClass,\n  modalActiveSelector,\n  offcanvasActiveSelector,\n  toggleOverlayType,\n  appendOverlay,\n  showOverlay,\n  hideOverlay,\n  getCurrentOpen,\n  removeOverlay,\n};\n"],"names":["backdropString","modalBackdropClass","modalString","offcanvasBackdropClass","offcanvasString","modalActiveSelector","showClass","offcanvasActiveSelector","overlay","createElement","getCurrentOpen","element","querySelector","getDocument","toggleOverlayType","isModal","targetClass","c","removeClass","addClass","appendOverlay","hasFade","appendPopup","getDocumentBody","fadeClass","showOverlay","hasClass","reflow","hideOverlay","removeOverlay","removePopup","resetScrollbar"],"mappings":";;;;;;AAkBA,MAAMA,IAAiB,YACjBC,IAAqB,GAAGC,KAAeF,KACvCG,IAAyB,GAAGC,KAAmBJ,KAC/CK,IAAsB,IAAIH,KAAeI,KACzCC,IAA0B,IAAIH,KAAmBE,KAGjDE,IAAUC,EAAc,KAAK,GAQ7BC,IAAiB,CAACC,MACfC,EAAc,GAAGP,KAAuBE,KAA2BM,EAAYF,CAAO,CAAC,GAQ1FG,IAAoB,CAACC,MAAsB;AACzC,QAAAC,IAAcD,IAAUd,IAAqBE;AACnD,GAACF,GAAoBE,CAAsB,EAAE,QAAQ,CAAKc,MAAA;AACxDC,IAAAA,EAAYV,GAASS,CAAC;AAAA,EAAA,CACvB,GACDE,EAASX,GAASQ,CAAW;AAC/B,GASMI,IAAgB,CAACT,GAAsBU,GAAkBN,MAAsB;AACnF,EAAAD,EAAkBC,CAAO,GACbO,EAAAd,GAASe,EAAgBZ,CAAO,CAAC,GACzCU,KAASF,EAASX,GAASgB,CAAS;AAC1C,GAKMC,IAAc,MAAM;AACxB,EAAKC,EAASlB,GAASF,CAAS,MAC9Ba,EAASX,GAASF,CAAS,GAC3BqB,EAAOnB,CAAO;AAElB,GAKMoB,IAAc,MAAM;AACxBV,EAAAA,EAAYV,GAASF,CAAS;AAChC,GAOMuB,IAAgB,CAAClB,MAAgC;AACjD,EAACD,EAAeC,CAAO,MACzBO,EAAYV,GAASgB,CAAS,GAClBM,EAAAtB,GAASe,EAAgBZ,CAAO,CAAC,GAC7CoB,EAAepB,CAAO;AAE1B;"}