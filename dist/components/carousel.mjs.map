{"version":3,"file":"carousel.mjs","sources":["../../src/strings/carouselString.ts","../../src/strings/carouselComponent.ts","../../src/components/carousel.ts"],"sourcesContent":["/** @type {string} */\nconst carouselString = 'carousel';\nexport default carouselString;\n","/** @type {string} */\nconst carouselComponent = 'Carousel';\nexport default carouselComponent;\n","/* Native JavaScript for Bootstrap 5 | Carousel\n----------------------------------------------- */\nimport {\n  createCustomEvent,\n  getInstance,\n  dispatchEvent,\n  ObjectAssign,\n  emulateTransitionEnd,\n  passiveHandler,\n  reflow,\n  Timer,\n  getAttribute,\n  getElementsByClassName,\n  querySelectorAll,\n  querySelector,\n  closest,\n  isHTMLElement,\n  isRTL,\n  isElementInScrollRange,\n  getElementTransitionDuration,\n  getDocument,\n  pointerupEvent,\n  pointermoveEvent,\n  pointerdownEvent,\n  keyArrowRight,\n  keyArrowLeft,\n  keydownEvent,\n  mouseclickEvent,\n  mouseleaveEvent,\n  mouseenterEvent,\n  touchstartEvent,\n  dragstartEvent,\n  addClass,\n  hasClass,\n  removeClass,\n  matches,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport activeClass from '../strings/activeClass';\nimport dataBsTarget from '../strings/dataBsTarget';\nimport carouselString from '../strings/carouselString';\nimport carouselComponent from '../strings/carouselComponent';\nimport getTargetElement from '../util/getTargetElement';\nimport BaseComponent from './base-component';\nimport type { CarouselEvent, CarouselOptions } from '../interface/carousel';\n\n// CAROUSEL PRIVATE GC\n// ===================\nconst carouselSelector = `[data-bs-ride=\"${carouselString}\"]`;\nconst carouselItem = `${carouselString}-item`;\nconst dataBsSlideTo = 'data-bs-slide-to';\nconst dataBsSlide = 'data-bs-slide';\nconst pausedClass = 'paused';\n\nconst carouselDefaults: CarouselOptions = {\n  pause: 'hover',\n  keyboard: false,\n  touch: true,\n  interval: 5000,\n};\n\n/**\n * Static method which returns an existing `Carousel` instance associated\n * to a target `Element`.\n */\nconst getCarouselInstance = (element: HTMLElement) => getInstance<Carousel>(element, carouselComponent);\n\n/**\n * A `Carousel` initialization callback.\n */\nconst carouselInitCallback = (element: HTMLElement) => new Carousel(element);\n\nlet startX = 0;\nlet currentX = 0;\nlet endX = 0;\n\n// CAROUSEL CUSTOM EVENTS\n// ======================\nconst carouselSlideEvent = createCustomEvent<CarouselEvent>(`slide.bs.${carouselString}`);\nconst carouselSlidEvent = createCustomEvent<CarouselEvent>(`slid.bs.${carouselString}`);\n\n// CAROUSEL EVENT HANDLERS\n// =======================\n/**\n * The `transitionend` event listener of the `Carousel`.\n *\n * @param self the `Carousel` instance\n */\nconst carouselTransitionEndHandler = (self: Carousel) => {\n  const { index, direction, element, slides, options } = self;\n\n  /* istanbul ignore else */\n  if (self.isAnimating) {\n    const activeItem = getActiveIndex(self);\n    const orientation = direction === 'left' ? 'next' : 'prev';\n    const directionClass = direction === 'left' ? 'start' : 'end';\n\n    addClass(slides[index], activeClass);\n    removeClass(slides[index], `${carouselItem}-${orientation}`);\n    removeClass(slides[index], `${carouselItem}-${directionClass}`);\n\n    removeClass(slides[activeItem], activeClass);\n    removeClass(slides[activeItem], `${carouselItem}-${directionClass}`);\n\n    dispatchEvent(element, carouselSlidEvent);\n    Timer.clear(element, dataBsSlide);\n\n    // must check if a previous instance is disposed\n    if (self.cycle && !getDocument(element).hidden && options.interval && !self.isPaused) {\n      self.cycle();\n    }\n  }\n};\n\n/**\n * Handles the `mouseenter` events when *options.pause*\n * is set to `hover`.\n */\nfunction carouselPauseHandler(this: HTMLElement) {\n  // const element = this;\n  const self = getCarouselInstance(this);\n  /* istanbul ignore else */\n  if (self && !self.isPaused && !Timer.get(this, pausedClass)) {\n    addClass(this, pausedClass);\n  }\n}\n\n/**\n * Handles the `mouseleave` events when *options.pause*\n * is set to `hover`.\n *\n */\nfunction carouselResumeHandler(this: HTMLElement) {\n  // const element = this;\n  const self = getCarouselInstance(this);\n  /* istanbul ignore else */\n  if (self && self.isPaused && !Timer.get(this, pausedClass)) {\n    self.cycle();\n  }\n}\n\n/**\n * Handles the `click` event for the `Carousel` indicators.\n *\n * @param e the `Event` object\n */\nfunction carouselIndicatorHandler(this: HTMLElement, e: MouseEvent) {\n  e.preventDefault();\n  // const indicator = this;\n  const element = (closest(this, carouselSelector) || getTargetElement(this)) as HTMLElement;\n  const self = getCarouselInstance(element);\n\n  if (self && !self.isAnimating) {\n    const newIndex = +(getAttribute(this, dataBsSlideTo) || /* istanbul ignore next */ 0);\n\n    if (\n      this &&\n      !hasClass(this, activeClass) && // event target is not active\n      !Number.isNaN(newIndex)\n    ) {\n      // AND has the specific attribute\n      self.to(newIndex); // do the slide\n    }\n  }\n}\n\n/**\n * Handles the `click` event for the `Carousel` arrows.\n *\n * @param e the `Event` object\n */\nfunction carouselControlsHandler(this: HTMLElement, e: MouseEvent) {\n  e.preventDefault();\n  const element = closest(this, carouselSelector) || (getTargetElement(this) as HTMLElement);\n  const self = getCarouselInstance(element);\n\n  if (self && !self.isAnimating) {\n    const orientation = getAttribute(this, dataBsSlide);\n\n    /* istanbul ignore else */\n    if (orientation === 'next') {\n      self.next();\n    } else if (orientation === 'prev') {\n      self.prev();\n    }\n  }\n}\n\n/**\n * Handles the keyboard `keydown` event for the visible `Carousel` elements.\n *\n * @param e the `Event` object\n */\nconst carouselKeyHandler = ({ code, target }: KeyboardEvent & { target: Node }) => {\n  const doc = getDocument(target);\n  const [element] = [...querySelectorAll(carouselSelector, doc)].filter(x => isElementInScrollRange(x));\n  const self = getCarouselInstance(element);\n\n  /* istanbul ignore next */\n  if (self && !self.isAnimating && !/textarea|input/i.test(target.nodeName)) {\n    const RTL = isRTL(element);\n    const arrowKeyNext = !RTL ? keyArrowRight : keyArrowLeft;\n    const arrowKeyPrev = !RTL ? keyArrowLeft : keyArrowRight;\n\n    /* istanbul ignore else */\n    if (code === arrowKeyPrev) self.prev();\n    else if (code === arrowKeyNext) self.next();\n  }\n};\n\n// CAROUSEL TOUCH HANDLERS\n// =======================\n/**\n * Prevents the `touchstart` and `dragstart` events for the `Carousel` element.\n *\n * @param e the `Event` object\n */\nfunction carouselDragHandler(this: HTMLElement, e: DragEvent | TouchEvent) {\n  const { target } = e;\n  const self = getCarouselInstance(this);\n\n  /* istanbul ignore next */\n  if (\n    self &&\n    self.isTouch &&\n    ((self.indicator && !self.indicator.contains(target as Node)) || !self.controls.includes(target as HTMLElement))\n  ) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    e.preventDefault();\n  }\n}\n\n// CAROUSEL POINTER HANDLERS\n// =========================\n/**\n * Handles the `pointerdown` event for the `Carousel` element.\n *\n * @param e the `Event` object\n */\nfunction carouselPointerDownHandler(this: HTMLElement, e: PointerEvent) {\n  const { target } = e;\n  const self = getCarouselInstance(this);\n\n  if (self && !self.isAnimating && !self.isTouch) {\n    // filter pointer event on controls & indicators\n    const { controls, indicators } = self;\n    if (![...controls, ...indicators].every(el => el === target || el.contains(target as Node))) {\n      startX = e.pageX;\n\n      /* istanbul ignore else */\n      if (this.contains(target as Node)) {\n        self.isTouch = true;\n        toggleCarouselTouchHandlers(self, true);\n      }\n    }\n  }\n}\n\n/**\n * Handles the `pointermove` event for the `Carousel` element.\n *\n * @param e\n */\nconst carouselPointerMoveHandler = (e: PointerEvent) => {\n  currentX = e.pageX;\n};\n\n/**\n * Handles the `pointerup` event for the `Carousel` element.\n *\n * @param e\n */\nconst carouselPointerUpHandler = (e: PointerEvent) => {\n  const { target } = e;\n  const doc = getDocument(target as Node);\n  const self = [...querySelectorAll(carouselSelector, doc)]\n    .map(c => getCarouselInstance(c) as Carousel)\n    .find(i => i.isTouch) as Carousel;\n\n  // impossible to satisfy\n  /* istanbul ignore else */\n  if (self) {\n    const { element, index } = self;\n    const RTL = isRTL(element);\n    endX = e.pageX;\n\n    self.isTouch = false;\n    toggleCarouselTouchHandlers(self);\n\n    if (\n      !doc.getSelection()?.toString().length &&\n      element.contains(target as HTMLElement) &&\n      Math.abs(startX - endX) > 120\n    ) {\n      // determine next index to slide to\n      /* istanbul ignore else */\n      if (currentX < startX) {\n        self.to(index + (RTL ? -1 : 1));\n      } else if (currentX > startX) {\n        self.to(index + (RTL ? 1 : -1));\n      }\n    }\n\n    // reset pointer position\n    startX = 0;\n    currentX = 0;\n    endX = 0;\n  }\n};\n\n// CAROUSEL PRIVATE METHODS\n// ========================\n/**\n * Sets active indicator for the `Carousel` instance.\n *\n * @param self the `Carousel` instance\n * @param index the index of the new active indicator\n */\nconst activateCarouselIndicator = (self: Carousel, index: number) => {\n  const { indicators } = self;\n  [...indicators].forEach(x => removeClass(x, activeClass));\n\n  /* istanbul ignore else */\n  if (self.indicators[index]) addClass(indicators[index], activeClass);\n};\n\n/**\n * Toggles the pointer event listeners for a given `Carousel` instance.\n *\n * @param self the `Carousel` instance\n * @param add when `TRUE` event listeners are added\n */\nconst toggleCarouselTouchHandlers = (self: Carousel, add?: boolean) => {\n  const { element } = self;\n  const action = add ? addListener : removeListener;\n  action(getDocument(element), pointermoveEvent, carouselPointerMoveHandler, passiveHandler);\n  action(getDocument(element), pointerupEvent, carouselPointerUpHandler, passiveHandler);\n};\n\n/**\n * Returns the index of the current active item.\n *\n * @param self the `Carousel` instance\n * @returns the query result\n */\nconst getActiveIndex = (self: Carousel) => {\n  const { slides, element } = self;\n  const activeItem = querySelector(`.${carouselItem}.${activeClass}`, element);\n  return isHTMLElement(activeItem) ? [...slides].indexOf(activeItem) : -1;\n};\n\n// CAROUSEL DEFINITION\n// ===================\n/** Creates a new `Carousel` instance. */\nexport default class Carousel extends BaseComponent {\n  static selector = carouselSelector;\n  static init = carouselInitCallback;\n  static getInstance = getCarouselInstance;\n  declare options: CarouselOptions;\n  declare direction: 'right' | 'left';\n  declare index: number;\n  declare isTouch: boolean;\n  declare slides: HTMLCollectionOf<HTMLElement>;\n  declare controls: HTMLElement[];\n  declare indicator: HTMLElement | null;\n  declare indicators: HTMLElement[];\n\n  /**\n   * @param target mostly a `.carousel` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<CarouselOptions>) {\n    super(target, config);\n\n    // initialization element\n    const { element } = this;\n\n    // additional properties\n    this.direction = isRTL(element) ? 'right' : 'left';\n    this.isTouch = false;\n\n    // carousel elements\n    // a LIVE collection is prefferable\n    this.slides = getElementsByClassName(carouselItem, element);\n    const { slides } = this;\n\n    // invalidate when not enough items\n    // no need to go further\n    if (slides.length >= 2) {\n      const activeIndex = getActiveIndex(this);\n      // recover item from disposed instance\n      const transitionItem = [...slides].find(s => matches(s, `.${carouselItem}-next,.${carouselItem}-next`));\n      this.index = activeIndex;\n\n      // external controls must be within same document context\n      const doc = getDocument(element);\n\n      this.controls = [\n        ...querySelectorAll(`[${dataBsSlide}]`, element),\n        ...querySelectorAll(`[${dataBsSlide}][${dataBsTarget}=\"#${element.id}\"]`, doc),\n      ].filter((c, i, ar) => i === ar.indexOf(c));\n\n      this.indicator = querySelector(`.${carouselString}-indicators`, element);\n\n      // a LIVE collection is prefferable\n      this.indicators = [\n        ...(this.indicator ? querySelectorAll(`[${dataBsSlideTo}]`, this.indicator) : []),\n        ...querySelectorAll(`[${dataBsSlideTo}][${dataBsTarget}=\"#${element.id}\"]`, doc),\n      ].filter((c, i, ar) => i === ar.indexOf(c));\n\n      // set JavaScript and DATA API options\n      const { options } = this;\n\n      // don't use TRUE as interval, it's actually 0, use the default 5000ms better\n      this.options.interval = options.interval === true ? carouselDefaults.interval : options.interval;\n\n      // set first slide active if none\n      /* istanbul ignore next - impossible to test with cypress */\n      if (transitionItem) {\n        this.index = [...slides].indexOf(transitionItem);\n      } else if (activeIndex < 0) {\n        this.index = 0;\n        addClass(slides[0], activeClass);\n        if (this.indicators.length) activateCarouselIndicator(this, 0);\n      }\n\n      /* istanbul ignore else */\n      if (this.indicators.length) activateCarouselIndicator(this, this.index);\n\n      // attach event handlers\n      this._toggleEventListeners(true);\n\n      // start to cycle if interval is set\n      if (options.interval) this.cycle();\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return carouselComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return carouselDefaults;\n  }\n\n  /**\n   * Check if instance is paused.\n   */\n  get isPaused() {\n    return hasClass(this.element, pausedClass);\n  }\n\n  /**\n   * Check if instance is animating.\n   */\n  get isAnimating() {\n    return querySelector(`.${carouselItem}-next,.${carouselItem}-prev`, this.element) !== null;\n  }\n\n  // CAROUSEL PUBLIC METHODS\n  // =======================\n  /** Slide automatically through items. */\n  cycle() {\n    const { element, options, isPaused, index } = this;\n\n    Timer.clear(element, carouselString);\n    if (isPaused) {\n      Timer.clear(element, pausedClass);\n      removeClass(element, pausedClass);\n    }\n\n    Timer.set(\n      element,\n      () => {\n        // it's very important to check self.element\n        // where instance might have been disposed\n        /* istanbul ignore else */\n        if (this.element && !this.isPaused && !this.isTouch && isElementInScrollRange(element)) {\n          this.to(index + 1);\n        }\n      },\n      options.interval as number,\n      carouselString,\n    );\n  }\n\n  /** Pause the automatic cycle. */\n  pause() {\n    const { element, options } = this;\n    /* istanbul ignore else */\n    if (!this.isPaused && options.interval) {\n      addClass(element, pausedClass);\n      Timer.set(\n        element,\n        () => {\n          /* ESLint is now happy */\n        },\n        1,\n        pausedClass,\n      );\n    }\n  }\n\n  /** Slide to the next item. */\n  next() {\n    /* istanbul ignore else */\n    if (!this.isAnimating) {\n      this.to(this.index + 1);\n    }\n  }\n\n  /** Slide to the previous item. */\n  prev() {\n    /* istanbul ignore else */\n    if (!this.isAnimating) {\n      this.to(this.index - 1);\n    }\n  }\n\n  /**\n   * Jump to the item with the `idx` index.\n   *\n   * @param idx the index of the item to jump to\n   */\n  to(idx: number) {\n    const { element, slides, options } = this;\n    const activeItem = getActiveIndex(this);\n    const RTL = isRTL(element);\n    let next = idx;\n\n    // when controled via methods, make sure to check again\n    // first return if we're on the same item #227\n    // `to()` must be SPAM protected by Timer\n    if (!this.isAnimating && activeItem !== next && !Timer.get(element, dataBsSlide)) {\n      // determine transition direction\n      /* istanbul ignore else */\n      if (activeItem < next || (activeItem === 0 && next === slides.length - 1)) {\n        this.direction = RTL ? 'right' : 'left'; // next\n      } else if (activeItem > next || (activeItem === slides.length - 1 && next === 0)) {\n        this.direction = RTL ? 'left' : 'right'; // prev\n      }\n      const { direction } = this;\n\n      // find the right next index\n      if (next < 0) {\n        next = slides.length - 1;\n      } else if (next >= slides.length) {\n        next = 0;\n      }\n\n      // orientation, class name, eventProperties\n      const orientation = direction === 'left' ? 'next' : 'prev';\n      const directionClass = direction === 'left' ? 'start' : 'end';\n\n      const eventProperties = {\n        relatedTarget: slides[next],\n        from: activeItem,\n        to: next,\n        direction,\n      };\n\n      // update event properties\n      ObjectAssign(carouselSlideEvent, eventProperties);\n      ObjectAssign(carouselSlidEvent, eventProperties);\n\n      // discontinue when prevented\n      dispatchEvent(element, carouselSlideEvent);\n      if (!carouselSlideEvent.defaultPrevented) {\n        // update index\n        this.index = next;\n        activateCarouselIndicator(this, next);\n\n        if (getElementTransitionDuration(slides[next]) && hasClass(element, 'slide')) {\n          Timer.set(\n            element,\n            () => {\n              addClass(slides[next], `${carouselItem}-${orientation}`);\n              reflow(slides[next]);\n              addClass(slides[next], `${carouselItem}-${directionClass}`);\n              addClass(slides[activeItem], `${carouselItem}-${directionClass}`);\n\n              // the instance might get diposed mid-animation\n              emulateTransitionEnd(\n                slides[next],\n                () => this.slides && this.slides.length && carouselTransitionEndHandler(this),\n              );\n            },\n            0,\n            dataBsSlide,\n          );\n        } else {\n          addClass(slides[next], activeClass);\n          removeClass(slides[activeItem], activeClass);\n\n          Timer.set(\n            element,\n            () => {\n              Timer.clear(element, dataBsSlide);\n              // check for element, might have been disposed\n              /* istanbul ignore else */\n              if (element && options.interval && !this.isPaused) {\n                this.cycle();\n              }\n\n              dispatchEvent(element, carouselSlidEvent);\n            },\n            0,\n            dataBsSlide,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Toggles all event listeners for the `Carousel` instance.\n   *\n   * @param add when `TRUE` event listeners are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const { element, options, slides, controls, indicators } = this;\n    const { touch, pause, interval, keyboard } = options;\n    const action = add ? addListener : removeListener;\n\n    if (pause && interval) {\n      action(element, mouseenterEvent, carouselPauseHandler);\n      action(element, mouseleaveEvent, carouselResumeHandler);\n    }\n\n    if (touch && slides.length > 2) {\n      action(element, pointerdownEvent, carouselPointerDownHandler, passiveHandler);\n      action(element, touchstartEvent, carouselDragHandler, { passive: false });\n      action(element, dragstartEvent, carouselDragHandler, { passive: false });\n    }\n\n    /* istanbul ignore else */\n    if (controls.length) {\n      controls.forEach(arrow => {\n        /* istanbul ignore else */\n        if (arrow) action(arrow, mouseclickEvent, carouselControlsHandler);\n      });\n    }\n\n    /* istanbul ignore else */\n    if (indicators.length) {\n      indicators.forEach(indicator => {\n        action(indicator, mouseclickEvent, carouselIndicatorHandler);\n      });\n    }\n\n    if (keyboard) action(getDocument(element), keydownEvent, carouselKeyHandler);\n  };\n\n  /** Remove `Carousel` component from target. */\n  dispose() {\n    const { isAnimating } = this;\n\n    const clone = {\n      ...this,\n      isAnimating,\n    };\n    this._toggleEventListeners();\n    super.dispose();\n\n    // istanbul ignore next - impossible to test with cypress\n    if (clone.isAnimating) {\n      emulateTransitionEnd(clone.slides[clone.index], () => {\n        carouselTransitionEndHandler(clone);\n      });\n    }\n  }\n}\n"],"names":["carouselString","carouselComponent","carouselSelector","carouselItem","dataBsSlideTo","dataBsSlide","pausedClass","carouselDefaults","getCarouselInstance","element","getInstance","carouselInitCallback","Carousel","startX","currentX","endX","carouselSlideEvent","createCustomEvent","carouselSlidEvent","carouselTransitionEndHandler","self","index","direction","slides","options","activeItem","getActiveIndex","orientation","directionClass","addClass","activeClass","removeClass","dispatchEvent","Timer","getDocument","carouselPauseHandler","carouselResumeHandler","carouselIndicatorHandler","e","closest","getTargetElement","newIndex","getAttribute","hasClass","carouselControlsHandler","carouselKeyHandler","code","target","doc","querySelectorAll","x","isElementInScrollRange","RTL","isRTL","keyArrowRight","keyArrowLeft","carouselDragHandler","carouselPointerDownHandler","controls","indicators","el","toggleCarouselTouchHandlers","carouselPointerMoveHandler","carouselPointerUpHandler","c","i","_a","activateCarouselIndicator","add","action","addListener","removeListener","pointermoveEvent","passiveHandler","pointerupEvent","querySelector","isHTMLElement","BaseComponent","config","__publicField","touch","pause","interval","keyboard","mouseenterEvent","mouseleaveEvent","pointerdownEvent","touchstartEvent","dragstartEvent","arrow","mouseclickEvent","indicator","keydownEvent","getElementsByClassName","activeIndex","transitionItem","s","matches","dataBsTarget","ar","isPaused","idx","next","eventProperties","ObjectAssign","getElementTransitionDuration","reflow","emulateTransitionEnd","isAnimating","clone"],"mappings":"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"}