{"version":3,"file":"tooltip-kta4uOnb.js","sources":["../../src/strings/popoverString.ts","../../src/strings/popoverComponent.ts","../../src/strings/tooltipString.ts","../../src/util/getTipTemplate.ts","../../src/util/tipClassPositions.ts","../../src/util/styleTip.ts","../../src/util/tooltipDefaults.ts","../../src/strings/dataOriginalTitle.ts","../../src/strings/tooltipComponent.ts","../../src/util/setHtml.ts","../../src/util/createTip.ts","../../src/util/getElementContainer.ts","../../src/components/tooltip.ts"],"sourcesContent":["/** @type {string} */\nconst popoverString = 'popover';\nexport default popoverString;\n","/** @type {string} */\nconst popoverComponent = 'Popover';\nexport default popoverComponent;\n","/** @type {string} */\nconst tooltipString = 'tooltip';\nexport default tooltipString;\n","import tooltipString from '../strings/tooltipString';\n\n/**\n * Returns a template for Popover / Tooltip.\n *\n * @param tipType the expected markup type\n * @returns the template markup\n */\nconst getTipTemplate = (tipType: string) => {\n  const isTooltip = tipType === tooltipString;\n  const bodyClass = isTooltip ? `${tipType}-inner` : `${tipType}-body`;\n  const header = !isTooltip ? `<h3 class=\"${tipType}-header\"></h3>` : '';\n  const arrow = `<div class=\"${tipType}-arrow\"></div>`;\n  const body = `<div class=\"${bodyClass}\"></div>`;\n  return `<div class=\"${tipType}\" role=\"${tooltipString}\">${header + arrow + body}</div>`;\n};\n\nexport default getTipTemplate;\n","const tipClassPositions = {\n  top: 'top',\n  bottom: 'bottom',\n  left: 'start',\n  right: 'end',\n};\n\nexport default tipClassPositions;\n","import {\n  createCustomEvent,\n  dispatchEvent,\n  getBoundingClientRect,\n  getDocumentElement,\n  getElementStyle,\n  isHTMLElement,\n  isRTL,\n  setElementStyle,\n  toLowerCase,\n} from '@thednp/shorty';\n\nimport popoverComponent from '../strings/popoverComponent';\nimport tipClassPositions from './tipClassPositions';\nimport Tooltip from '../components/tooltip';\nimport type { TooltipEvent } from '../interface/tooltip';\nimport type { PopoverEvent } from '../interface/popover';\n\n/**\n * Style popovers and tooltips.\n *\n * @param self the `Popover` / `Tooltip` instance\n */\nconst styleTip = <T extends Tooltip>(self: T) => {\n  const tipClasses = /\\b(top|bottom|start|end)+/;\n  const { element, tooltip, container, options, arrow } = self;\n\n  // istanbul ignore else @preserve\n  if (tooltip) {\n    const tipPositions = { ...tipClassPositions };\n    const RTL = isRTL(element);\n\n    // reset tooltip style (top: 0, left: 0 works best)\n    setElementStyle(tooltip, {\n      // top: '0px', left: '0px', right: '', bottom: '',\n      top: '',\n      left: '',\n      right: '',\n      bottom: '',\n    });\n    const isPopover = self.name === popoverComponent;\n    const { offsetWidth: tipWidth, offsetHeight: tipHeight } = tooltip;\n    const { clientWidth: htmlcw, clientHeight: htmlch, offsetWidth: htmlow } = getDocumentElement(element);\n    let { placement } = options;\n    const { clientWidth: parentCWidth, offsetWidth: parentOWidth } = container as HTMLElement;\n    const parentPosition = getElementStyle(container as HTMLElement, 'position');\n    const fixedParent = parentPosition === 'fixed';\n    const scrollbarWidth = fixedParent ? Math.abs(parentCWidth - parentOWidth) : Math.abs(htmlcw - htmlow);\n    const leftBoundry =\n      RTL && fixedParent\n        ? // istanbul ignore next @preserve\n          scrollbarWidth\n        : 0;\n    const rightBoundry = htmlcw - (!RTL ? scrollbarWidth : 0) - 1;\n    const {\n      width: elemWidth,\n      height: elemHeight,\n      left: elemRectLeft,\n      right: elemRectRight,\n      top: elemRectTop,\n    } = getBoundingClientRect(element, true);\n    const { x, y } = {\n      x: elemRectLeft,\n      y: elemRectTop,\n    };\n    // reset arrow style\n    setElementStyle(arrow as HTMLElement, {\n      top: '',\n      left: '',\n      right: '',\n      bottom: '',\n    });\n    let topPosition: number | string = 0;\n    let bottomPosition: number | string = '';\n    let leftPosition: number | string = 0;\n    let rightPosition: number | string = '';\n    let arrowTop: number | string = '';\n    let arrowLeft: number | string = '';\n    let arrowRight: number | string = '';\n\n    const arrowWidth = (arrow as HTMLElement).offsetWidth || 0;\n    const arrowHeight = (arrow as HTMLElement).offsetHeight || 0;\n    const arrowAdjust = arrowWidth / 2;\n\n    // check placement\n    let topExceed = elemRectTop - tipHeight - arrowHeight < 0;\n    let bottomExceed = elemRectTop + tipHeight + elemHeight + arrowHeight >= htmlch;\n    let leftExceed = elemRectLeft - tipWidth - arrowWidth < leftBoundry;\n    let rightExceed = elemRectLeft + tipWidth + elemWidth + arrowWidth >= rightBoundry;\n\n    const horizontals = ['left', 'right'];\n    const verticals = ['top', 'bottom'];\n\n    topExceed = horizontals.includes(placement)\n      ? elemRectTop + elemHeight / 2 - tipHeight / 2 - arrowHeight < 0\n      : topExceed;\n    bottomExceed = horizontals.includes(placement)\n      ? elemRectTop + tipHeight / 2 + elemHeight / 2 + arrowHeight >= htmlch\n      : bottomExceed;\n    leftExceed = verticals.includes(placement) ? elemRectLeft + elemWidth / 2 - tipWidth / 2 < leftBoundry : leftExceed;\n    rightExceed = verticals.includes(placement)\n      ? elemRectLeft + tipWidth / 2 + elemWidth / 2 >= rightBoundry\n      : rightExceed;\n\n    // first remove side positions if both left and right limits are exceeded\n    // we usually fall back to top|bottom\n    placement = horizontals.includes(placement) && leftExceed && rightExceed ? 'top' : placement;\n    // recompute placement\n    placement = placement === 'top' && topExceed ? 'bottom' : placement;\n    placement = placement === 'bottom' && bottomExceed ? 'top' : placement;\n    placement = placement === 'left' && leftExceed ? 'right' : placement;\n    placement =\n      placement === 'right' && rightExceed\n        ? 'left'\n        : // istanbul ignore next @preserve\n          placement;\n\n    // update tooltip/popover class\n    if (!tooltip.className.includes(placement)) {\n      tooltip.className = tooltip.className.replace(tipClasses, tipPositions[placement]);\n    }\n\n    // compute tooltip / popover coordinates\n    // istanbul ignore else @preserve\n    if (horizontals.includes(placement)) {\n      // secondary|side positions\n      if (placement === 'left') {\n        // LEFT\n        leftPosition = x - tipWidth - (isPopover ? arrowWidth : 0);\n      } else {\n        // RIGHT\n        leftPosition = x + elemWidth + (isPopover ? arrowWidth : 0);\n      }\n\n      // adjust top and arrow\n      if (topExceed && bottomExceed) {\n        topPosition = 0;\n        bottomPosition = 0;\n        arrowTop = elemRectTop + elemHeight / 2 - arrowHeight / 2;\n      } else if (topExceed) {\n        topPosition = y;\n        bottomPosition = '';\n        arrowTop = elemHeight / 2 - arrowWidth;\n      } else if (bottomExceed) {\n        topPosition = y - tipHeight + elemHeight;\n        bottomPosition = '';\n        arrowTop = tipHeight - elemHeight / 2 - arrowWidth;\n      } else {\n        topPosition = y - tipHeight / 2 + elemHeight / 2;\n        arrowTop = tipHeight / 2 - arrowHeight / 2;\n      }\n    } else if (verticals.includes(placement)) {\n      if (placement === 'top') {\n        topPosition = y - tipHeight - (isPopover ? arrowHeight : 0);\n      } else {\n        // BOTTOM\n        topPosition = y + elemHeight + (isPopover ? arrowHeight : 0);\n      }\n\n      // adjust left | right and also the arrow\n      if (leftExceed) {\n        leftPosition = 0;\n        arrowLeft = x + elemWidth / 2 - arrowAdjust;\n      } else if (rightExceed) {\n        leftPosition = 'auto';\n        rightPosition = 0;\n        arrowRight = elemWidth / 2 + rightBoundry - elemRectRight - arrowAdjust;\n      } else {\n        leftPosition = x - tipWidth / 2 + elemWidth / 2;\n        arrowLeft = tipWidth / 2 - arrowAdjust;\n      }\n    }\n\n    // apply style to tooltip/popover\n    setElementStyle(tooltip, {\n      top: `${topPosition}px`,\n      bottom: bottomPosition === '' ? '' : `${bottomPosition}px`,\n      left: leftPosition === 'auto' ? leftPosition : `${leftPosition}px`,\n      right: rightPosition !== '' ? `${rightPosition}px` : '',\n    });\n\n    // update arrow placement\n    // istanbul ignore else @preserve\n    if (isHTMLElement(arrow)) {\n      if (arrowTop !== '') {\n        arrow.style.top = `${arrowTop}px`;\n      }\n      if (arrowLeft !== '') {\n        arrow.style.left = `${arrowLeft}px`;\n      } else if (arrowRight !== '') {\n        arrow.style.right = `${arrowRight}px`;\n      }\n    }\n    const updatedTooltipEvent = createCustomEvent<Record<string, unknown>, TooltipEvent | PopoverEvent>(\n      `updated.bs.${toLowerCase(self.name)}`,\n    );\n    dispatchEvent(element, updatedTooltipEvent);\n  }\n};\n\nexport default styleTip;\n","import getTipTemplate from './getTipTemplate';\nimport tooltipString from '../strings/tooltipString';\nimport { TooltipOptions } from '../interface/tooltip';\n\nconst tooltipDefaults: TooltipOptions = {\n  template: getTipTemplate(tooltipString),\n  title: '',\n  customClass: '',\n  trigger: 'hover focus',\n  placement: 'top',\n  sanitizeFn: undefined,\n  animation: true,\n  delay: 200,\n  container: document.body,\n  content: '',\n  dismissible: false,\n  btnClose: '',\n};\nexport default tooltipDefaults;\n","/**\n * Global namespace for `data-bs-title` attribute.\n */\nconst dataOriginalTitle = 'data-original-title';\nexport default dataOriginalTitle;\n","/** @type {string} */\nconst tooltipComponent = 'Tooltip';\nexport default tooltipComponent;\n","import { isArray, isFunction, isHTMLElement, isNode, isNodeList, isString } from '@thednp/shorty';\n\n/**\n * Append an existing `Element` to Popover / Tooltip component or HTML\n * markup string to be parsed & sanitized to be used as popover / tooltip content.\n *\n * @param element target\n * @param content the `Element` to append / string\n * @param sanitizeFn a function to sanitize string content\n */\nconst setHtml = (element: HTMLElement, content: Node[] | Node | string, sanitizeFn?: (s: string) => string) => {\n  // istanbul ignore else @preserve\n  if (isString(content) && content.length) {\n    let dirty = content.trim(); // fixing #233\n    if (isFunction(sanitizeFn)) dirty = sanitizeFn(dirty);\n\n    const domParser = new DOMParser();\n    const tempDocument = domParser.parseFromString(dirty, 'text/html');\n    element.append(...[...tempDocument.body.childNodes]);\n  } else if (isHTMLElement(content)) {\n    element.append(content);\n  } else if (isNodeList(content) || (isArray(content) && content.every(isNode))) {\n    element.append(...[...content]);\n  }\n};\nexport default setHtml;\n","import { addClass, createElement, hasClass, isHTMLElement, isRTL, querySelector, setAttribute } from '@thednp/shorty';\n\nimport tooltipComponent from '../strings/tooltipComponent';\nimport tooltipString from '../strings/tooltipString';\nimport popoverString from '../strings/popoverString';\nimport fadeClass from '../strings/fadeClass';\nimport tipClassPositions from './tipClassPositions';\nimport setHtml from './setHtml';\nimport Tooltip from '../components/tooltip';\nimport Popover from '../components/popover';\n\n/**\n * Creates a new tooltip / popover.\n *\n * @param self the `Tooltip` / `Popover` instance\n */\nconst createTip = (self: Tooltip | Popover) => {\n  const isTooltip = self.name === tooltipComponent;\n\n  const { id, element, options } = self;\n  const { title, placement, template, animation, customClass, sanitizeFn, dismissible, content, btnClose } = options;\n  const tipString = isTooltip ? tooltipString : popoverString;\n  const tipPositions = { ...tipClassPositions };\n  let titleParts: Node[] = [];\n  let contentParts: Node[] = [];\n\n  if (isRTL(element)) {\n    tipPositions.left = 'end';\n    tipPositions.right = 'start';\n  }\n\n  // set initial popover class\n  const placementClass = `bs-${tipString}-${tipPositions[placement]}`;\n\n  // load template\n  let tooltipTemplate: Node | string;\n  if (isHTMLElement(template)) {\n    tooltipTemplate = template;\n  } else {\n    const htmlMarkup = createElement('div') as HTMLElement;\n    setHtml(htmlMarkup, template, sanitizeFn);\n    tooltipTemplate = htmlMarkup.firstChild as HTMLElement;\n  }\n\n  // set popover markup\n  self.tooltip = isHTMLElement(tooltipTemplate)\n    ? (tooltipTemplate.cloneNode(true) as HTMLElement)\n    : // istanbul ignore next @preserve\n      undefined;\n\n  const { tooltip } = self;\n  // istanbul ignore else @preserve\n  if (tooltip) {\n    // set id and role attributes\n    setAttribute(tooltip, 'id', id);\n    setAttribute(tooltip, 'role', tooltipString);\n\n    const bodyClass = isTooltip ? `${tooltipString}-inner` : `${popoverString}-body`;\n    const tooltipHeader = isTooltip ? null : querySelector(`.${popoverString}-header`, tooltip);\n    const tooltipBody = querySelector(`.${bodyClass}`, tooltip);\n\n    // set arrow and enable access for styleTip\n    self.arrow = querySelector(`.${tipString}-arrow`, tooltip) as HTMLElement;\n    const { arrow } = self;\n\n    if (isHTMLElement(title)) titleParts = [title.cloneNode(true)];\n    else {\n      const tempTitle = createElement('div') as HTMLElement;\n      setHtml(tempTitle, title, sanitizeFn);\n      titleParts = [...[...tempTitle.childNodes]];\n    }\n\n    if (isHTMLElement(content)) contentParts = [content.cloneNode(true)];\n    else {\n      const tempContent = createElement('div') as HTMLElement;\n      setHtml(tempContent, content, sanitizeFn);\n      contentParts = [...[...tempContent.childNodes]];\n    }\n\n    // set dismissible button\n    if (dismissible) {\n      if (title) {\n        if (isHTMLElement(btnClose)) {\n          titleParts = [...titleParts, btnClose.cloneNode(true)];\n        } else {\n          const tempBtn = createElement('div') as HTMLElement;\n          setHtml(tempBtn, btnClose, sanitizeFn);\n          titleParts = [...titleParts, tempBtn.firstChild as Node];\n        }\n      } else {\n        // istanbul ignore else @preserve\n        if (tooltipHeader) tooltipHeader.remove();\n        if (isHTMLElement(btnClose)) {\n          contentParts = [...contentParts, btnClose.cloneNode(true)];\n        } else {\n          const tempBtn = createElement('div') as HTMLElement;\n          setHtml(tempBtn, btnClose, sanitizeFn);\n          contentParts = [...contentParts, tempBtn.firstChild as Node];\n        }\n      }\n    }\n\n    // fill the template with content from options / data attributes\n    // also sanitize title && content\n    // istanbul ignore else @preserve\n    if (!isTooltip) {\n      // istanbul ignore else @preserve\n      if (title && tooltipHeader) {\n        setHtml(tooltipHeader, titleParts, sanitizeFn);\n      }\n      // istanbul ignore else @preserve\n      if (content && tooltipBody) {\n        setHtml(tooltipBody, contentParts, sanitizeFn);\n      }\n      // set btn\n      self.btn = querySelector('.btn-close', tooltip) || undefined;\n    } else if (title && tooltipBody) setHtml(tooltipBody, title, sanitizeFn);\n\n    // Bootstrap 5.2.x\n    // addClass(tooltip, 'position-absolute');\n    addClass(tooltip, 'position-fixed');\n    addClass(arrow, 'position-absolute');\n\n    // set popover animation and placement\n    // istanbul ignore else @preserve\n    if (!hasClass(tooltip, tipString)) addClass(tooltip, tipString);\n    // istanbul ignore else @preserve\n    if (animation && !hasClass(tooltip, fadeClass)) {\n      addClass(tooltip, fadeClass);\n    }\n    // istanbul ignore else @preserve\n    if (customClass && !hasClass(tooltip, customClass)) {\n      addClass(tooltip, customClass);\n    }\n    // istanbul ignore else @preserve\n    if (!hasClass(tooltip, placementClass)) addClass(tooltip, placementClass);\n  }\n};\n\nexport default createTip;\n","import { getDocument, getElementStyle, getParentNode, isShadowRoot, isTableElement } from '@thednp/shorty';\n\n/**\n * Returns an `HTMLElement` to be used as default value for *options.container*\n * for `Tooltip` / `Popover` components.\n *\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param element the target\n * @returns the query result\n */\nconst getElementContainer = (element: HTMLElement): ParentNode => {\n  const majorBlockTags = ['HTML', 'BODY'];\n  const containers: ParentNode[] = [];\n  let { parentNode } = element as Node;\n\n  while (parentNode && !majorBlockTags.includes(parentNode.nodeName)) {\n    parentNode = getParentNode(parentNode) as ParentNode;\n    // istanbul ignore else @preserve\n    if (!(isShadowRoot(parentNode) || isTableElement(parentNode))) {\n      containers.push(parentNode);\n    }\n  }\n\n  return (\n    containers.find((c, i) => {\n      if (\n        getElementStyle(c as HTMLElement, 'position') !== 'relative' &&\n        containers.slice(i + 1).every(r => getElementStyle(r as HTMLElement, 'position') === 'static')\n      ) {\n        return c;\n      }\n      return null;\n    }) ||\n    // istanbul ignore next: optional guard\n    getDocument(element).body\n  );\n};\n\nexport default getElementContainer;\n","/* Native JavaScript for Bootstrap 5 | Tooltip\n---------------------------------------------- */\nimport {\n  addClass,\n  ariaDescribedBy,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focus,\n  focusEvent,\n  focusinEvent,\n  focusoutEvent,\n  getAttribute,\n  getDocument,\n  getElementStyle,\n  getInstance,\n  getUID,\n  getWindow,\n  hasAttribute,\n  hasClass,\n  isApple,\n  mouseclickEvent,\n  mousedownEvent,\n  mouseenterEvent,\n  mousehoverEvent,\n  mouseleaveEvent,\n  ObjectAssign,\n  passiveHandler,\n  removeAttribute,\n  removeClass,\n  resizeEvent,\n  scrollEvent,\n  setAttribute,\n  Timer,\n  toLowerCase,\n  touchstartEvent,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport dataBsToggle from '../strings/dataBsToggle';\nimport dataOriginalTitle from '../strings/dataOriginalTitle';\nimport showClass from '../strings/showClass';\nimport tooltipString from '../strings/tooltipString';\nimport tooltipComponent from '../strings/tooltipComponent';\nimport popoverString from '../strings/popoverString';\nimport popoverComponent from '../strings/popoverComponent';\nimport modalString from '../strings/modalString';\nimport offcanvasString from '../strings/offcanvasString';\n\nimport styleTip from '../util/styleTip';\nimport createTip from '../util/createTip';\nimport { appendPopup, hasPopup, removePopup } from '../util/popupContainer';\nimport getElementContainer from '../util/getElementContainer';\nimport tooltipDefaults from '../util/tooltipDefaults';\nimport BaseComponent from './base-component';\nimport type { TooltipEvent, TooltipOptions } from '../interface/tooltip';\nimport type { PopoverEvent, PopoverOptions } from '../interface/popover';\n\n// TOOLTIP PRIVATE GC\n// ==================\nconst tooltipSelector = `[${dataBsToggle}=\"${tooltipString}\"],[data-tip=\"${tooltipString}\"]`;\nconst titleAttr = 'title';\n\n/**\n * Static method which returns an existing `Tooltip` instance associated\n * to a target `Element`.\n */\nlet getTooltipInstance = (element: HTMLElement) => getInstance<Tooltip>(element, tooltipComponent);\n\n/**\n * A `Tooltip` initialization callback.\n */\nconst tooltipInitCallback = (element: HTMLElement) => new Tooltip(element);\n\n// TOOLTIP PRIVATE METHODS\n// =======================\n/**\n * Removes the tooltip from the DOM.\n *\n * @param self the `Tooltip` instance\n */\nconst removeTooltip = (self: Tooltip) => {\n  const { element, tooltip, container, offsetParent } = self;\n  removeAttribute(element, ariaDescribedBy);\n  removePopup(tooltip as HTMLElement, container === offsetParent ? container : offsetParent);\n};\n\n/**\n * Check if container contains the tooltip.\n *\n * @param self Tooltip\n */\nconst hasTip = (self: Tooltip): boolean | undefined => {\n  const { tooltip, container, offsetParent } = self;\n\n  return tooltip && hasPopup(tooltip, container === offsetParent ? container : offsetParent);\n};\n\n/**\n * Executes after the instance has been disposed.\n *\n * @param self the `Tooltip` instance\n * @param callback the parent dispose callback\n */\nconst disposeTooltipComplete = (self: Tooltip, callback?: () => void) => {\n  const { element } = self;\n  self._toggleEventListeners();\n\n  // istanbul ignore else @preserve\n  if (hasAttribute(element, dataOriginalTitle) && self.name === tooltipComponent) {\n    toggleTooltipTitle(self);\n  }\n  // istanbul ignore else @preserve\n  if (callback) callback();\n};\n\n/**\n * Toggles on/off the special `Tooltip` event listeners.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipAction = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n\n  action(getDocument(element), touchstartEvent, self.handleTouch, passiveHandler);\n\n  [scrollEvent, resizeEvent].forEach(ev => {\n    action(getWindow(element), ev, self.update, passiveHandler);\n  });\n};\n\n/**\n * Executes after the tooltip was shown to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipShownAction = (self: Tooltip) => {\n  const { element } = self;\n  const shownTooltipEvent = createCustomEvent<Record<string, never>, TooltipEvent | PopoverEvent>(\n    `shown.bs.${toLowerCase(self.name)}`,\n  );\n\n  toggleTooltipAction(self, true);\n  dispatchEvent(element, shownTooltipEvent);\n  Timer.clear(element, 'in');\n};\n\n/**\n * Executes after the tooltip was hidden to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipHiddenAction = (self: Tooltip) => {\n  const { element } = self;\n  const hiddenTooltipEvent = createCustomEvent<Record<string, never>, TooltipEvent | PopoverEvent>(\n    `hidden.bs.${toLowerCase(self.name)}`,\n  );\n\n  toggleTooltipAction(self);\n  removeTooltip(self);\n  dispatchEvent(element, hiddenTooltipEvent);\n\n  Timer.clear(element, 'out');\n};\n\n/**\n * Toggles on/off the `Tooltip` event listeners that hide/update the tooltip.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipOpenHandlers = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element, container, offsetParent } = self;\n  const { offsetHeight, scrollHeight } = container as HTMLElement;\n  const parentModal = closest(element, `.${modalString}`);\n  const parentOffcanvas = closest(element, `.${offcanvasString}`);\n\n  // istanbul ignore else @preserve\n  const win = getWindow(element);\n  const overflow = offsetHeight !== scrollHeight;\n  const scrollTarget = container === offsetParent && overflow ? container : win;\n  action(scrollTarget, resizeEvent, self.update, passiveHandler);\n  action(scrollTarget, scrollEvent, self.update, passiveHandler);\n\n  // dismiss tooltips inside modal / offcanvas\n  if (parentModal) {\n    action(parentModal, `hide.bs.${modalString}`, self.handleHide);\n  }\n  if (parentOffcanvas) {\n    action(parentOffcanvas, `hide.bs.${offcanvasString}`, self.handleHide);\n  }\n};\n\n/**\n * Toggles the `title` and `data-original-title` attributes.\n *\n * @param self the `Tooltip` instance\n * @param content when `true`, event listeners are added\n */\nconst toggleTooltipTitle = (self: Tooltip, content?: string) => {\n  // [0 - add, 1 - remove] | [0 - remove, 1 - add]\n  const titleAtt = [dataOriginalTitle, titleAttr];\n  const { element } = self;\n\n  setAttribute(\n    element,\n    titleAtt[content ? 0 : 1],\n    content ||\n      getAttribute(element, titleAtt[0]) ||\n      // istanbul ignore next @preserve\n      '',\n  );\n  removeAttribute(element, titleAtt[content ? 1 : 0]);\n};\n\n// TOOLTIP DEFINITION\n// ==================\n/** Creates a new `Tooltip` instance. */\nexport default class Tooltip extends BaseComponent {\n  static selector = tooltipSelector;\n  static init = tooltipInitCallback;\n  static getInstance = getTooltipInstance;\n  static styleTip = styleTip;\n  declare options: TooltipOptions;\n  declare btn?: HTMLElement;\n  declare tooltip?: HTMLElement;\n  declare container: ParentNode;\n  declare arrow?: HTMLElement;\n  declare offsetParent?: HTMLElement;\n  declare enabled: boolean;\n  declare id: string;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<TooltipOptions>) {\n    super(target, config);\n\n    const { element } = this;\n    const isTooltip = this.name === tooltipComponent;\n    const tipString = isTooltip ? tooltipString : popoverString;\n    const tipComponent = isTooltip ? tooltipComponent : popoverComponent;\n\n    // istanbul ignore next @preserve: this is to set Popover too\n    getTooltipInstance = <T extends Tooltip>(elem: HTMLElement) => getInstance<T>(elem, tipComponent);\n\n    // additional properties\n    this.enabled = true;\n    /** Set unique ID for `aria-describedby`. */\n    this.id = `${tipString}-${getUID(element, tipString)}`;\n\n    // instance options\n    const { options } = this;\n\n    // invalidate\n    if (!((!options.title && isTooltip) || (!isTooltip && !options.content))) {\n      // reset default options\n      ObjectAssign(tooltipDefaults, { titleAttr: '' });\n\n      // set title attributes and add event listeners\n      // istanbul ignore else @preserve\n      if (hasAttribute(element, titleAttr) && isTooltip && typeof options.title === 'string') {\n        toggleTooltipTitle(this, options.title);\n      }\n\n      // set containers\n      this.container = getElementContainer(element);\n      this.offsetParent = ['sticky', 'fixed'].some(\n        position => getElementStyle(this.container as HTMLElement, 'position') === position,\n      )\n        ? (this.container as HTMLElement)\n        : getDocument(this.element).body;\n\n      // create tooltip here\n      createTip(this);\n\n      // attach events\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return tooltipComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return tooltipDefaults;\n  }\n\n  // TOOLTIP PUBLIC METHODS\n  // ======================\n  /** Handles the focus event on iOS. */\n  // istanbul ignore next @preserve - impossible to test without Apple device\n  handleFocus = () => focus(this.element);\n  /** Shows the tooltip. */\n  handleShow = () => this.show();\n  show() {\n    const { options, tooltip, element, container, offsetParent, id } = this;\n    const { animation } = options;\n    const outTimer = Timer.get(element, 'out');\n    const tipContainer = container === offsetParent ? container : offsetParent;\n\n    Timer.clear(element, 'out');\n\n    if (tooltip && !outTimer && !hasTip(this)) {\n      Timer.set(\n        element,\n        () => {\n          const showTooltipEvent = createCustomEvent<Record<string, never>, TooltipEvent | PopoverEvent>(\n            `show.bs.${toLowerCase(this.name)}`,\n          );\n          dispatchEvent(element, showTooltipEvent);\n\n          // istanbul ignore else @preserve\n          if (!showTooltipEvent.defaultPrevented) {\n            // append to container\n            appendPopup(tooltip, tipContainer);\n\n            setAttribute(element, ariaDescribedBy, `#${id}`);\n\n            this.update();\n            toggleTooltipOpenHandlers(this, true);\n\n            // istanbul ignore else @preserve\n            if (!hasClass(tooltip, showClass)) addClass(tooltip, showClass);\n            // istanbul ignore else @preserve\n            if (animation) {\n              emulateTransitionEnd(tooltip, () => tooltipShownAction(this));\n            } else tooltipShownAction(this);\n          }\n        },\n        17,\n        'in',\n      );\n    }\n  }\n\n  /** Hides the tooltip. */\n  handleHide = () => this.hide();\n  hide() {\n    const { options, tooltip, element } = this;\n    const { animation, delay } = options;\n\n    Timer.clear(element, 'in');\n\n    // istanbul ignore else @preserve\n    if (tooltip && hasTip(this)) {\n      Timer.set(\n        element,\n        () => {\n          const hideTooltipEvent = createCustomEvent<Record<string, never>, TooltipEvent | PopoverEvent>(\n            `hide.bs.${toLowerCase(this.name)}`,\n          );\n          dispatchEvent(element, hideTooltipEvent);\n\n          // istanbul ignore else @preserve\n          if (!hideTooltipEvent.defaultPrevented) {\n            this.update();\n            removeClass(tooltip, showClass);\n            toggleTooltipOpenHandlers(this);\n\n            // istanbul ignore else @preserve\n            if (animation) {\n              emulateTransitionEnd(tooltip, () => tooltipHiddenAction(this));\n            } else tooltipHiddenAction(this);\n          }\n        },\n        delay + 17,\n        'out',\n      );\n    }\n  }\n\n  /** Updates the tooltip position. */\n  update = () => {\n    styleTip<Tooltip>(this);\n  };\n\n  /** Toggles the tooltip visibility. */\n  toggle = () => {\n    const { tooltip } = this;\n\n    if (tooltip && !hasTip(this)) this.show();\n    else this.hide();\n  };\n\n  /** Enables the tooltip. */\n  enable() {\n    const { enabled } = this;\n    // istanbul ignore else @preserve\n    if (!enabled) {\n      this._toggleEventListeners(true);\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Disables the tooltip. */\n  disable() {\n    const { tooltip, enabled } = this;\n    // istanbul ignore else @preserve\n    if (enabled) {\n      if (tooltip && hasTip(this)) this.hide();\n      this._toggleEventListeners();\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Toggles the `disabled` property. */\n  toggleEnabled() {\n    if (!this.enabled) this.enable();\n    else this.disable();\n  }\n\n  /**\n   * Handles the `touchstart` event listener for `Tooltip`\n   *\n   * @this {Tooltip}\n   * @param {TouchEvent} e the `Event` object\n   */\n  handleTouch = ({ target }: TouchEvent) => {\n    const { tooltip, element } = this;\n\n    // istanbul ignore if @preserve\n    if (\n      (tooltip && tooltip.contains(target as HTMLElement)) ||\n      target === element ||\n      (target && element.contains(target as HTMLElement))\n    ) {\n      // smile for ESLint\n    } else {\n      this.hide();\n    }\n  };\n\n  /**\n   * Toggles on/off the `Tooltip` event listeners.\n   *\n   * @param add when `true`, event listeners are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    // btn is only for dismissible popover\n    const { element, options, btn } = this;\n    const { trigger } = options;\n    const isPopover = this.name !== tooltipComponent;\n    const dismissible = isPopover && (options as PopoverOptions).dismissible ? true : false;\n\n    // istanbul ignore else @preserve\n    if (!trigger.includes('manual')) {\n      this.enabled = !!add;\n\n      const triggerOptions = trigger.split(' ');\n\n      triggerOptions.forEach(tr => {\n        // istanbul ignore else @preserve\n        if (tr === mousehoverEvent) {\n          action(element, mousedownEvent, this.handleShow);\n          action(element, mouseenterEvent, this.handleShow);\n\n          // istanbul ignore else @preserve\n          if (!dismissible) {\n            action(element, mouseleaveEvent, this.handleHide);\n            action(getDocument(element), touchstartEvent, this.handleTouch, passiveHandler);\n          }\n        } else if (tr === mouseclickEvent) {\n          action(element, tr, !dismissible ? this.toggle : this.handleShow);\n        } else if (tr === focusEvent) {\n          action(element, focusinEvent, this.handleShow);\n          // istanbul ignore else @preserve\n          if (!dismissible) action(element, focusoutEvent, this.handleHide);\n          // istanbul ignore else @preserve\n          if (isApple) {\n            action(element, mouseclickEvent, this.handleFocus);\n          }\n        }\n        // istanbul ignore else @preserve\n        if (dismissible && btn) {\n          action(btn, mouseclickEvent, this.handleHide);\n        }\n      });\n    }\n  };\n\n  /** Removes the `Tooltip` from the target element. */\n  dispose() {\n    const { tooltip, options } = this;\n    const clone = { ...this, name: this.name };\n    const callback = () => setTimeout(() => disposeTooltipComplete(clone, () => super.dispose()), 17);\n\n    if (options.animation && hasTip(clone)) {\n      this.options.delay = 0; // reset delay\n      this.hide();\n      emulateTransitionEnd(tooltip as HTMLElement, callback);\n    } else {\n      callback();\n    }\n  }\n}\n"],"names":["popoverString","popoverComponent","tooltipString","getTipTemplate","tipType","isTooltip","bodyClass","header","arrow","body","tipClassPositions","styleTip","self","tipClasses","element","tooltip","container","options","tipPositions","RTL","isRTL","setElementStyle","isPopover","tipWidth","tipHeight","htmlcw","htmlch","htmlow","getDocumentElement","placement","parentCWidth","parentOWidth","fixedParent","getElementStyle","scrollbarWidth","leftBoundry","rightBoundry","elemWidth","elemHeight","elemRectLeft","elemRectRight","elemRectTop","getBoundingClientRect","x","y","topPosition","bottomPosition","leftPosition","rightPosition","arrowTop","arrowLeft","arrowRight","arrowWidth","arrowHeight","arrowAdjust","topExceed","bottomExceed","leftExceed","rightExceed","horizontals","verticals","isHTMLElement","updatedTooltipEvent","createCustomEvent","toLowerCase","dispatchEvent","tooltipDefaults","dataOriginalTitle","tooltipComponent","setHtml","content","sanitizeFn","isString","dirty","isFunction","tempDocument","isNodeList","isArray","isNode","createTip","id","title","template","animation","customClass","dismissible","btnClose","tipString","titleParts","contentParts","placementClass","tooltipTemplate","htmlMarkup","createElement","setAttribute","tooltipHeader","querySelector","tooltipBody","tempTitle","tempContent","tempBtn","addClass","hasClass","fadeClass","getElementContainer","majorBlockTags","containers","parentNode","getParentNode","isShadowRoot","isTableElement","c","i","getDocument","tooltipSelector","dataBsToggle","titleAttr","getTooltipInstance","getInstance","tooltipInitCallback","Tooltip","removeTooltip","offsetParent","removeAttribute","ariaDescribedBy","removePopup","hasTip","hasPopup","disposeTooltipComplete","callback","hasAttribute","toggleTooltipTitle","toggleTooltipAction","add","action","addListener","removeListener","touchstartEvent","passiveHandler","scrollEvent","resizeEvent","ev","getWindow","tooltipShownAction","shownTooltipEvent","Timer","tooltipHiddenAction","hiddenTooltipEvent","toggleTooltipOpenHandlers","offsetHeight","scrollHeight","parentModal","closest","modalString","parentOffcanvas","offcanvasString","win","scrollTarget","titleAtt","getAttribute","BaseComponent","target","config","__publicField","focus","btn","trigger","tr","mousehoverEvent","mousedownEvent","mouseenterEvent","mouseleaveEvent","mouseclickEvent","focusEvent","focusinEvent","focusoutEvent","isApple","tipComponent","elem","getUID","ObjectAssign","position","outTimer","tipContainer","showTooltipEvent","appendPopup","showClass","emulateTransitionEnd","delay","hideTooltipEvent","removeClass","enabled","clone"],"mappings":"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"}