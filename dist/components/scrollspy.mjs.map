{"version":3,"file":"scrollspy.mjs","sources":["../../src/strings/scrollspyString.ts","../../src/strings/scrollspyComponent.ts","../../src/components/scrollspy.ts"],"sourcesContent":["/** @type {string} */\nconst scrollspyString = 'scrollspy';\nexport default scrollspyString;\n","/** @type {string} */\nconst scrollspyComponent = 'ScrollSpy';\nexport default scrollspyComponent;\n","/* Native JavaScript for Bootstrap 5 | ScrollSpy\n------------------------------------------------ */\nimport {\n  getDocumentBody,\n  getDocumentElement,\n  getDocument,\n  getWindow,\n  removeClass,\n  hasClass,\n  addClass,\n  getElementsByTagName,\n  getAttribute,\n  querySelector,\n  isHTMLElement,\n  isWindow,\n  createCustomEvent,\n  getInstance,\n  scrollEvent,\n  // ObjectAssign,\n  passiveHandler,\n  dispatchEvent,\n  getBoundingClientRect,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport activeClass from '../strings/activeClass';\nimport scrollspyString from '../strings/scrollspyString';\nimport scrollspyComponent from '../strings/scrollspyComponent';\n\nimport BaseComponent from './base-component';\nimport { ScrollSpyOptions, ScrollSpyEvent } from '../interface/scrollspy';\n\n// SCROLLSPY PRIVATE GC\n// ====================\nconst scrollspySelector = '[data-bs-spy=\"scroll\"]';\n\nconst scrollspyDefaults: ScrollSpyOptions = {\n  offset: 10,\n  target: null,\n};\n\n/**\n * Static method which returns an existing `ScrollSpy` instance associated\n * to a target `Element`.\n */\nconst getScrollSpyInstance = (element: HTMLElement) => getInstance<ScrollSpy>(element, scrollspyComponent);\n\n/**\n * A `ScrollSpy` initialization callback.\n */\nconst scrollspyInitCallback = (element: HTMLElement) => new ScrollSpy(element);\n\n// SCROLLSPY CUSTOM EVENT\n// ======================\nconst activateScrollSpy = createCustomEvent<ScrollSpyEvent>(`activate.bs.${scrollspyString}`);\n\n// SCROLLSPY PRIVATE METHODS\n// =========================\n/**\n * Update the state of all items.\n *\n * @param self the `ScrollSpy` instance\n */\nconst updateSpyTargets = (self: ScrollSpy) => {\n  const { target, scrollTarget, options, itemsLength, scrollHeight, element } = self;\n  const { offset } = options;\n  const isWin = isWindow(scrollTarget as Node | Window);\n\n  const links = target && getElementsByTagName('A', target);\n  const scrollHEIGHT = scrollTarget && getScrollHeight(scrollTarget);\n\n  self.scrollTop = isWin ? (scrollTarget as Window).scrollY : (scrollTarget as HTMLElement).scrollTop;\n\n  // only update items/offsets once or with each mutation\n  /* istanbul ignore else */\n  if (links && (itemsLength !== links.length || scrollHEIGHT !== scrollHeight)) {\n    let href;\n    let targetItem;\n    let rect;\n\n    // reset arrays & update\n    self.items = [];\n    self.offsets = [];\n    self.scrollHeight = scrollHEIGHT as number;\n    self.maxScroll = self.scrollHeight - getOffsetHeight(self);\n\n    [...links].forEach(link => {\n      href = getAttribute(link, 'href');\n      targetItem =\n        href && href.charAt(0) === '#' && href.slice(-1) !== '#' && querySelector(href, getDocument(element));\n\n      if (targetItem) {\n        self.items.push(link);\n        rect = getBoundingClientRect(targetItem);\n        self.offsets.push((isWin ? rect.top + self.scrollTop : targetItem.offsetTop) - offset);\n      }\n    });\n    self.itemsLength = self.items.length;\n  }\n};\n\n/**\n * Returns the `scrollHeight` property of the scrolling element.\n *\n * @param scrollTarget the `ScrollSpy` instance\n * @return `scrollTarget` height\n */\nconst getScrollHeight = (scrollTarget: Node | Window) => {\n  return isHTMLElement(scrollTarget as Node)\n    ? (scrollTarget as HTMLElement).scrollHeight\n    : getDocumentElement(scrollTarget as Node).scrollHeight;\n};\n\n/**\n * Returns the height property of the scrolling element.\n *\n * @param params the `ScrollSpy` instance\n */\nconst getOffsetHeight = ({ element, scrollTarget }: ScrollSpy) => {\n  return isWindow(scrollTarget as Node) ? (scrollTarget as Window).innerHeight : getBoundingClientRect(element).height;\n};\n\n/**\n * Clear all items of the target.\n *\n * @param target a single item\n */\nconst clear = (target: HTMLElement) => {\n  [...getElementsByTagName('A', target)].forEach(item => {\n    if (hasClass(item, activeClass)) removeClass(item, activeClass);\n  });\n};\n\n/**\n * Activates a new item.\n *\n * @param self the `ScrollSpy` instance\n * @param item a single item\n */\nconst activate = (self: ScrollSpy, item: HTMLElement) => {\n  const { target, element } = self;\n  if (isHTMLElement(target)) clear(target);\n  self.activeItem = item;\n  addClass(item, activeClass);\n\n  // activate all parents\n  const parents: HTMLElement[] = [];\n  let parentItem = item;\n  while (parentItem !== getDocumentBody(element)) {\n    parentItem = parentItem.parentElement as HTMLElement;\n    if (hasClass(parentItem, 'nav') || hasClass(parentItem, 'dropdown-menu')) parents.push(parentItem);\n  }\n\n  parents.forEach(menuItem => {\n    const parentLink = menuItem.previousElementSibling as HTMLElement | null;\n\n    /* istanbul ignore else */\n    if (parentLink && !hasClass(parentLink, activeClass)) {\n      addClass(parentLink, activeClass);\n    }\n  });\n\n  // dispatch\n  activateScrollSpy.relatedTarget = item;\n  dispatchEvent(element, activateScrollSpy);\n};\n\n/**\n * Toggles on/off the component event listener.\n *\n * @param self the `ScrollSpy` instance\n * @param add when `true`, listener is added\n */\nconst toggleSpyHandlers = (self: ScrollSpy, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  action(self.scrollTarget as EventTarget, scrollEvent, self.refresh, passiveHandler);\n};\n\n// SCROLLSPY DEFINITION\n// ====================\n/** Returns a new `ScrollSpy` instance. */\nexport default class ScrollSpy extends BaseComponent {\n  static selector = scrollspySelector;\n  static init = scrollspyInitCallback;\n  static getInstance = getScrollSpyInstance;\n  declare options: ScrollSpyOptions;\n  declare target: HTMLElement | null;\n  declare scrollTarget: HTMLElement | Window | null;\n  declare scrollTop: number;\n  declare maxScroll: number;\n  declare scrollHeight: number;\n  declare activeItem: HTMLElement | null;\n  declare items: HTMLElement[];\n  declare itemsLength: number;\n  declare offsets: number[];\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ScrollSpyOptions>) {\n    super(target, config);\n\n    // initialization element & options\n    const { element, options } = this;\n\n    // additional properties\n    this.target = querySelector(options.target as HTMLElement | string, getDocument(element));\n\n    // invalidate\n    if (!this.target) return;\n\n    // set initial state\n    this.scrollTarget = element.clientHeight < element.scrollHeight ? element : getWindow(element);\n\n    // bind events\n    this.refresh = this.refresh.bind(this);\n\n    // add event handlers\n    toggleSpyHandlers(this, true);\n\n    this.refresh();\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return scrollspyComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return scrollspyDefaults;\n  }\n  /* eslint-enable */\n\n  // SCROLLSPY PUBLIC METHODS\n  // ========================\n  /** Updates all items. */\n  refresh() {\n    const { target } = this;\n\n    // check if target is visible and invalidate\n    /* istanbul ignore next */\n    if (target?.offsetHeight === 0) return;\n\n    updateSpyTargets(this);\n\n    const { scrollTop, maxScroll, itemsLength, items, activeItem } = this;\n\n    if (scrollTop >= maxScroll) {\n      const newActiveItem = items[itemsLength - 1];\n\n      /* istanbul ignore else */\n      if (activeItem !== newActiveItem) {\n        activate(this, newActiveItem);\n      }\n      return;\n    }\n\n    const { offsets } = this;\n\n    if (activeItem && scrollTop < offsets[0] && offsets[0] > 0) {\n      this.activeItem = null;\n      if (isHTMLElement(target)) clear(target);\n      return;\n    }\n\n    items.forEach((item, i) => {\n      if (\n        activeItem !== item &&\n        scrollTop >= offsets[i] &&\n        (typeof offsets[i + 1] === 'undefined' || scrollTop < offsets[i + 1])\n      ) {\n        activate(this, item);\n      }\n    });\n  }\n\n  /** Removes `ScrollSpy` from the target element. */\n  dispose() {\n    toggleSpyHandlers(this);\n    super.dispose();\n  }\n}\n"],"names":["scrollspyString","scrollspyComponent","scrollspySelector","scrollspyDefaults","getScrollSpyInstance","element","getInstance","scrollspyInitCallback","ScrollSpy","activateScrollSpy","createCustomEvent","updateSpyTargets","self","target","scrollTarget","options","itemsLength","scrollHeight","offset","isWin","isWindow","links","getElementsByTagName","scrollHEIGHT","getScrollHeight","href","targetItem","rect","getOffsetHeight","link","getAttribute","querySelector","getDocument","getBoundingClientRect","isHTMLElement","getDocumentElement","clear","item","hasClass","activeClass","removeClass","activate","addClass","parents","parentItem","getDocumentBody","menuItem","parentLink","dispatchEvent","toggleSpyHandlers","add","addListener","removeListener","scrollEvent","passiveHandler","BaseComponent","config","getWindow","scrollTop","maxScroll","items","activeItem","newActiveItem","offsets","i"],"mappings":"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"}