{"version":3,"file":"scrollspy.mjs","sources":["../../src/strings/scrollspyString.ts","../../src/strings/scrollspyComponent.ts","../../src/components/scrollspy.ts"],"sourcesContent":["/** @type {string} */\nconst scrollspyString = 'scrollspy';\nexport default scrollspyString;\n","/** @type {string} */\nconst scrollspyComponent = 'ScrollSpy';\nexport default scrollspyComponent;\n","/* Native JavaScript for Bootstrap 5 | ScrollSpy\n------------------------------------------------ */\nimport {\n  getDocumentBody,\n  getDocumentElement,\n  getDocument,\n  getWindow,\n  removeClass,\n  hasClass,\n  addClass,\n  getElementsByTagName,\n  getAttribute,\n  querySelector,\n  isHTMLElement,\n  isWindow,\n  createCustomEvent,\n  getInstance,\n  scrollEvent,\n  passiveHandler,\n  dispatchEvent,\n  getBoundingClientRect,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport activeClass from '../strings/activeClass';\nimport scrollspyString from '../strings/scrollspyString';\nimport scrollspyComponent from '../strings/scrollspyComponent';\n\nimport BaseComponent from './base-component';\nimport { ScrollSpyOptions, ScrollSpyEvent } from '../interface/scrollspy';\n\n// SCROLLSPY PRIVATE GC\n// ====================\nconst scrollspySelector = '[data-bs-spy=\"scroll\"]';\n\nconst scrollspyDefaults: ScrollSpyOptions = {\n  offset: 10,\n  target: null,\n};\n\n/**\n * Static method which returns an existing `ScrollSpy` instance associated\n * to a target `Element`.\n */\nconst getScrollSpyInstance = (element: HTMLElement) => getInstance<ScrollSpy>(element, scrollspyComponent);\n\n/**\n * A `ScrollSpy` initialization callback.\n */\nconst scrollspyInitCallback = (element: HTMLElement) => new ScrollSpy(element);\n\n// SCROLLSPY CUSTOM EVENT\n// ======================\nconst activateScrollSpy = createCustomEvent<ScrollSpyEvent>(`activate.bs.${scrollspyString}`);\n\n// SCROLLSPY PRIVATE METHODS\n// =========================\n/**\n * Update the state of all items.\n *\n * @param self the `ScrollSpy` instance\n */\nconst updateSpyTargets = (self: ScrollSpy) => {\n  const { target, scrollTarget, options, itemsLength, scrollHeight, element } = self;\n  const { offset } = options;\n  const isWin = isWindow(scrollTarget as Node | Window);\n\n  const links = target && getElementsByTagName('A', target);\n  const scrollHEIGHT = scrollTarget ? getScrollHeight(scrollTarget) : /* istanbul ignore next */ scrollHeight;\n\n  self.scrollTop = isWin ? (scrollTarget as Window).scrollY : (scrollTarget as HTMLElement).scrollTop;\n\n  // only update items/offsets once or with each mutation\n  /* istanbul ignore else */\n  if (links && (scrollHEIGHT !== scrollHeight || itemsLength !== links.length)) {\n    let href;\n    let targetItem;\n    let rect;\n\n    // reset arrays & update\n    self.items = [];\n    self.offsets = [];\n    self.scrollHeight = scrollHEIGHT;\n    self.maxScroll = self.scrollHeight - getOffsetHeight(self);\n\n    [...links].forEach(link => {\n      href = getAttribute(link, 'href');\n      targetItem =\n        href && href.charAt(0) === '#' && href.slice(-1) !== '#' && querySelector(href, getDocument(element));\n\n      if (targetItem) {\n        self.items.push(link);\n        rect = getBoundingClientRect(targetItem);\n        self.offsets.push((isWin ? rect.top + self.scrollTop : targetItem.offsetTop) - offset);\n      }\n    });\n    self.itemsLength = self.items.length;\n  }\n};\n\n/**\n * Returns the `scrollHeight` property of the scrolling element.\n *\n * @param scrollTarget the `ScrollSpy` instance\n * @return `scrollTarget` height\n */\nconst getScrollHeight = (scrollTarget: Node | Window) => {\n  return isHTMLElement(scrollTarget as Node)\n    ? (scrollTarget as HTMLElement).scrollHeight\n    : getDocumentElement(scrollTarget as Node).scrollHeight;\n};\n\n/**\n * Returns the height property of the scrolling element.\n *\n * @param params the `ScrollSpy` instance\n */\nconst getOffsetHeight = ({ element, scrollTarget }: ScrollSpy) => {\n  return isWindow(scrollTarget as Node) ? (scrollTarget as Window).innerHeight : getBoundingClientRect(element).height;\n};\n\n/**\n * Clear all items of the target.\n *\n * @param target a single item\n */\nconst clear = (target: HTMLElement) => {\n  [...getElementsByTagName('A', target)].forEach(item => {\n    if (hasClass(item, activeClass)) removeClass(item, activeClass);\n  });\n};\n\n/**\n * Activates a new item.\n *\n * @param self the `ScrollSpy` instance\n * @param item a single item\n */\nconst activate = (self: ScrollSpy, item: HTMLElement) => {\n  const { target, element } = self;\n  if (isHTMLElement(target)) clear(target);\n  self.activeItem = item;\n  addClass(item, activeClass);\n\n  // activate all parents\n  const parents: HTMLElement[] = [];\n  let parentItem = item;\n  while (parentItem !== getDocumentBody(element)) {\n    parentItem = parentItem.parentElement as HTMLElement;\n    if (hasClass(parentItem, 'nav') || hasClass(parentItem, 'dropdown-menu')) parents.push(parentItem);\n  }\n\n  parents.forEach(menuItem => {\n    const parentLink = menuItem.previousElementSibling as HTMLElement | null;\n\n    /* istanbul ignore else */\n    if (parentLink && !hasClass(parentLink, activeClass)) {\n      addClass(parentLink, activeClass);\n    }\n  });\n\n  // dispatch\n  activateScrollSpy.relatedTarget = item;\n  dispatchEvent(element, activateScrollSpy);\n};\n\n// SCROLLSPY DEFINITION\n// ====================\n/** Returns a new `ScrollSpy` instance. */\nexport default class ScrollSpy extends BaseComponent {\n  static selector = scrollspySelector;\n  static init = scrollspyInitCallback;\n  static getInstance = getScrollSpyInstance;\n  declare options: ScrollSpyOptions;\n  declare target: HTMLElement | null;\n  declare scrollTarget: HTMLElement | Window;\n  declare scrollTop: number;\n  declare maxScroll: number;\n  declare scrollHeight: number;\n  declare activeItem: HTMLElement | null;\n  declare items: HTMLElement[];\n  declare itemsLength: number;\n  declare offsets: number[];\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ScrollSpyOptions>) {\n    super(target, config);\n\n    // initialization element & options\n    const { element, options } = this;\n\n    // additional properties\n    this.target = querySelector(options.target as HTMLElement | string, getDocument(element));\n\n    // invalidate\n    if (this.target) {\n      // set initial state\n      this.scrollTarget = element.clientHeight < element.scrollHeight ? element : getWindow(element);\n      this.scrollHeight = getScrollHeight(this.scrollTarget);\n\n      // add event handlers\n      this._toggleEventListeners(true);\n\n      this.refresh();\n    }\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return scrollspyComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return scrollspyDefaults;\n  }\n  /* eslint-enable */\n\n  // SCROLLSPY PUBLIC METHODS\n  // ========================\n  /** Updates all items. */\n  refresh = () => {\n    const { target } = this;\n\n    // check if target is visible and invalidate\n    /* istanbul ignore else */\n    if (isHTMLElement(target) && target.offsetHeight > 0) {\n      updateSpyTargets(this);\n\n      const { scrollTop, maxScroll, itemsLength, items, activeItem } = this;\n\n      if (scrollTop >= maxScroll) {\n        const newActiveItem = items[itemsLength - 1];\n\n        /* istanbul ignore else */\n        if (activeItem !== newActiveItem) {\n          activate(this, newActiveItem);\n        }\n        return;\n      }\n\n      const { offsets } = this;\n\n      if (activeItem && scrollTop < offsets[0] && offsets[0] > 0) {\n        this.activeItem = null;\n        if (target) clear(target);\n        return;\n      }\n\n      items.forEach((item, i) => {\n        if (\n          activeItem !== item &&\n          scrollTop >= offsets[i] &&\n          (typeof offsets[i + 1] === 'undefined' || scrollTop < offsets[i + 1])\n        ) {\n          activate(this, item);\n        }\n      });\n    }\n  };\n\n  /**\n   * Toggles on/off the component event listener.\n   *\n   * @param add when `true`, listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    action(this.scrollTarget as EventTarget, scrollEvent, this.refresh, passiveHandler);\n  };\n\n  /** Removes `ScrollSpy` from the target element. */\n  dispose() {\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n"],"names":["scrollspyString","scrollspyComponent","scrollspySelector","scrollspyDefaults","getScrollSpyInstance","element","getInstance","scrollspyInitCallback","ScrollSpy","activateScrollSpy","createCustomEvent","updateSpyTargets","self","target","scrollTarget","options","itemsLength","scrollHeight","offset","isWin","isWindow","links","getElementsByTagName","scrollHEIGHT","getScrollHeight","href","targetItem","rect","getOffsetHeight","link","getAttribute","querySelector","getDocument","getBoundingClientRect","isHTMLElement","getDocumentElement","clear","item","hasClass","activeClass","removeClass","activate","addClass","parents","parentItem","getDocumentBody","menuItem","parentLink","dispatchEvent","BaseComponent","config","__publicField","scrollTop","maxScroll","items","activeItem","newActiveItem","offsets","i","add","addListener","removeListener","scrollEvent","passiveHandler","getWindow"],"mappings":"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"}