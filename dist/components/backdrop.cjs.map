{"version":3,"file":"backdrop.cjs","sources":["../../src/util/backdrop.ts"],"sourcesContent":["import {\n  createElement,\n  getDocument,\n  reflow,\n  removeClass,\n  hasClass,\n  addClass,\n  querySelector,\n  getDocumentBody,\n} from '@thednp/shorty';\n\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport modalString from '../strings/modalString';\nimport offcanvasString from '../strings/offcanvasString';\nimport { resetScrollbar } from './scrollbar';\nimport { appendPopup, removePopup } from './popupContainer';\n\nconst backdropString = 'backdrop';\nconst modalBackdropClass = `${modalString}-${backdropString}`;\nconst offcanvasBackdropClass = `${offcanvasString}-${backdropString}`;\nconst modalActiveSelector = `.${modalString}.${showClass}`;\nconst offcanvasActiveSelector = `.${offcanvasString}.${showClass}`;\n\n// any document would suffice\nconst overlay = createElement('div') as HTMLElement;\n\n/**\n * Returns the current active modal / offcancas element.\n *\n * @param element the context element\n * @returns the requested element\n */\nconst getCurrentOpen = (element?: HTMLElement): HTMLElement | null => {\n  return querySelector(`${modalActiveSelector},${offcanvasActiveSelector}`, getDocument(element));\n};\n\n/**\n * Toogles from a Modal overlay to an Offcanvas, or vice-versa.\n *\n * @param isModal\n */\nconst toggleOverlayType = (isModal?: boolean) => {\n  const targetClass = isModal ? modalBackdropClass : offcanvasBackdropClass;\n  [modalBackdropClass, offcanvasBackdropClass].forEach(c => {\n    removeClass(overlay, c);\n  });\n  addClass(overlay, targetClass);\n};\n\n/**\n * Append the overlay to DOM.\n *\n * @param element\n * @param hasFade\n * @param isModal\n */\nconst appendOverlay = (element: HTMLElement, hasFade: boolean, isModal?: boolean) => {\n  toggleOverlayType(isModal);\n  appendPopup(overlay, getDocumentBody(element));\n  if (hasFade) addClass(overlay, fadeClass);\n};\n\n/**\n * Shows the overlay to the user.\n */\nconst showOverlay = () => {\n  if (!hasClass(overlay, showClass)) {\n    addClass(overlay, showClass);\n    reflow(overlay);\n  }\n};\n\n/**\n * Hides the overlay from the user.\n */\nconst hideOverlay = () => {\n  removeClass(overlay, showClass);\n};\n\n/**\n * Removes the overlay from DOM.\n *\n * @param element\n */\nconst removeOverlay = (element?: HTMLElement): void => {\n  if (!getCurrentOpen(element)) {\n    removeClass(overlay, fadeClass);\n    removePopup(overlay, getDocumentBody(element));\n    resetScrollbar(element);\n  }\n};\n\nexport {\n  overlay,\n  offcanvasBackdropClass,\n  modalBackdropClass,\n  modalActiveSelector,\n  offcanvasActiveSelector,\n  toggleOverlayType,\n  appendOverlay,\n  showOverlay,\n  hideOverlay,\n  getCurrentOpen,\n  removeOverlay,\n};\n"],"names":["backdropString","modalBackdropClass","modalString","offcanvasBackdropClass","offcanvasString","modalActiveSelector","showClass","offcanvasActiveSelector","overlay","createElement","getCurrentOpen","element","querySelector","getDocument","toggleOverlayType","isModal","targetClass","c","removeClass","addClass","appendOverlay","hasFade","appendPopup","getDocumentBody","fadeClass","showOverlay","hasClass","reflow","hideOverlay","removeOverlay","removePopup","resetScrollbar"],"mappings":"gTAkBMA,EAAiB,WACjBC,EAAqB,GAAGC,EAAAA,eAAeF,IACvCG,EAAyB,GAAGC,EAAAA,mBAAmBJ,IAC/CK,EAAsB,IAAIH,EAAe,eAAAI,EAAA,YACzCC,EAA0B,IAAIH,EAAmB,mBAAAE,EAAA,YAGjDE,EAAUC,KAAc,KAAK,EAQ7BC,EAAkBC,GACfC,KAAc,GAAGP,KAAuBE,IAA2BM,EAAAA,EAAYF,CAAO,CAAC,EAQ1FG,EAAqBC,GAAsB,CACzC,MAAAC,EAAcD,EAAUd,EAAqBE,EACnD,CAACF,EAAoBE,CAAsB,EAAE,QAAac,GAAA,CACxDC,KAAYV,EAASS,CAAC,CAAA,CACvB,EACDE,KAASX,EAASQ,CAAW,CAC/B,EASMI,EAAgB,CAACT,EAAsBU,EAAkBN,IAAsB,CACnFD,EAAkBC,CAAO,EACbO,EAAAA,YAAAd,EAASe,KAAgBZ,CAAO,CAAC,EACzCU,GAASF,KAASX,EAASgB,EAAAA,SAAS,CAC1C,EAKMC,EAAc,IAAM,CACnBC,EAAA,GAASlB,EAASF,EAAAA,SAAS,IAC9Ba,KAASX,EAASF,EAAAA,SAAS,EAC3BqB,EAAA,GAAOnB,CAAO,EAElB,EAKMoB,EAAc,IAAM,CACxBV,KAAYV,EAASF,EAAAA,SAAS,CAChC,EAOMuB,EAAiBlB,GAAgC,CAChDD,EAAeC,CAAO,IACzBO,KAAYV,EAASgB,EAAAA,SAAS,EAClBM,EAAAA,YAAAtB,EAASe,KAAgBZ,CAAO,CAAC,EAC7CoB,EAAA,eAAepB,CAAO,EAE1B"}