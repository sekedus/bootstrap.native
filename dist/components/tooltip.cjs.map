{"version":3,"file":"tooltip.cjs","sources":["../../src/strings/dataOriginalTitle.ts","../../src/components/tooltip.ts"],"sourcesContent":["/**\n * Global namespace for `data-bs-title` attribute.\n */\nconst dataOriginalTitle = 'data-original-title';\nexport default dataOriginalTitle;\n","/* Native JavaScript for Bootstrap 5 | Tooltip\n---------------------------------------------- */\nimport {\n  ariaDescribedBy,\n  focusoutEvent,\n  focusinEvent,\n  focusEvent,\n  mousemoveEvent,\n  mouseleaveEvent,\n  mouseenterEvent,\n  mousedownEvent,\n  mouseclickEvent,\n  closest,\n  getUID,\n  getDocument,\n  getWindow,\n  removeAttribute,\n  getAttribute,\n  setAttribute,\n  hasAttribute,\n  touchstartEvent,\n  resizeEvent,\n  scrollEvent,\n  mousehoverEvent,\n  toLowerCase,\n  focus,\n  Timer,\n  emulateTransitionEnd,\n  passiveHandler,\n  dispatchEvent,\n  isApple,\n  isMedia,\n  isFunction,\n  getInstance,\n  ObjectAssign,\n  createCustomEvent,\n  removeClass,\n  hasClass,\n  addClass,\n  getElementStyle,\n} from '@thednp/shorty';\n\nimport { addListener, removeListener } from '@thednp/event-listener';\n\nimport dataBsToggle from '../strings/dataBsToggle';\nimport dataOriginalTitle from '../strings/dataOriginalTitle';\nimport showClass from '../strings/showClass';\nimport tooltipString from '../strings/tooltipString';\nimport tooltipComponent from '../strings/tooltipComponent';\nimport popoverString from '../strings/popoverString';\nimport popoverComponent from '../strings/popoverComponent';\nimport modalString from '../strings/modalString';\nimport offcanvasString from '../strings/offcanvasString';\n\nimport styleTip from '../util/styleTip';\nimport createTip from '../util/createTip';\nimport { appendPopup, removePopup, hasPopup } from '../util/popupContainer';\nimport getElementContainer from '../util/getElementContainer';\nimport tooltipDefaults from '../util/tooltipDefaults';\nimport BaseComponent from './base-component';\nimport { TooltipOptions, TooltipEvent } from '../interface/tooltip';\nimport { PopoverOptions, PopoverEvent } from '../interface/popover';\n\n// TOOLTIP PRIVATE GC\n// ==================\nconst tooltipSelector = `[${dataBsToggle}=\"${tooltipString}\"],[data-tip=\"${tooltipString}\"]`;\nconst titleAttr = 'title';\n\n/**\n * Static method which returns an existing `Tooltip` instance associated\n * to a target `Element`.\n *\n */\nlet getTooltipInstance = (element: HTMLElement) => getInstance<Tooltip>(element, tooltipComponent);\n\n/**\n * A `Tooltip` initialization callback.\n */\nconst tooltipInitCallback = (element: HTMLElement) => new Tooltip(element);\n\n// TOOLTIP PRIVATE METHODS\n// =======================\n/**\n * Removes the tooltip from the DOM.\n *\n * @param self the `Tooltip` instance\n */\nconst removeTooltip = (self: Tooltip) => {\n  const { element, tooltip, container, offsetParent } = self;\n  removeAttribute(element, ariaDescribedBy);\n  removePopup(tooltip, container === offsetParent ? container : undefined);\n};\n\n/**\n * Executes after the instance has been disposed.\n *\n * @param self the `Tooltip` instance\n * @param callback the parent dispose callback\n */\nconst disposeTooltipComplete = (self: Tooltip, callback?: () => void) => {\n  const { element } = self;\n  toggleTooltipHandlers(self);\n\n  /* istanbul ignore else */\n  if (hasAttribute(element, dataOriginalTitle) && self.name === tooltipComponent) {\n    toggleTooltipTitle(self);\n  }\n  /* istanbul ignore else */\n  if (callback) callback();\n};\n\n/**\n * Toggles on/off the special `Tooltip` event listeners.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipAction = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n\n  action(getDocument(element), touchstartEvent, self.handleTouch as EventListener, passiveHandler);\n\n  /* istanbul ignore else */\n  if (!isMedia(element)) {\n    [scrollEvent, resizeEvent].forEach(ev => {\n      action(getWindow(element), ev, self.update, passiveHandler);\n    });\n  }\n};\n\n/**\n * Executes after the tooltip was shown to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipShownAction = (self: Tooltip) => {\n  const { element } = self;\n  const shownTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`shown.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self, true);\n  dispatchEvent(element, shownTooltipEvent);\n  Timer.clear(element, 'in');\n};\n\n/**\n * Executes after the tooltip was hidden to the user.\n *\n * @param self the `Tooltip` instance\n * @param callback the dispose callback\n */\nconst tooltipHiddenAction = (self: Tooltip, callback?: () => any) => {\n  const { element } = self;\n  const hiddenTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`hidden.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self);\n  removeTooltip(self);\n  dispatchEvent(element, hiddenTooltipEvent);\n  if (isFunction(callback)) callback();\n  Timer.clear(element, 'out');\n};\n\n/**\n * Toggles on/off the `Tooltip` event listeners.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipHandlers = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  // btn is only for dismissible popover\n  const { element, options, btn } = self;\n  const { trigger } = options;\n  const isPopover = self.name !== tooltipComponent;\n  const dismissible = isPopover && (options as PopoverOptions).dismissible ? true : false;\n\n  if (trigger?.includes('manual')) return;\n\n  self.enabled = !!add;\n\n  const triggerOptions = trigger?.split(' ');\n  const elemIsMedia = isMedia(element);\n\n  if (elemIsMedia) {\n    action(element, mousemoveEvent, self.update, passiveHandler);\n  }\n\n  triggerOptions?.forEach(tr => {\n    /* istanbul ignore else */\n    if (elemIsMedia || tr === mousehoverEvent) {\n      action(element, mousedownEvent, self.show);\n      action(element, mouseenterEvent, self.show);\n\n      /* istanbul ignore else */\n      if (dismissible && btn) {\n        action(btn, mouseclickEvent, self.hide);\n      } else {\n        action(element, mouseleaveEvent, self.hide);\n        action(getDocument(element), touchstartEvent, self.handleTouch as EventListener, passiveHandler);\n      }\n    } else if (tr === mouseclickEvent) {\n      action(element, tr, !dismissible ? self.toggle : self.show);\n    } else if (tr === focusEvent) {\n      action(element, focusinEvent, self.show);\n      /* istanbul ignore else */\n      if (!dismissible) action(element, focusoutEvent, self.hide);\n      /* istanbul ignore else */\n      if (isApple) {\n        action(element, mouseclickEvent, () => focus(element));\n      }\n    }\n  });\n};\n\n/**\n * Toggles on/off the `Tooltip` event listeners that hide/update the tooltip.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipOpenHandlers = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element, container, offsetParent } = self;\n  const { offsetHeight, scrollHeight } = container as HTMLElement;\n  const parentModal = closest(element, `.${modalString}`);\n  const parentOffcanvas = closest(element, `.${offcanvasString}`);\n\n  /* istanbul ignore else */\n  if (!isMedia(element)) {\n    const win = getWindow(element);\n    const overflow = offsetHeight !== scrollHeight;\n    const scrollTarget = overflow && container === offsetParent ? container : win;\n    action(scrollTarget, resizeEvent, self.update, passiveHandler);\n    action(scrollTarget, scrollEvent, self.update, passiveHandler);\n  }\n\n  // dismiss tooltips inside modal / offcanvas\n  if (parentModal) action(parentModal, `hide.bs.${modalString}`, self.hide);\n  if (parentOffcanvas) action(parentOffcanvas, `hide.bs.${offcanvasString}`, self.hide);\n};\n\n/**\n * Toggles the `title` and `data-original-title` attributes.\n *\n * @param self the `Tooltip` instance\n * @param content when `true`, event listeners are added\n */\nconst toggleTooltipTitle = (self: Tooltip, content?: string) => {\n  // [0 - add, 1 - remove] | [0 - remove, 1 - add]\n  const titleAtt = [dataOriginalTitle, titleAttr];\n  const { element } = self;\n\n  setAttribute(element, titleAtt[content ? 0 : 1], content || getAttribute(element, titleAtt[0]) || '');\n  removeAttribute(element, titleAtt[content ? 1 : 0]);\n};\n\n// TOOLTIP DEFINITION\n// ==================\n/** Creates a new `Tooltip` instance. */\nexport default class Tooltip extends BaseComponent {\n  static selector = tooltipSelector;\n  static init = tooltipInitCallback;\n  static getInstance = getTooltipInstance;\n  static styleTip = styleTip;\n  declare options: TooltipOptions;\n  declare btn?: HTMLElement;\n  declare tooltip?: HTMLElement;\n  declare container: ParentNode;\n  declare arrow?: HTMLElement;\n  declare offsetParent?: HTMLElement;\n  declare enabled: boolean;\n  declare id: string;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<TooltipOptions>) {\n    super(target, config);\n\n    const { element } = this;\n    const isTooltip = this.name === tooltipComponent;\n    const tipString = isTooltip ? tooltipString : popoverString;\n    const tipComponent = isTooltip ? tooltipComponent : popoverComponent;\n\n    /* istanbul ignore next: this is to set Popover too */\n    getTooltipInstance = <T extends Tooltip>(elem: HTMLElement) => getInstance<T>(elem, tipComponent);\n\n    // additional properties\n    this.enabled = true;\n    /** Set unique ID for `aria-describedby`. */\n    this.id = `${tipString}-${getUID(element, tipString)}`;\n\n    // instance options\n    const { options } = this;\n\n    // invalidate\n    if ((!options.title && isTooltip) || (!isTooltip && !options.content)) {\n      // throw Error(`${this.name} Error: target has no content set.`);\n      return;\n    }\n\n    // reset default options\n    ObjectAssign(tooltipDefaults, { titleAttr: '' });\n\n    // all functions bind\n    this.handleTouch = this.handleTouch.bind(this);\n    this.update = this.update.bind(this);\n    this.show = this.show.bind(this);\n    this.hide = this.hide.bind(this);\n    this.toggle = this.toggle.bind(this);\n\n    // set title attributes and add event listeners\n    /* istanbul ignore else */\n    if (hasAttribute(element, titleAttr) && isTooltip && typeof options.title === 'string') {\n      toggleTooltipTitle(this, options.title);\n    }\n\n    // set containers\n    this.container = getElementContainer(element);\n    this.offsetParent = ['sticky', 'fixed'].some(\n      position => getElementStyle(this.container as HTMLElement, 'position') === position,\n    )\n      ? (this.container as HTMLElement)\n      : getDocument(this.element).body;\n\n    // create tooltip here\n    createTip(this);\n\n    // attach events\n    toggleTooltipHandlers(this, true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return tooltipComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return tooltipDefaults;\n  }\n\n  // TOOLTIP PUBLIC METHODS\n  // ======================\n  /**\n   * Shows the tooltip.\n   *\n   * @param e the `Event` object\n   */\n  show(e?: Event) {\n    const { options, tooltip, element, container, offsetParent, id } = this;\n    const { animation } = options;\n    const outTimer = Timer.get(element, 'out');\n\n    Timer.clear(element, 'out');\n\n    if (tooltip && !outTimer && !hasPopup(tooltip, container === offsetParent ? container : undefined)) {\n      Timer.set(\n        element,\n        () => {\n          const showTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`show.bs.${toLowerCase(this.name)}`);\n          dispatchEvent(element, showTooltipEvent);\n          if (showTooltipEvent.defaultPrevented) return;\n\n          // append to container\n          appendPopup(tooltip, container === offsetParent ? container : undefined);\n\n          setAttribute(element, ariaDescribedBy, `#${id}`);\n\n          this.update(e);\n          toggleTooltipOpenHandlers(this, true);\n\n          /* istanbul ignore else */\n          if (!hasClass(tooltip, showClass)) addClass(tooltip, showClass);\n          /* istanbul ignore else */\n          if (animation) emulateTransitionEnd(tooltip, () => tooltipShownAction(this));\n          else tooltipShownAction(this);\n        },\n        17,\n        'in',\n      );\n    }\n  }\n\n  /**\n   * Hides the tooltip.\n   *\n   * @param e the dispose callback\n   * @param callback the dispose callback\n   */\n  hide(e?: Event, callback?: () => void) {\n    const { options, tooltip, element, container, offsetParent } = this;\n    const { animation, delay } = options;\n\n    Timer.clear(element, 'in');\n\n    /* istanbul ignore else */\n    if (tooltip && hasPopup(tooltip, container === offsetParent ? container : undefined)) {\n      Timer.set(\n        element,\n        () => {\n          const hideTooltipEvent = createCustomEvent<TooltipEvent | PopoverEvent>(`hide.bs.${toLowerCase(this.name)}`);\n          dispatchEvent(element, hideTooltipEvent);\n\n          if (hideTooltipEvent.defaultPrevented) return;\n\n          this.update(e); // use Event\n          removeClass(tooltip, showClass);\n          toggleTooltipOpenHandlers(this);\n\n          /* istanbul ignore else */\n          if (animation) emulateTransitionEnd(tooltip, () => tooltipHiddenAction(this, callback));\n          else tooltipHiddenAction(this, callback);\n        },\n        delay + 17,\n        'out',\n      );\n    }\n  }\n\n  /**\n   * Updates the tooltip position.\n   *\n   * @param e the `Event` object\n   */\n  update(e?: Event) {\n    styleTip<Tooltip>(this, e as (Event & PointerEvent) | undefined);\n  }\n\n  /**\n   * Toggles the tooltip visibility.\n   *\n   * @param e the `Event` object\n   */\n  toggle(e?: Event) {\n    const { tooltip, container, offsetParent } = this;\n\n    if (tooltip && !hasPopup(tooltip, container === offsetParent ? container : undefined)) this.show(e);\n    else this.hide();\n  }\n\n  /** Enables the tooltip. */\n  enable() {\n    const { enabled } = this;\n    /* istanbul ignore else */\n    if (!enabled) {\n      toggleTooltipHandlers(this, true);\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Disables the tooltip. */\n  disable() {\n    const { tooltip, container, offsetParent, options, enabled } = this;\n    const { animation } = options;\n    /* istanbul ignore else */\n    if (enabled) {\n      if (tooltip && hasPopup(tooltip, container === offsetParent ? container : undefined) && animation) {\n        this.hide(undefined, () => toggleTooltipHandlers(this));\n      } else {\n        toggleTooltipHandlers(this);\n      }\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Toggles the `disabled` property. */\n  toggleEnabled() {\n    if (!this.enabled) this.enable();\n    else this.disable();\n  }\n\n  /**\n   * Handles the `touchstart` event listener for `Tooltip`\n   *\n   * @this {Tooltip}\n   * @param {TouchEvent} e the `Event` object\n   */\n  handleTouch({ target }: TouchEvent) {\n    const { tooltip, element } = this;\n\n    /* istanbul ignore next */\n    if (\n      (tooltip && tooltip.contains(target as HTMLElement)) ||\n      target === element ||\n      (target && element.contains(target as HTMLElement))\n    ) {\n      // smile for ESLint\n    } else {\n      this.hide();\n    }\n  }\n\n  /** Removes the `Tooltip` from the target element. */\n  dispose() {\n    const { tooltip, container, offsetParent, options } = this;\n    const callback = () => disposeTooltipComplete(this, () => super.dispose());\n\n    if (options.animation && tooltip && hasPopup(tooltip, container === offsetParent ? container : undefined)) {\n      this.options.delay = 0; // reset delay\n      this.hide(undefined, callback);\n    } else {\n      callback();\n    }\n  }\n}\n"],"names":["dataOriginalTitle","tooltipSelector","dataBsToggle","tooltipString","titleAttr","getTooltipInstance","element","getInstance","tooltipComponent","tooltipInitCallback","Tooltip","removeTooltip","self","tooltip","container","offsetParent","removeAttribute","ariaDescribedBy","removePopup","disposeTooltipComplete","callback","toggleTooltipHandlers","hasAttribute","toggleTooltipTitle","toggleTooltipAction","add","action","addListener","removeListener","getDocument","touchstartEvent","passiveHandler","isMedia","scrollEvent","resizeEvent","ev","getWindow","tooltipShownAction","shownTooltipEvent","createCustomEvent","toLowerCase","dispatchEvent","Timer","tooltipHiddenAction","hiddenTooltipEvent","isFunction","options","btn","trigger","dismissible","triggerOptions","elemIsMedia","mousemoveEvent","tr","mousehoverEvent","mousedownEvent","mouseenterEvent","mouseclickEvent","mouseleaveEvent","focusEvent","focusinEvent","focusoutEvent","isApple","focus","toggleTooltipOpenHandlers","offsetHeight","scrollHeight","parentModal","closest","modalString","parentOffcanvas","offcanvasString","win","scrollTarget","content","titleAtt","setAttribute","getAttribute","BaseComponent","styleTip","target","config","isTooltip","tipString","popoverString","tipComponent","popoverComponent","elem","getUID","ObjectAssign","tooltipDefaults","getElementContainer","position","getElementStyle","createTip","e","id","animation","outTimer","hasPopup","showTooltipEvent","appendPopup","hasClass","showClass","addClass","emulateTransitionEnd","delay","hideTooltipEvent","removeClass","enabled"],"mappings":"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"}