{"version":3,"file":"isVisible-f75ee887.js","sources":["../../src/strings/fixedTopClass.ts","../../src/strings/fixedBottomClass.ts","../../src/strings/stickyTopClass.ts","../../src/strings/positionStickyClass.ts","../../src/util/scrollbar.ts","../../src/util/backdrop.ts","../../src/util/isVisible.ts"],"sourcesContent":["/**\n * Global namespace for components `fixed-top` class.\n */\nconst fixedTopClass = 'fixed-top';\nexport default fixedTopClass;\n","/**\n * Global namespace for components `fixed-bottom` class.\n */\nconst fixedBottomClass = 'fixed-bottom';\nexport default fixedBottomClass;\n","/**\n * Global namespace for components `sticky-top` class.\n */\nconst stickyTopClass = 'sticky-top';\nexport default stickyTopClass;\n","/**\n * Global namespace for components `position-sticky` class.\n */\nconst positionStickyClass = 'position-sticky';\nexport default positionStickyClass;\n","import {\n  getWindow,\n  getDocumentElement,\n  getElementStyle,\n  getDocumentBody,\n  hasClass,\n  setElementStyle,\n  getElementsByClassName,\n} from '@thednp/shorty';\n\nimport fixedTopClass from '../strings/fixedTopClass';\nimport fixedBottomClass from '../strings/fixedBottomClass';\nimport stickyTopClass from '../strings/stickyTopClass';\nimport positionStickyClass from '../strings/positionStickyClass';\n\nconst getFixedItems = (parent?: ParentNode) => [\n  ...getElementsByClassName(fixedTopClass, parent),\n  ...getElementsByClassName(fixedBottomClass, parent),\n  ...getElementsByClassName(stickyTopClass, parent),\n  ...getElementsByClassName(positionStickyClass, parent),\n  ...getElementsByClassName('is-fixed', parent),\n];\n\n/**\n * Removes *padding* and *overflow* from the `<body>`\n * and all spacing from fixed items.\n *\n * @param element the target modal/offcanvas\n */\nexport const resetScrollbar = (element?: HTMLElement) => {\n  const bd = getDocumentBody(element);\n  setElementStyle(bd, {\n    paddingRight: '',\n    overflow: '',\n  });\n\n  const fixedItems = getFixedItems(bd);\n\n  if (fixedItems.length) {\n    fixedItems.forEach(fixed => {\n      setElementStyle(fixed, {\n        paddingRight: '',\n        marginRight: '',\n      });\n    });\n  }\n};\n\n/**\n * Returns the scrollbar width if the body does overflow\n * the window.\n *\n * @param element target element\n * @returns the scrollbar width value\n */\nexport const measureScrollbar = (element: HTMLElement) => {\n  const { clientWidth } = getDocumentElement(element);\n  const { innerWidth } = getWindow(element);\n  return Math.abs(innerWidth - clientWidth);\n};\n\n/**\n * Sets the `<body>` and fixed items style when modal / offcanvas\n * is shown to the user.\n *\n * @param element the target modal/offcanvas\n * @param overflow body does overflow or not\n */\nexport const setScrollbar = (element: HTMLElement, overflow?: boolean) => {\n  const bd = getDocumentBody(element);\n  const bodyPad = parseInt(getElementStyle(bd, 'paddingRight'), 10);\n  const isOpen = getElementStyle(bd, 'overflow') === 'hidden';\n  const sbWidth = isOpen && bodyPad ? 0 : measureScrollbar(element);\n  const fixedItems = getFixedItems(bd);\n\n  /* istanbul ignore else */\n  if (overflow) {\n    setElementStyle(bd, {\n      overflow: 'hidden',\n      paddingRight: `${bodyPad + sbWidth}px`,\n    });\n\n    /* istanbul ignore else */\n    if (fixedItems.length) {\n      fixedItems.forEach(fixed => {\n        const itemPadValue = getElementStyle(fixed, 'paddingRight');\n        fixed.style.paddingRight = `${parseInt(itemPadValue, 10) + sbWidth}px`;\n        /* istanbul ignore else */\n        if ([stickyTopClass, positionStickyClass].some(c => hasClass(fixed, c))) {\n          const itemMValue = getElementStyle(fixed, 'marginRight');\n          fixed.style.marginRight = `${parseInt(itemMValue, 10) - sbWidth}px`;\n        }\n      });\n    }\n  }\n};\n","import { createElement, getDocument, reflow, removeClass, hasClass, addClass, querySelector } from '@thednp/shorty';\n\nimport fadeClass from '../strings/fadeClass';\nimport showClass from '../strings/showClass';\nimport modalString from '../strings/modalString';\nimport offcanvasString from '../strings/offcanvasString';\nimport { resetScrollbar } from './scrollbar';\nimport { appendPopup, removePopup } from './popupContainer';\n\nconst backdropString = 'backdrop';\nconst modalBackdropClass = `${modalString}-${backdropString}`;\nconst offcanvasBackdropClass = `${offcanvasString}-${backdropString}`;\nconst modalActiveSelector = `.${modalString}.${showClass}`;\nconst offcanvasActiveSelector = `.${offcanvasString}.${showClass}`;\n\n// any document would suffice\nconst overlay = createElement('div') as HTMLElement;\n\n/**\n * Returns the current active modal / offcancas element.\n *\n * @param element the context element\n * @returns the requested element\n */\nconst getCurrentOpen = (element?: HTMLElement): HTMLElement | null => {\n  return querySelector(`${modalActiveSelector},${offcanvasActiveSelector}`, getDocument(element));\n};\n\n/**\n * Toogles from a Modal overlay to an Offcanvas, or vice-versa.\n *\n * @param isModal\n */\nconst toggleOverlayType = (isModal?: boolean) => {\n  const targetClass = isModal ? modalBackdropClass : offcanvasBackdropClass;\n  [modalBackdropClass, offcanvasBackdropClass].forEach(c => {\n    removeClass(overlay, c);\n  });\n  addClass(overlay, targetClass);\n};\n\n/**\n * Append the overlay to DOM.\n *\n * @param hasFade\n * @param isModal\n */\nconst appendOverlay = (hasFade: boolean, isModal?: boolean) => {\n  toggleOverlayType(isModal);\n  // container.append(overlay);\n  appendPopup(overlay);\n  if (hasFade) addClass(overlay, fadeClass);\n};\n\n/**\n * Shows the overlay to the user.\n */\nconst showOverlay = () => {\n  if (!hasClass(overlay, showClass)) {\n    addClass(overlay, showClass);\n    reflow(overlay);\n  }\n};\n\n/**\n * Hides the overlay from the user.\n */\nconst hideOverlay = () => {\n  removeClass(overlay, showClass);\n};\n\n/**\n * Removes the overlay from DOM.\n *\n * @param {HTMLElement=} element\n */\nconst removeOverlay = (element?: HTMLElement): void => {\n  if (!getCurrentOpen(element)) {\n    removeClass(overlay, fadeClass);\n    // overlay.remove();\n    removePopup(overlay);\n    resetScrollbar(element);\n  }\n};\n\nexport {\n  overlay,\n  offcanvasBackdropClass,\n  modalBackdropClass,\n  modalActiveSelector,\n  offcanvasActiveSelector,\n  toggleOverlayType,\n  appendOverlay,\n  showOverlay,\n  hideOverlay,\n  getCurrentOpen,\n  removeOverlay,\n};\n","import { isHTMLElement, getElementStyle } from '@thednp/shorty';\n\n/**\n * @param element target\n * @returns the check result\n */\nconst isVisible = (element: HTMLElement) => {\n  return isHTMLElement(element) && getElementStyle(element, 'visibility') !== 'hidden' && element.offsetParent !== null;\n};\nexport default isVisible;\n"],"names":["fixedTopClass","fixedBottomClass","stickyTopClass","positionStickyClass","getFixedItems","parent","getElementsByClassName","resetScrollbar","element","bd","getDocumentBody","setElementStyle","fixedItems","fixed","measureScrollbar","clientWidth","getDocumentElement","innerWidth","getWindow","setScrollbar","overflow","bodyPad","getElementStyle","sbWidth","itemPadValue","hasClass","c","itemMValue","backdropString","modalBackdropClass","modalString","offcanvasBackdropClass","offcanvasString","modalActiveSelector","showClass","offcanvasActiveSelector","overlay","createElement","getCurrentOpen","querySelector","getDocument","toggleOverlayType","isModal","targetClass","removeClass","addClass","appendOverlay","hasFade","appendPopup","fadeClass","showOverlay","reflow","hideOverlay","removeOverlay","removePopup","isVisible","isHTMLElement"],"mappings":"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"}