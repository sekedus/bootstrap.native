{"version":3,"file":"bootstrap-native.cjs","sources":["../node_modules/.pnpm/@thednp+shorty@2.0.7/node_modules/@thednp/shorty/dist/shorty.mjs","../node_modules/.pnpm/@thednp+event-listener@2.0.6/node_modules/@thednp/event-listener/dist/event-listener.mjs","../src/strings/fadeClass.ts","../src/strings/showClass.ts","../src/strings/dataBsDismiss.ts","../src/strings/alertString.ts","../src/strings/alertComponent.ts","../src/version.ts","../src/components/base-component.ts","../src/components/alert.ts","../src/strings/activeClass.ts","../src/strings/dataBsToggle.ts","../src/strings/buttonString.ts","../src/strings/buttonComponent.ts","../src/components/button.ts","../src/strings/dataBsTarget.ts","../src/strings/carouselString.ts","../src/strings/carouselComponent.ts","../src/strings/dataBsParent.ts","../src/strings/dataBsContainer.ts","../src/util/getTargetElement.ts","../src/components/carousel.ts","../src/strings/collapsingClass.ts","../src/strings/collapseString.ts","../src/strings/collapseComponent.ts","../src/components/collapse.ts","../src/strings/dropdownClasses.ts","../src/strings/dropdownComponent.ts","../src/strings/dropdownMenuClass.ts","../src/util/isEmptyAnchor.ts","../src/components/dropdown.ts","../src/strings/modalString.ts","../src/strings/modalComponent.ts","../src/strings/offcanvasComponent.ts","../src/strings/fixedTopClass.ts","../src/strings/fixedBottomClass.ts","../src/strings/stickyTopClass.ts","../src/strings/positionStickyClass.ts","../src/util/scrollbar.ts","../src/strings/offcanvasString.ts","../src/util/popupContainer.ts","../src/util/backdrop.ts","../src/util/isVisible.ts","../src/components/modal.ts","../src/components/offcanvas.ts","../src/strings/popoverString.ts","../src/strings/popoverComponent.ts","../src/strings/tooltipString.ts","../src/util/getTipTemplate.ts","../src/util/tipClassPositions.ts","../src/util/styleTip.ts","../src/util/tooltipDefaults.ts","../node_modules/.pnpm/@thednp+position-observer@0.0.3/node_modules/@thednp/position-observer/dist/index.mjs","../src/strings/dataOriginalTitle.ts","../src/strings/tooltipComponent.ts","../src/util/setHtml.ts","../src/util/createTip.ts","../src/util/getElementContainer.ts","../src/components/tooltip.ts","../src/components/popover.ts","../src/strings/scrollspyString.ts","../src/strings/scrollspyComponent.ts","../src/components/scrollspy.ts","../src/strings/tabString.ts","../src/strings/tabComponent.ts","../src/components/tab.ts","../src/strings/toastString.ts","../src/strings/toastComponent.ts","../src/components/toast.ts","../src/util/init.ts"],"sourcesContent":["const ariaChecked = \"aria-checked\", ariaDescription = \"aria-description\", ariaDescribedBy = \"aria-describedby\", ariaExpanded = \"aria-expanded\", ariaHasPopup = \"aria-haspopup\", ariaHidden = \"aria-hidden\", ariaLabel = \"aria-label\", ariaLabelledBy = \"aria-labelledby\", ariaModal = \"aria-modal\", ariaPressed = \"aria-pressed\", ariaSelected = \"aria-selected\", ariaValueMin = \"aria-valuemin\", ariaValueMax = \"aria-valuemax\", ariaValueNow = \"aria-valuenow\", ariaValueText = \"aria-valuetext\", abortEvent = \"abort\", beforeunloadEvent = \"beforeunload\", blurEvent = \"blur\", changeEvent = \"change\", contextmenuEvent = \"contextmenu\", DOMContentLoadedEvent = \"DOMContentLoaded\", DOMMouseScrollEvent = \"DOMMouseScroll\", errorEvent = \"error\", focusEvent = \"focus\", focusinEvent = \"focusin\", focusoutEvent = \"focusout\", gesturechangeEvent = \"gesturechange\", gestureendEvent = \"gestureend\", gesturestartEvent = \"gesturestart\", keydownEvent = \"keydown\", keypressEvent = \"keypress\", keyupEvent = \"keyup\", loadEvent = \"load\", mouseclickEvent = \"click\", mousedblclickEvent = \"dblclick\", mousedownEvent = \"mousedown\", mouseupEvent = \"mouseup\", mousehoverEvent = \"hover\", mouseenterEvent = \"mouseenter\", mouseleaveEvent = \"mouseleave\", mouseinEvent = \"mousein\", mouseoutEvent = \"mouseout\", mouseoverEvent = \"mouseover\", mousemoveEvent = \"mousemove\", mousewheelEvent = \"mousewheel\", moveEvent = \"move\", orientationchangeEvent = \"orientationchange\", pointercancelEvent = \"pointercancel\", pointerdownEvent = \"pointerdown\", pointerleaveEvent = \"pointerleave\", pointermoveEvent = \"pointermove\", pointerupEvent = \"pointerup\", readystatechangeEvent = \"readystatechange\", resetEvent = \"reset\", resizeEvent = \"resize\", selectEvent = \"select\", selectendEvent = \"selectend\", selectstartEvent = \"selectstart\", scrollEvent = \"scroll\", submitEvent = \"submit\", touchstartEvent = \"touchstart\", touchmoveEvent = \"touchmove\", touchcancelEvent = \"touchcancel\", touchendEvent = \"touchend\", unloadEvent = \"unload\", nativeEvents = {\n  DOMContentLoaded: DOMContentLoadedEvent,\n  DOMMouseScroll: DOMMouseScrollEvent,\n  abort: abortEvent,\n  beforeunload: beforeunloadEvent,\n  blur: blurEvent,\n  change: changeEvent,\n  click: mouseclickEvent,\n  contextmenu: contextmenuEvent,\n  dblclick: mousedblclickEvent,\n  error: errorEvent,\n  focus: focusEvent,\n  focusin: focusinEvent,\n  focusout: focusoutEvent,\n  gesturechange: gesturechangeEvent,\n  gestureend: gestureendEvent,\n  gesturestart: gesturestartEvent,\n  hover: mousehoverEvent,\n  keydown: keydownEvent,\n  keypress: keypressEvent,\n  keyup: keyupEvent,\n  load: loadEvent,\n  mousedown: mousedownEvent,\n  mousemove: mousemoveEvent,\n  mousein: mouseinEvent,\n  mouseout: mouseoutEvent,\n  mouseenter: mouseenterEvent,\n  mouseleave: mouseleaveEvent,\n  mouseover: mouseoverEvent,\n  mouseup: mouseupEvent,\n  mousewheel: mousewheelEvent,\n  move: moveEvent,\n  orientationchange: orientationchangeEvent,\n  pointercancel: pointercancelEvent,\n  pointerdown: pointerdownEvent,\n  pointerleave: pointerleaveEvent,\n  pointermove: pointermoveEvent,\n  pointerup: pointerupEvent,\n  readystatechange: readystatechangeEvent,\n  reset: resetEvent,\n  resize: resizeEvent,\n  scroll: scrollEvent,\n  select: selectEvent,\n  selectend: selectendEvent,\n  selectstart: selectstartEvent,\n  submit: submitEvent,\n  touchcancel: touchcancelEvent,\n  touchend: touchendEvent,\n  touchmove: touchmoveEvent,\n  touchstart: touchstartEvent,\n  unload: unloadEvent\n}, dragEvent = \"drag\", dragstartEvent = \"dragstart\", dragenterEvent = \"dragenter\", dragleaveEvent = \"dragleave\", dragoverEvent = \"dragover\", dragendEvent = \"dragend\", loadstartEvent = \"loadstart\", mouseSwipeEvents = {\n  start: \"mousedown\",\n  end: \"mouseup\",\n  move: \"mousemove\",\n  cancel: \"mouseleave\"\n}, mouseClickEvents = { down: \"mousedown\", up: \"mouseup\" }, mouseHoverEvents = \"onmouseleave\" in document ? [\"mouseenter\", \"mouseleave\"] : (\n  /* istanbul ignore next @preserve */\n  [\"mouseover\", \"mouseout\"]\n), touchEvents = {\n  start: \"touchstart\",\n  end: \"touchend\",\n  move: \"touchmove\",\n  cancel: \"touchcancel\"\n}, focusEvents = { in: \"focusin\", out: \"focusout\" }, focusableSelector = 'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"]', keyboardEventKeys = {\n  Backspace: \"Backspace\",\n  //  8\n  Tab: \"Tab\",\n  //  9\n  Enter: \"Enter\",\n  // 13\n  Shift: \"Shift\",\n  // 16\n  Control: \"Control\",\n  // 17\n  Alt: \"Alt\",\n  // 18\n  Pause: \"Pause\",\n  // 19\n  CapsLock: \"CapsLock\",\n  // 20\n  Escape: \"Escape\",\n  // 27\n  Scape: \"Space\",\n  // 32\n  ArrowLeft: \"ArrowLeft\",\n  // 37\n  ArrowUp: \"ArrowUp\",\n  // 38\n  ArrowRight: \"ArrowRight\",\n  // 39\n  ArrowDown: \"ArrowDown\",\n  // 40\n  Insert: \"Insert\",\n  // 45\n  Delete: \"Delete\",\n  // 46\n  Meta: \"Meta\",\n  // 91 windows key\n  ContextMenu: \"ContextMenu\",\n  // 93\n  ScrollLock: \"ScrollLock\"\n  // 145\n}, keyAlt = \"Alt\", keyArrowDown = \"ArrowDown\", keyArrowUp = \"ArrowUp\", keyArrowLeft = \"ArrowLeft\", keyArrowRight = \"ArrowRight\", keyBackspace = \"Backspace\", keyCapsLock = \"CapsLock\", keyControl = \"Control\", keyDelete = \"Delete\", keyEnter = \"Enter\", keyNumpadEnter = \"NumpadEnter\", keyEscape = \"Escape\", keyInsert = \"Insert\", keyMeta = \"Meta\", keyPause = \"Pause\", keyScrollLock = \"ScrollLock\", keyShift = \"Shift\", keySpace = \"Space\", keyTab = \"Tab\", animationDuration = \"animationDuration\", animationDelay = \"animationDelay\", animationName = \"animationName\", animationEndEvent = \"animationend\", transitionDuration = \"transitionDuration\", transitionDelay = \"transitionDelay\", transitionEndEvent = \"transitionend\", transitionProperty = \"transitionProperty\", addEventListener = \"addEventListener\", removeEventListener = \"removeEventListener\", bezierEasings = {\n  linear: \"linear\",\n  easingSinusoidalIn: \"cubic-bezier(0.47,0,0.745,0.715)\",\n  easingSinusoidalOut: \"cubic-bezier(0.39,0.575,0.565,1)\",\n  easingSinusoidalInOut: \"cubic-bezier(0.445,0.05,0.55,0.95)\",\n  easingQuadraticIn: \"cubic-bezier(0.550,0.085,0.680,0.530)\",\n  easingQuadraticOut: \"cubic-bezier(0.250,0.460,0.450,0.940)\",\n  easingQuadraticInOut: \"cubic-bezier(0.455,0.030,0.515,0.955)\",\n  easingCubicIn: \"cubic-bezier(0.55,0.055,0.675,0.19)\",\n  easingCubicOut: \"cubic-bezier(0.215,0.61,0.355,1)\",\n  easingCubicInOut: \"cubic-bezier(0.645,0.045,0.355,1)\",\n  easingQuarticIn: \"cubic-bezier(0.895,0.03,0.685,0.22)\",\n  easingQuarticOut: \"cubic-bezier(0.165,0.84,0.44,1)\",\n  easingQuarticInOut: \"cubic-bezier(0.77,0,0.175,1)\",\n  easingQuinticIn: \"cubic-bezier(0.755,0.05,0.855,0.06)\",\n  easingQuinticOut: \"cubic-bezier(0.23,1,0.32,1)\",\n  easingQuinticInOut: \"cubic-bezier(0.86,0,0.07,1)\",\n  easingExponentialIn: \"cubic-bezier(0.95,0.05,0.795,0.035)\",\n  easingExponentialOut: \"cubic-bezier(0.19,1,0.22,1)\",\n  easingExponentialInOut: \"cubic-bezier(1,0,0,1)\",\n  easingCircularIn: \"cubic-bezier(0.6,0.04,0.98,0.335)\",\n  easingCircularOut: \"cubic-bezier(0.075,0.82,0.165,1)\",\n  easingCircularInOut: \"cubic-bezier(0.785,0.135,0.15,0.86)\",\n  easingBackIn: \"cubic-bezier(0.6,-0.28,0.735,0.045)\",\n  easingBackOut: \"cubic-bezier(0.175,0.885,0.32,1.275)\",\n  easingBackInOut: \"cubic-bezier(0.68,-0.55,0.265,1.55)\"\n}, offsetHeight = \"offsetHeight\", offsetWidth = \"offsetWidth\", scrollHeight = \"scrollHeight\", scrollWidth = \"scrollWidth\", tabindex = \"tabindex\", userAgentData = navigator.userAgentData, { userAgent: userAgentString } = navigator, userAgent = userAgentString, isMobile = () => {\n  const mobileBrands = /iPhone|iPad|iPod|Android/i;\n  return navigator?.userAgentData?.brands.some(\n    (x) => mobileBrands.test(x.brand)\n  ) || mobileBrands.test(navigator?.userAgent) || !1;\n}, isApple = () => {\n  const appleBrands = /(iPhone|iPod|iPad)/;\n  return navigator?.userAgentData?.brands.some(\n    (x) => appleBrands.test(x.brand)\n  ) || /* istanbul ignore next @preserve */\n  appleBrands.test(\n    navigator?.userAgent\n  ) || !1;\n}, isFirefox = () => navigator?.userAgent?.includes(\"Firefox\") || /* istanbul ignore next @preserve */\n!1, support3DTransform = () => [\"webkitPerspective\", \"perspective\"].some((p) => p in document.head.style), noop = () => {\n}, on = (element, eventName, listener, options) => {\n  const ops = options || !1;\n  element.addEventListener(\n    eventName,\n    listener,\n    ops\n  );\n}, off = (element, eventName, listener, options) => {\n  const ops = options || !1;\n  element.removeEventListener(\n    eventName,\n    listener,\n    ops\n  );\n}, one = (element, eventName, listener, options) => {\n  const handlerWrapper = (e) => {\n    (e.target === element || e.currentTarget === element) && (listener.apply(element, [e]), off(element, eventName, handlerWrapper, options));\n  };\n  on(element, eventName, handlerWrapper, options);\n}, supportPassive = () => {\n  let result = !1;\n  try {\n    const opts = Object.defineProperty({}, \"passive\", {\n      get: () => (result = !0, result)\n    });\n    one(document, DOMContentLoadedEvent, noop, opts);\n  } catch {\n  }\n  return result;\n}, supportTransform = () => [\"webkitTransform\", \"transform\"].some((p) => p in document.head.style), supportTouch = () => \"ontouchstart\" in window || /* istanbul ignore next @preserve */\n\"msMaxTouchPoints\" in navigator, supportAnimation = () => [\"webkitAnimation\", \"animation\"].some((p) => p in document.head.style), supportTransition = () => [\"webkitTransition\", \"transition\"].some((p) => p in document.head.style), getAttribute = (element, att) => element.getAttribute(att), getAttributeNS = (ns, element, att) => element.getAttributeNS(ns, att), hasAttribute = (element, att) => element.hasAttribute(att), hasAttributeNS = (ns, element, att) => element.hasAttributeNS(ns, att), setAttribute = (element, att, value) => element.setAttribute(att, value), setAttributeNS = (ns, element, att, value) => element.setAttributeNS(ns, att, value), removeAttribute = (element, att) => element.removeAttribute(att), removeAttributeNS = (ns, element, att) => element.removeAttributeNS(ns, att), addClass = (element, ...classNAME) => {\n  element.classList.add(...classNAME);\n}, removeClass = (element, ...classNAME) => {\n  element.classList.remove(...classNAME);\n}, hasClass = (element, classNAME) => element.classList.contains(classNAME), { body: documentBody } = document, { documentElement } = document, { head: documentHead } = document, ArrayFrom = (arr) => Array.from(arr), isObject = (obj) => obj != null && typeof obj == \"object\" || !1, isNode = (node) => isObject(node) && typeof node.nodeType == \"number\" && [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].some(\n  (x) => node.nodeType === x\n) || !1, isHTMLElement = (element) => isNode(element) && element.nodeType === 1 || !1, componentData = /* @__PURE__ */ new Map(), Data = {\n  data: componentData,\n  /**\n   * Sets web components data.\n   *\n   * @param element target element\n   * @param component the component's name or a unique key\n   * @param instance the component instance\n   */\n  set: (element, component, instance) => {\n    if (!isHTMLElement(element)) return;\n    componentData.has(component) || componentData.set(component, /* @__PURE__ */ new Map()), componentData.get(component).set(element, instance);\n  },\n  /**\n   * Returns all instances for specified component.\n   *\n   * @param component the component's name or a unique key\n   * @returns all the component instances\n   */\n  getAllFor: (component) => componentData.get(component) || null,\n  /**\n   * Returns the instance associated with the target.\n   *\n   * @param element target element\n   * @param component the component's name or a unique key\n   * @returns the instance\n   */\n  get: (element, component) => {\n    if (!isHTMLElement(element) || !component) return null;\n    const instanceMap = Data.getAllFor(component);\n    return element && instanceMap && instanceMap.get(element) || null;\n  },\n  /**\n   * Removes web components data.\n   *\n   * @param element target element\n   * @param component the component's name or a unique key\n   */\n  remove: (element, component) => {\n    const instanceMap = Data.getAllFor(component);\n    !instanceMap || !isHTMLElement(element) || (instanceMap.delete(element), instanceMap.size === 0 && componentData.delete(component));\n  }\n}, getInstance = (target, component) => Data.get(target, component), isString = (str) => typeof str == \"string\" || !1, isWindow = (obj) => isObject(obj) && obj.constructor.name === \"Window\" || !1, isDocument = (obj) => isNode(obj) && obj.nodeType === 9 || !1, getDocument = (node) => isWindow(node) ? node.document : isDocument(node) ? node : isNode(node) ? node.ownerDocument : globalThis.document, ObjectAssign = (obj, ...source) => Object.assign(obj, ...source), createElement = (param) => {\n  if (!param) return;\n  if (isString(param))\n    return getDocument().createElement(param);\n  const { tagName } = param, newElement = createElement(tagName);\n  if (!newElement) return;\n  const attr = { ...param };\n  return delete attr.tagName, ObjectAssign(newElement, attr);\n}, createElementNS = (ns, param) => {\n  if (!ns || !param) return;\n  if (isString(param))\n    return getDocument().createElementNS(ns, param);\n  const { tagName } = param, newElement = createElementNS(ns, tagName);\n  if (!newElement) return;\n  const attr = { ...param };\n  return delete attr.tagName, ObjectAssign(newElement, attr);\n}, dispatchEvent = (element, event) => element.dispatchEvent(event), distinct = (value, index, arr) => arr.indexOf(value) === index, getElementStyle = (element, property) => {\n  const computedStyle = getComputedStyle(element), prop = property.replace(\"webkit\", \"Webkit\").replace(/([A-Z])/g, \"-$1\").toLowerCase();\n  return computedStyle.getPropertyValue(prop);\n}, getElementAnimationDelay = (element) => {\n  const propertyValue = getElementStyle(element, animationName), durationValue = getElementStyle(element, animationDelay), durationScale = durationValue.includes(\"ms\") ? (\n    /* istanbul ignore next */\n    1\n  ) : 1e3, duration = propertyValue && propertyValue !== \"none\" ? parseFloat(durationValue) * durationScale : 0;\n  return Number.isNaN(duration) ? (\n    /* istanbul ignore next */\n    0\n  ) : duration;\n}, getElementAnimationDuration = (element) => {\n  const propertyValue = getElementStyle(element, animationName), durationValue = getElementStyle(element, animationDuration), durationScale = durationValue.includes(\"ms\") ? (\n    /* istanbul ignore next */\n    1\n  ) : 1e3, duration = propertyValue && propertyValue !== \"none\" ? parseFloat(durationValue) * durationScale : 0;\n  return Number.isNaN(duration) ? (\n    /* istanbul ignore next */\n    0\n  ) : duration;\n}, emulateAnimationEnd = (element, handler) => {\n  let called = 0;\n  const endEvent = new Event(animationEndEvent), duration = getElementAnimationDuration(element), delay = getElementAnimationDelay(element);\n  if (duration) {\n    const animationEndWrapper = (e) => {\n      e.target === element && (handler.apply(element, [e]), element.removeEventListener(animationEndEvent, animationEndWrapper), called = 1);\n    };\n    element.addEventListener(animationEndEvent, animationEndWrapper), setTimeout(() => {\n      called || dispatchEvent(element, endEvent);\n    }, duration + delay + 17);\n  } else\n    handler.apply(element, [endEvent]);\n}, getElementTransitionDelay = (element) => {\n  const propertyValue = getElementStyle(element, transitionProperty), delayValue = getElementStyle(element, transitionDelay), delayScale = delayValue.includes(\"ms\") ? (\n    /* istanbul ignore next */\n    1\n  ) : 1e3, duration = propertyValue && propertyValue !== \"none\" ? parseFloat(delayValue) * delayScale : (\n    /* istanbul ignore next */\n    0\n  );\n  return Number.isNaN(duration) ? (\n    /* istanbul ignore next */\n    0\n  ) : duration;\n}, getElementTransitionDuration = (element) => {\n  const propertyValue = getElementStyle(element, transitionProperty), durationValue = getElementStyle(element, transitionDuration), durationScale = durationValue.includes(\"ms\") ? (\n    /* istanbul ignore next */\n    1\n  ) : 1e3, duration = propertyValue && propertyValue !== \"none\" ? parseFloat(durationValue) * durationScale : (\n    /* istanbul ignore next */\n    0\n  );\n  return Number.isNaN(duration) ? (\n    /* istanbul ignore next */\n    0\n  ) : duration;\n}, emulateTransitionEnd = (element, handler) => {\n  let called = 0;\n  const endEvent = new Event(transitionEndEvent), duration = getElementTransitionDuration(element), delay = getElementTransitionDelay(element);\n  if (duration) {\n    const transitionEndWrapper = (e) => {\n      e.target === element && (handler.apply(element, [e]), element.removeEventListener(transitionEndEvent, transitionEndWrapper), called = 1);\n    };\n    element.addEventListener(transitionEndEvent, transitionEndWrapper), setTimeout(() => {\n      called || dispatchEvent(element, endEvent);\n    }, duration + delay + 17);\n  } else\n    handler.apply(element, [endEvent]);\n}, Float32ArrayFrom = (arr) => Float32Array.from(Array.from(arr)), Float64ArrayFrom = (arr) => Float64Array.from(Array.from(arr)), focus = (element, options) => element.focus(options), normalizeValue = (value) => [\"true\", !0].includes(value) ? !0 : [\"false\", !1].includes(value) ? !1 : [\"null\", \"\", null, void 0].includes(value) ? null : value !== \"\" && !Number.isNaN(+value) ? +value : value, ObjectEntries = (obj) => Object.entries(obj), toLowerCase = (source) => source.toLowerCase(), normalizeOptions = (element, defaultOps, inputOps, ns) => {\n  const INPUT = { ...inputOps }, data = { ...element.dataset }, normalOps = { ...defaultOps }, dataOps = {}, title = \"title\";\n  return ObjectEntries(data).forEach(([k, v]) => {\n    const key = ns && typeof k == \"string\" && k.includes(ns) ? k.replace(ns, \"\").replace(\n      /[A-Z]/g,\n      (match) => toLowerCase(match)\n    ) : (\n      /* istanbul ignore next @preserve */\n      k\n    );\n    dataOps[key] = normalizeValue(v);\n  }), ObjectEntries(INPUT).forEach(([k, v]) => {\n    INPUT[k] = normalizeValue(v);\n  }), ObjectEntries(defaultOps).forEach(([k, v]) => {\n    k in INPUT ? normalOps[k] = INPUT[k] : k in dataOps ? normalOps[k] = dataOps[k] : normalOps[k] = k === title ? getAttribute(element, title) : v;\n  }), normalOps;\n}, ObjectHasOwn = (obj, prop) => isObject(obj) && (Object.hasOwn(obj, prop) || prop in obj), ObjectKeys = (obj) => Object.keys(obj), ObjectValues = (obj) => Object.values(obj), ObjectFromEntries = (entries) => Object.fromEntries(entries), createCustomEvent = (eventType, config) => {\n  const OriginalCustomEvent = new CustomEvent(eventType, {\n    cancelable: !0,\n    bubbles: !0\n  });\n  return isObject(config) && ObjectAssign(OriginalCustomEvent, config), OriginalCustomEvent;\n}, passiveHandler = { passive: !0 }, reflow = (element) => element.offsetHeight, setElementStyle = (element, styles) => {\n  ObjectEntries(styles).forEach(([key, value]) => {\n    if (value && isString(key) && key.includes(\"--\"))\n      element.style.setProperty(key, value);\n    else {\n      const propObject = {};\n      propObject[key] = value, ObjectAssign(element.style, propObject);\n    }\n  });\n}, isMap = (obj) => isObject(obj) && obj.constructor.name === \"Map\" || !1, isNumber = (num) => typeof num == \"number\" || !1, TimeCache = /* @__PURE__ */ new Map(), Timer = {\n  /**\n   * Sets a new timeout timer for an element, or element -> key association.\n   *\n   * @param element target element\n   * @param callback the callback\n   * @param delay the execution delay\n   * @param key a unique key\n   */\n  set: (element, callback, delay, key) => {\n    isHTMLElement(element) && (key && key.length ? (TimeCache.has(element) || TimeCache.set(element, /* @__PURE__ */ new Map()), TimeCache.get(element).set(key, setTimeout(callback, delay))) : TimeCache.set(element, setTimeout(callback, delay)));\n  },\n  /**\n   * Returns the timer associated with the target.\n   *\n   * @param element target element\n   * @param key a unique\n   * @returns the timer\n   */\n  get: (element, key) => {\n    if (!isHTMLElement(element)) return null;\n    const keyTimers = TimeCache.get(element);\n    return key && keyTimers && isMap(keyTimers) ? keyTimers.get(key) || /* istanbul ignore next @preserve */\n    null : isNumber(keyTimers) ? keyTimers : null;\n  },\n  /**\n   * Clears the element's timer.\n   *\n   * @param element target element\n   * @param key a unique key\n   */\n  clear: (element, key) => {\n    if (!isHTMLElement(element)) return;\n    const keyTimers = TimeCache.get(element);\n    key && key.length && isMap(keyTimers) ? (clearTimeout(keyTimers.get(key)), keyTimers.delete(key), keyTimers.size === 0 && TimeCache.delete(element)) : (clearTimeout(keyTimers), TimeCache.delete(element));\n  }\n}, toUpperCase = (source) => source.toUpperCase(), querySelectorAll = (selector, parent) => (isNode(parent) ? parent : getDocument()).querySelectorAll(selector), focusTrapMap = /* @__PURE__ */ new Map();\nfunction handleKeyboardNavigation(event) {\n  const { shiftKey, code } = event, doc = getDocument(this), focusableElements = [\n    ...querySelectorAll(focusableSelector, this)\n  ].filter(\n    (el) => !hasAttribute(el, \"disabled\") && !getAttribute(el, ariaHidden)\n  );\n  if (!focusableElements.length) return;\n  const firstFocusable = focusableElements[0], lastFocusable = focusableElements[focusableElements.length - 1];\n  code === \"Tab\" && (shiftKey && doc.activeElement === firstFocusable ? (lastFocusable.focus(), event.preventDefault()) : !shiftKey && doc.activeElement === lastFocusable && (firstFocusable.focus(), event.preventDefault()));\n}\nconst hasFocusTrap = (target) => focusTrapMap.has(target) === !0, toggleFocusTrap = (target) => {\n  const isCurrentlyTrapped = hasFocusTrap(target);\n  (isCurrentlyTrapped ? off : on)(target, \"keydown\", handleKeyboardNavigation), isCurrentlyTrapped ? focusTrapMap.delete(target) : focusTrapMap.set(target, !0);\n}, getBoundingClientRect = (element, includeScale) => {\n  const { width, height, top, right, bottom, left } = element.getBoundingClientRect();\n  let scaleX = 1, scaleY = 1;\n  if (includeScale && isHTMLElement(element)) {\n    const { offsetWidth: offsetWidth2, offsetHeight: offsetHeight2 } = element;\n    scaleX = offsetWidth2 > 0 ? Math.round(width) / offsetWidth2 : (\n      /* istanbul ignore next @preserve */\n      1\n    ), scaleY = offsetHeight2 > 0 ? Math.round(height) / offsetHeight2 : (\n      /* istanbul ignore next @preserve */\n      1\n    );\n  }\n  return {\n    width: width / scaleX,\n    height: height / scaleY,\n    top: top / scaleY,\n    right: right / scaleX,\n    bottom: bottom / scaleY,\n    left: left / scaleX,\n    x: left / scaleX,\n    y: top / scaleY\n  };\n}, getDocumentBody = (node) => getDocument(node).body, getDocumentElement = (node) => getDocument(node).documentElement, getDocumentHead = (node) => getDocument(node).head, getNodeScroll = (element) => {\n  const isWin = isWindow(element), x = isWin ? element.scrollX : element.scrollLeft, y = isWin ? element.scrollY : element.scrollTop;\n  return { x, y };\n}, isShadowRoot = (element) => isNode(element) && element.constructor.name === \"ShadowRoot\" || !1, getParentNode = (node) => node.nodeName === \"HTML\" ? node : isHTMLElement(node) && node.assignedSlot || // step into the shadow DOM of the parent of a slotted node\nisNode(node) && node.parentNode || // DOM Element detected\nisShadowRoot(node) && node.host || // ShadowRoot detected\ngetDocumentElement(node), isScaledElement = (element) => {\n  if (!isHTMLElement(element)) return !1;\n  const { width, height } = getBoundingClientRect(element), { offsetWidth: offsetWidth2, offsetHeight: offsetHeight2 } = element;\n  return Math.round(width) !== offsetWidth2 || Math.round(height) !== offsetHeight2;\n}, getRectRelativeToOffsetParent = (element, offsetParent, scroll) => {\n  const isParentAnElement = isHTMLElement(offsetParent), rect = getBoundingClientRect(\n    element,\n    isParentAnElement && isScaledElement(offsetParent)\n  ), offsets = { x: 0, y: 0 };\n  if (isParentAnElement) {\n    const offsetRect = getBoundingClientRect(offsetParent, !0);\n    offsets.x = offsetRect.x + offsetParent.clientLeft, offsets.y = offsetRect.y + offsetParent.clientTop;\n  }\n  return {\n    x: rect.left + scroll.x - offsets.x,\n    y: rect.top + scroll.y - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n};\nlet elementUID = 0, elementMapUID = 0;\nconst elementIDMap = /* @__PURE__ */ new Map(), getUID = (element, key) => {\n  let result = key ? elementUID : elementMapUID;\n  if (key) {\n    const elID = getUID(element), elMap = elementIDMap.get(elID) || /* @__PURE__ */ new Map();\n    elementIDMap.has(elID) || elementIDMap.set(elID, elMap), isMap(elMap) && !elMap.has(key) ? (elMap.set(key, result), elementUID += 1) : result = elMap.get(key);\n  } else {\n    const elkey = element.id || element;\n    elementIDMap.has(elkey) ? result = elementIDMap.get(elkey) : (elementIDMap.set(elkey, result), elementMapUID += 1);\n  }\n  return result;\n}, getWindow = (node) => node ? isDocument(node) ? node.defaultView : isNode(node) ? node?.ownerDocument?.defaultView : node : window, isArray = (obj) => Array.isArray(obj) || !1, isCanvas = (element) => isNode(element) && element.nodeName === \"CANVAS\" || !1, isCustomElement = (element) => isHTMLElement(element) && !!element.shadowRoot || !1, isElement = (element) => isNode(element) && [1, 2, 3, 4, 5, 6, 7, 8].some((x) => element.nodeType === x) || !1, isElementInScrollRange = (element) => {\n  if (!isNode(element)) return !1;\n  const { top, bottom } = getBoundingClientRect(element), { clientHeight } = getDocumentElement(element);\n  return top <= clientHeight && bottom >= 0;\n}, isElementInViewport = (element) => {\n  if (!isNode(element)) return !1;\n  const { clientWidth, clientHeight } = getDocumentElement(element), { top, left, bottom, right } = getBoundingClientRect(element, !0);\n  return top >= 0 && left >= 0 && bottom <= clientHeight && right <= clientWidth;\n}, isElementsArray = (obj) => isArray(obj) && obj.every(isHTMLElement) || !1, isFunction = (fn) => typeof fn == \"function\" || !1, isHTMLCollection = (obj) => isObject(obj) && obj.constructor.name === \"HTMLCollection\" || !1, isHTMLImageElement = (element) => isHTMLElement(element) && element.tagName === \"IMG\" || !1, isJSON = (str) => {\n  if (!isString(str)) return !1;\n  try {\n    JSON.parse(str);\n  } catch {\n    return !1;\n  }\n  return !0;\n}, isWeakMap = (obj) => isObject(obj) && obj.constructor.name === \"WeakMap\" || !1, isMedia = (element) => isNode(element) && [\"SVG\", \"Image\", \"Video\", \"Canvas\"].some(\n  (s) => element.constructor.name.includes(s)\n) || !1, isNodeList = (obj) => isObject(obj) && obj.constructor.name === \"NodeList\" || !1, isRTL = (node) => getDocumentElement(node).dir === \"rtl\", isSVGElement = (element) => isNode(element) && element.constructor.name.includes(\"SVG\") || !1, isTableElement = (element) => isNode(element) && [\"TABLE\", \"TD\", \"TH\"].includes(element.nodeName) || !1, closest = (element, selector) => element ? element.closest(selector) || // break out of `ShadowRoot`\nclosest(element.getRootNode().host, selector) : null, querySelector = (selector, parent) => isHTMLElement(selector) ? selector : (isNode(parent) ? parent : getDocument()).querySelector(selector), getElementsByTagName = (selector, parent) => (isNode(parent) ? parent : getDocument()).getElementsByTagName(\n  selector\n), getCustomElements = (parent) => [...getElementsByTagName(\"*\", parent)].filter(isCustomElement), getElementById = (id, context) => getDocument(context).getElementById(id) || null, getElementsByClassName = (selector, parent) => (parent && isNode(parent) ? parent : getDocument()).getElementsByClassName(\n  selector\n), matches = (target, selector) => target.matches(selector), version = \"2.0.7\";\nexport {\n  ArrayFrom,\n  DOMContentLoadedEvent,\n  DOMMouseScrollEvent,\n  Data,\n  Float32ArrayFrom,\n  Float64ArrayFrom,\n  ObjectAssign,\n  ObjectEntries,\n  ObjectFromEntries,\n  ObjectHasOwn,\n  ObjectKeys,\n  ObjectValues,\n  Timer,\n  abortEvent,\n  addClass,\n  addEventListener,\n  animationDelay,\n  animationDuration,\n  animationEndEvent,\n  animationName,\n  ariaChecked,\n  ariaDescribedBy,\n  ariaDescription,\n  ariaExpanded,\n  ariaHasPopup,\n  ariaHidden,\n  ariaLabel,\n  ariaLabelledBy,\n  ariaModal,\n  ariaPressed,\n  ariaSelected,\n  ariaValueMax,\n  ariaValueMin,\n  ariaValueNow,\n  ariaValueText,\n  beforeunloadEvent,\n  bezierEasings,\n  blurEvent,\n  changeEvent,\n  closest,\n  contextmenuEvent,\n  createCustomEvent,\n  createElement,\n  createElementNS,\n  dispatchEvent,\n  distinct,\n  documentBody,\n  documentElement,\n  documentHead,\n  dragEvent,\n  dragendEvent,\n  dragenterEvent,\n  dragleaveEvent,\n  dragoverEvent,\n  dragstartEvent,\n  emulateAnimationEnd,\n  emulateTransitionEnd,\n  errorEvent,\n  focus,\n  focusEvent,\n  focusEvents,\n  focusableSelector,\n  focusinEvent,\n  focusoutEvent,\n  gesturechangeEvent,\n  gestureendEvent,\n  gesturestartEvent,\n  getAttribute,\n  getAttributeNS,\n  getBoundingClientRect,\n  getCustomElements,\n  getDocument,\n  getDocumentBody,\n  getDocumentElement,\n  getDocumentHead,\n  getElementAnimationDelay,\n  getElementAnimationDuration,\n  getElementById,\n  getElementStyle,\n  getElementTransitionDelay,\n  getElementTransitionDuration,\n  getElementsByClassName,\n  getElementsByTagName,\n  getInstance,\n  getNodeScroll,\n  getParentNode,\n  getRectRelativeToOffsetParent,\n  getUID,\n  getWindow,\n  hasAttribute,\n  hasAttributeNS,\n  hasClass,\n  hasFocusTrap,\n  isApple,\n  isArray,\n  isCanvas,\n  isCustomElement,\n  isDocument,\n  isElement,\n  isElementInScrollRange,\n  isElementInViewport,\n  isElementsArray,\n  isFirefox,\n  isFunction,\n  isHTMLCollection,\n  isHTMLElement,\n  isHTMLImageElement,\n  isJSON,\n  isMap,\n  isMedia,\n  isMobile,\n  isNode,\n  isNodeList,\n  isNumber,\n  isObject,\n  isRTL,\n  isSVGElement,\n  isScaledElement,\n  isShadowRoot,\n  isString,\n  isTableElement,\n  isWeakMap,\n  isWindow,\n  keyAlt,\n  keyArrowDown,\n  keyArrowLeft,\n  keyArrowRight,\n  keyArrowUp,\n  keyBackspace,\n  keyCapsLock,\n  keyControl,\n  keyDelete,\n  keyEnter,\n  keyEscape,\n  keyInsert,\n  keyMeta,\n  keyNumpadEnter,\n  keyPause,\n  keyScrollLock,\n  keyShift,\n  keySpace,\n  keyTab,\n  keyboardEventKeys,\n  keydownEvent,\n  keypressEvent,\n  keyupEvent,\n  loadEvent,\n  loadstartEvent,\n  matches,\n  mouseClickEvents,\n  mouseHoverEvents,\n  mouseSwipeEvents,\n  mouseclickEvent,\n  mousedblclickEvent,\n  mousedownEvent,\n  mouseenterEvent,\n  mousehoverEvent,\n  mouseinEvent,\n  mouseleaveEvent,\n  mousemoveEvent,\n  mouseoutEvent,\n  mouseoverEvent,\n  mouseupEvent,\n  mousewheelEvent,\n  moveEvent,\n  nativeEvents,\n  noop,\n  normalizeOptions,\n  normalizeValue,\n  off,\n  offsetHeight,\n  offsetWidth,\n  on,\n  one,\n  orientationchangeEvent,\n  passiveHandler,\n  pointercancelEvent,\n  pointerdownEvent,\n  pointerleaveEvent,\n  pointermoveEvent,\n  pointerupEvent,\n  querySelector,\n  querySelectorAll,\n  readystatechangeEvent,\n  reflow,\n  removeAttribute,\n  removeAttributeNS,\n  removeClass,\n  removeEventListener,\n  resetEvent,\n  resizeEvent,\n  scrollEvent,\n  scrollHeight,\n  scrollWidth,\n  selectEvent,\n  selectendEvent,\n  selectstartEvent,\n  setAttribute,\n  setAttributeNS,\n  setElementStyle,\n  submitEvent,\n  support3DTransform,\n  supportAnimation,\n  supportPassive,\n  supportTouch,\n  supportTransform,\n  supportTransition,\n  tabindex,\n  toLowerCase,\n  toUpperCase,\n  toggleFocusTrap,\n  touchEvents,\n  touchcancelEvent,\n  touchendEvent,\n  touchmoveEvent,\n  touchstartEvent,\n  transitionDelay,\n  transitionDuration,\n  transitionEndEvent,\n  transitionProperty,\n  unloadEvent,\n  userAgent,\n  userAgentData,\n  version\n};\n//# sourceMappingURL=shorty.mjs.map\n","const e = {}, f = (t) => {\n  const { type: c, currentTarget: i } = t;\n  [...e[c]].forEach(([n, s]) => {\n    /* istanbul ignore else @preserve */\n    i === n && [...s].forEach(([o, a]) => {\n      o.apply(n, [t]), typeof a == \"object\" && a.once && r(n, c, o, a);\n    });\n  });\n}, E = (t, c, i, n) => {\n  /* istanbul ignore else @preserve */\n  e[c] || (e[c] = /* @__PURE__ */ new Map());\n  const s = e[c];\n  /* istanbul ignore else @preserve */\n  s.has(t) || s.set(t, /* @__PURE__ */ new Map());\n  const o = s.get(t), { size: a } = o;\n  o.set(i, n);\n  /* istanbul ignore else @preserve */\n  a || t.addEventListener(c, f, n);\n}, r = (t, c, i, n) => {\n  const s = e[c], o = s && s.get(t), a = o && o.get(i), d = a !== void 0 ? a : n;\n  /* istanbul ignore else @preserve */\n  o && o.has(i) && o.delete(i);\n  /* istanbul ignore else @preserve */\n  s && (!o || !o.size) && s.delete(t);\n  /* istanbul ignore else @preserve */\n  (!s || !s.size) && delete e[c];\n  /* istanbul ignore else @preserve */\n  (!o || !o.size) && t.removeEventListener(\n    c,\n    f,\n    d\n  );\n}, g = E, M = r;\nexport {\n  E as addListener,\n  f as globalListener,\n  M as off,\n  g as on,\n  e as registry,\n  r as removeListener\n};\n//# sourceMappingURL=event-listener.mjs.map\n","/**\n * Global namespace for most components `fade` class.\n */\nconst fadeClass = \"fade\";\nexport default fadeClass;\n","/**\n * Global namespace for most components `show` class.\n */\nconst showClass = \"show\";\nexport default showClass;\n","/**\n * Global namespace for most components `dismiss` option.\n */\nconst dataBsDismiss = \"data-bs-dismiss\";\nexport default dataBsDismiss;\n","/** @type {string} */\nconst alertString = \"alert\";\nexport default alertString;\n","/** @type {string} */\nconst alertComponent = \"Alert\";\nexport default alertComponent;\n","import { version } from \"../package.json\";\n\nconst Version = version;\n\nexport default Version;\n","/* Native JavaScript for Bootstrap 5 | Base Component\n----------------------------------------------------- */\nimport {\n  Data,\n  isHTMLElement,\n  isString,\n  normalizeOptions,\n  ObjectKeys,\n  querySelector,\n} from \"@thednp/shorty\";\n\nimport type { BaseOptions } from \"../interface/baseComponent\";\nimport Version from \"../version\";\n\n/** Returns a new `BaseComponent` instance. */\nexport default class BaseComponent {\n  declare element: HTMLElement;\n  declare options?: BaseOptions;\n\n  /**\n   * @param target `HTMLElement` or selector string\n   * @param config component instance options\n   */\n  constructor(target: HTMLElement | string, config?: BaseOptions) {\n    let element: HTMLElement | null;\n\n    try {\n      if (isHTMLElement(target)) {\n        element = target;\n      } else if (isString(target)) {\n        element = querySelector<HTMLElement>(target);\n        // istanbul ignore else @preserve\n        if (!element) throw Error(`\"${target}\" is not a valid selector.`);\n      } else {\n        throw Error(`your target is not an instance of HTMLElement.`);\n      }\n    } catch (e) {\n      throw Error(`${this.name} Error: ${(e as Error).message}`);\n    }\n\n    const prevInstance = Data.get<typeof this>(element, this.name);\n    // istanbul ignore else @preserve\n    if (prevInstance) {\n      // remove previously attached event listeners\n      // to avoid memory leaks\n      prevInstance._toggleEventListeners();\n    }\n\n    this.element = element;\n    this.options = this.defaults && ObjectKeys(this.defaults).length\n      ? normalizeOptions(element, this.defaults, config || {}, \"bs\")\n      // istanbul ignore next @preserve\n      : {};\n\n    Data.set(element, this.name, this);\n  }\n\n  // istanbul ignore next @preserve\n  get version() {\n    return Version;\n  }\n\n  // istanbul ignore next @preserve\n  get name() {\n    return \"BaseComponent\";\n  }\n\n  // istanbul ignore next @preserve\n  get defaults() {\n    return {};\n  }\n\n  /** just to have something to extend from */\n  // istanbul ignore next @preserve coverage wise this isn't important\n  _toggleEventListeners = () => {\n    // do something to please linters\n  };\n\n  /** Removes component from target element. */\n  dispose() {\n    Data.remove<typeof this>(this.element, this.name);\n    ObjectKeys(this).forEach((prop) => {\n      delete this[prop];\n    });\n  }\n}\n","/* Native JavaScript for Bootstrap 5 | Alert\n-------------------------------------------- */\nimport {\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  getInstance,\n  hasClass,\n  mouseclickEvent,\n  querySelector,\n  removeClass,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport dataBsDismiss from \"../strings/dataBsDismiss\";\nimport alertString from \"../strings/alertString\";\nimport alertComponent from \"../strings/alertComponent\";\nimport type { AlertEvent } from \"../interface/alert\";\n\nimport BaseComponent from \"./base-component\";\n\n// ALERT PRIVATE GC\n// ================\nconst alertSelector = `.${alertString}`;\nconst alertDismissSelector = `[${dataBsDismiss}=\"${alertString}\"]`;\n\n/**\n * Static method which returns an existing `Alert` instance associated\n * to a target `Element`.\n */\nconst getAlertInstance = (element: HTMLElement) =>\n  getInstance<Alert>(element, alertComponent);\n\n/**\n * An `Alert` initialization callback.\n */\nconst alertInitCallback = (element: HTMLElement) => new Alert(element);\n\n// ALERT CUSTOM EVENTS\n// ===================\nconst closeAlertEvent = createCustomEvent<Record<string, never>, AlertEvent>(\n  `close.bs.${alertString}`,\n);\nconst closedAlertEvent = createCustomEvent<Record<string, never>, AlertEvent>(\n  `closed.bs.${alertString}`,\n);\n\n// ALERT EVENT HANDLER\n// ===================\n/**\n * Alert `transitionend` callback.\n *\n * @param that target Alert instance\n */\nconst alertTransitionEnd = (self: Alert) => {\n  const { element } = self;\n  dispatchEvent(element, closedAlertEvent);\n\n  self._toggleEventListeners();\n  self.dispose();\n  element.remove();\n};\n\n// ALERT DEFINITION\n// ================\n/** Creates a new Alert instance. */\nexport default class Alert extends BaseComponent {\n  static selector = alertSelector;\n  static init = alertInitCallback;\n  static getInstance = getAlertInstance;\n  dismiss: HTMLElement | null;\n\n  constructor(target: HTMLElement | string) {\n    super(target);\n\n    // the dismiss button\n    this.dismiss = querySelector(alertDismissSelector, this.element);\n\n    // add event listener\n    this._toggleEventListeners(true);\n  }\n\n  /** Returns component name string. */\n  get name() {\n    return alertComponent;\n  }\n\n  // ALERT PUBLIC METHODS\n  // ====================\n  /**\n   * Public method that hides the `.alert` element from the user,\n   * disposes the instance once animation is complete, then\n   * removes the element from the DOM.\n   */\n  close = () => {\n    const { element } = this;\n\n    // istanbul ignore else @preserve\n    if (element && hasClass(element, showClass)) {\n      dispatchEvent(element, closeAlertEvent);\n\n      if (!closeAlertEvent.defaultPrevented) {\n        removeClass(element, showClass);\n\n        if (hasClass(element, fadeClass)) {\n          emulateTransitionEnd(element, () => alertTransitionEnd(this));\n        } else alertTransitionEnd(this);\n      }\n    }\n  };\n  /**\n   * Toggle on / off the `click` event listener.\n   *\n   * @param add when `true`, event listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { dismiss, close } = this;\n    // istanbul ignore else @preserve\n    if (dismiss) action(dismiss, mouseclickEvent, close);\n  };\n\n  /** Remove the component from target element. */\n  dispose() {\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n","/**\n * Global namespace for most components active class.\n */\nconst activeClass = \"active\";\nexport default activeClass;\n","/**\n * Global namespace for most components `toggle` option.\n */\nconst dataBsToggle = \"data-bs-toggle\";\nexport default dataBsToggle;\n","/** @type {string} */\nconst buttonString = \"button\";\nexport default buttonString;\n","/** @type {string} */\nconst buttonComponent = \"Button\";\nexport default buttonComponent;\n","/* Native JavaScript for Bootstrap 5 | Button\n---------------------------------------------*/\nimport {\n  addClass,\n  ariaPressed,\n  getAttribute,\n  getInstance,\n  hasClass,\n  mouseclickEvent,\n  removeClass,\n  setAttribute,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport activeClass from \"../strings/activeClass\";\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport buttonString from \"../strings/buttonString\";\nimport buttonComponent from \"../strings/buttonComponent\";\n\nimport BaseComponent from \"./base-component\";\n\n// BUTTON PRIVATE GC\n// =================\nconst buttonSelector = `[${dataBsToggle}=\"${buttonString}\"]`;\n\n/**\n * Static method which returns an existing `Button` instance associated\n * to a target `Element`.\n */\nconst getButtonInstance = (element: HTMLElement) =>\n  getInstance<Button>(element, buttonComponent);\n\n/** A `Button` initialization callback. */\nconst buttonInitCallback = (element: HTMLElement) => new Button(element);\n\n// BUTTON DEFINITION\n// =================\n/** Creates a new `Button` instance. */\nexport default class Button extends BaseComponent {\n  static selector = buttonSelector;\n  static init = buttonInitCallback;\n  static getInstance = getButtonInstance;\n\n  isActive = false;\n\n  /**\n   * @param target usually a `.btn` element\n   */\n  constructor(target: HTMLElement | string) {\n    super(target);\n\n    // initialization element\n    const { element } = this;\n\n    // set initial state\n    this.isActive = hasClass(element, activeClass);\n    setAttribute(element, ariaPressed, String(!!this.isActive));\n\n    // add event listener\n    this._toggleEventListeners(true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return buttonComponent;\n  }\n\n  // BUTTON PUBLIC METHODS\n  // =====================\n  /**\n   * Toggles the state of the target button.\n   *\n   * @param e usually `click` Event object\n   */\n  toggle = (e?: Event) => {\n    if (e) e.preventDefault();\n\n    const { element, isActive } = this;\n    if (!hasClass(element, \"disabled\") && !getAttribute(element, \"disabled\")) {\n      const action = isActive ? removeClass : addClass;\n      action(element, activeClass);\n      setAttribute(element, ariaPressed, isActive ? \"false\" : \"true\");\n      this.isActive = hasClass(element, activeClass);\n    }\n  };\n\n  // BUTTON PRIVATE METHOD\n  // =====================\n  /**\n   * Toggles on/off the `click` event listener.\n   *\n   * @param add when `true`, event listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    action(this.element, mouseclickEvent, this.toggle);\n  };\n\n  /** Removes the `Button` component from the target element. */\n  dispose() {\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n","/**\n * Global namespace for most components `target` option.\n */\nconst dataBsTarget = \"data-bs-target\";\nexport default dataBsTarget;\n","/** @type {string} */\nconst carouselString = \"carousel\";\nexport default carouselString;\n","/** @type {string} */\nconst carouselComponent = \"Carousel\";\nexport default carouselComponent;\n","/**\n * Global namespace for most components `parent` option.\n */\nconst dataBsParent = \"data-bs-parent\";\nexport default dataBsParent;\n","/**\n * Global namespace for most components `container` option.\n */\nconst dataBsContainer = \"data-bs-container\";\nexport default dataBsContainer;\n","import {\n  closest,\n  getAttribute,\n  getDocument,\n  querySelector,\n} from \"@thednp/shorty\";\n\nimport dataBsTarget from \"../strings/dataBsTarget\";\nimport dataBsParent from \"../strings/dataBsParent\";\nimport dataBsContainer from \"../strings/dataBsContainer\";\n\n/**\n * Returns the `Element` that THIS one targets\n * via `data-bs-target`, `href`, `data-bs-parent` or `data-bs-container`.\n *\n * @param element the target element\n * @returns the query result\n */\nconst getTargetElement = (element: HTMLElement) => {\n  const targetAttr = [dataBsTarget, dataBsParent, dataBsContainer, \"href\"];\n  const doc = getDocument(element);\n\n  return targetAttr\n    .map((att) => {\n      const attValue = getAttribute(element, att);\n      if (attValue) {\n        return att === dataBsParent\n          ? closest(element, attValue)\n          : querySelector(attValue, doc);\n      }\n      return null;\n    })\n    .filter((x) => x)[0];\n};\n\nexport default getTargetElement;\n","/* Native JavaScript for Bootstrap 5 | Carousel\n----------------------------------------------- */\nimport {\n  addClass,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  dragstartEvent,\n  emulateTransitionEnd,\n  getAttribute,\n  getDocument,\n  getElementsByClassName,\n  getElementTransitionDuration,\n  getInstance,\n  hasClass,\n  isElementInScrollRange,\n  isHTMLElement,\n  isRTL,\n  keyArrowLeft,\n  keyArrowRight,\n  keydownEvent,\n  matches,\n  mouseclickEvent,\n  mouseenterEvent,\n  mouseleaveEvent,\n  ObjectAssign,\n  passiveHandler,\n  pointerdownEvent,\n  pointermoveEvent,\n  pointerupEvent,\n  querySelector,\n  querySelectorAll,\n  reflow,\n  removeClass,\n  Timer,\n  touchstartEvent,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport activeClass from \"../strings/activeClass\";\nimport dataBsTarget from \"../strings/dataBsTarget\";\nimport carouselString from \"../strings/carouselString\";\nimport carouselComponent from \"../strings/carouselComponent\";\nimport getTargetElement from \"../util/getTargetElement\";\nimport BaseComponent from \"./base-component\";\nimport type { CarouselEvent, CarouselOptions } from \"../interface/carousel\";\n\ntype CarouselEventProperties = {\n  relatedTarget: HTMLElement;\n  from: number;\n  to: number;\n  direction: \"left\" | \"right\";\n};\n\n// CAROUSEL PRIVATE GC\n// ===================\nconst carouselSelector = `[data-bs-ride=\"${carouselString}\"]`;\nconst carouselItem = `${carouselString}-item`;\nconst dataBsSlideTo = \"data-bs-slide-to\";\nconst dataBsSlide = \"data-bs-slide\";\nconst pausedClass = \"paused\";\n\nconst carouselDefaults: CarouselOptions = {\n  pause: \"hover\",\n  keyboard: false,\n  touch: true,\n  interval: 5000,\n};\n\n/**\n * Static method which returns an existing `Carousel` instance associated\n * to a target `Element`.\n */\nconst getCarouselInstance = (element: HTMLElement) =>\n  getInstance<Carousel>(element, carouselComponent);\n\n/**\n * A `Carousel` initialization callback.\n */\nconst carouselInitCallback = (element: HTMLElement) => new Carousel(element);\n\nlet startX = 0;\nlet currentX = 0;\nlet endX = 0;\n\n// CAROUSEL CUSTOM EVENTS\n// ======================\nconst carouselSlideEvent = createCustomEvent<\n  CarouselEventProperties,\n  CarouselEvent\n>(`slide.bs.${carouselString}`);\nconst carouselSlidEvent = createCustomEvent<\n  CarouselEventProperties,\n  CarouselEvent\n>(`slid.bs.${carouselString}`);\n\n// CAROUSEL EVENT HANDLERS\n// =======================\n/**\n * The `transitionend` event listener of the `Carousel`.\n *\n * @param self the `Carousel` instance\n */\nconst carouselTransitionEndHandler = (self: Carousel) => {\n  const { index, direction, element, slides, options } = self;\n\n  // istanbul ignore else @preserve\n  if (self.isAnimating) {\n    const activeItem = getActiveIndex(self);\n    const orientation = direction === \"left\" ? \"next\" : \"prev\";\n    const directionClass = direction === \"left\" ? \"start\" : \"end\";\n\n    addClass(slides[index], activeClass);\n    removeClass(slides[index], `${carouselItem}-${orientation}`);\n    removeClass(slides[index], `${carouselItem}-${directionClass}`);\n\n    removeClass(slides[activeItem], activeClass);\n    removeClass(slides[activeItem], `${carouselItem}-${directionClass}`);\n\n    dispatchEvent(element, carouselSlidEvent);\n    Timer.clear(element, dataBsSlide);\n\n    // must check if a previous instance is disposed\n    if (\n      self.cycle && !getDocument(element).hidden && options.interval &&\n      !self.isPaused\n    ) {\n      self.cycle();\n    }\n  }\n};\n\n/**\n * Handles the `mouseenter` events when *options.pause*\n * is set to `hover`.\n */\nfunction carouselPauseHandler(this: HTMLElement) {\n  const self = getCarouselInstance(this);\n  // istanbul ignore else @preserve\n  if (self && !self.isPaused && !Timer.get(this, pausedClass)) {\n    addClass(this, pausedClass);\n  }\n}\n\n/**\n * Handles the `mouseleave` events when *options.pause*\n * is set to `hover`.\n */\nfunction carouselResumeHandler(this: HTMLElement) {\n  const self = getCarouselInstance(this);\n  // istanbul ignore else @preserve\n  if (self && self.isPaused && !Timer.get(this, pausedClass)) {\n    self.cycle();\n  }\n}\n\n/**\n * Handles the `click` event for the `Carousel` indicators.\n *\n * @param e the `Event` object\n */\nfunction carouselIndicatorHandler(this: HTMLElement, e: MouseEvent) {\n  e.preventDefault();\n  const element =\n    (closest(this, carouselSelector) || getTargetElement(this)) as HTMLElement;\n  const self = getCarouselInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self && !self.isAnimating) {\n    const newIndex = +(\n      getAttribute(this, dataBsSlideTo) ||\n      // istanbul ignore next @preserve\n      0\n    );\n\n    // istanbul ignore else @preserve\n    if (\n      this &&\n      !hasClass(this, activeClass) && // event target is not active\n      !Number.isNaN(newIndex)\n    ) {\n      // AND has the specific attribute\n      self.to(newIndex); // do the slide\n    }\n  }\n}\n\n/**\n * Handles the `click` event for the `Carousel` arrows.\n *\n * @param e the `Event` object\n */\nfunction carouselControlsHandler(this: HTMLElement, e: MouseEvent) {\n  e.preventDefault();\n  const element = closest(this, carouselSelector) ||\n    (getTargetElement(this) as HTMLElement);\n  const self = getCarouselInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self && !self.isAnimating) {\n    const orientation = getAttribute(this, dataBsSlide);\n\n    // istanbul ignore else @preserve\n    if (orientation === \"next\") {\n      self.next();\n    } else if (orientation === \"prev\") {\n      self.prev();\n    }\n  }\n}\n\n/**\n * Handles the keyboard `keydown` event for the visible `Carousel` elements.\n *\n * @param e the `Event` object\n */\nconst carouselKeyHandler = (\n  { code, target }: KeyboardEvent & { target: Node },\n) => {\n  const doc = getDocument(target);\n  const [element] = [...querySelectorAll(carouselSelector, doc)].filter((x) =>\n    isElementInScrollRange(x)\n  );\n  const self = getCarouselInstance(element);\n\n  // istanbul ignore next @preserve\n  if (self && !self.isAnimating && !/textarea|input/i.test(target.nodeName)) {\n    const RTL = isRTL(element);\n    const arrowKeyNext = !RTL ? keyArrowRight : keyArrowLeft;\n    const arrowKeyPrev = !RTL ? keyArrowLeft : keyArrowRight;\n\n    // istanbul ignore else @preserve\n    if (code === arrowKeyPrev) self.prev();\n    else if (code === arrowKeyNext) self.next();\n  }\n};\n\n// CAROUSEL TOUCH HANDLERS\n// =======================\n/**\n * Prevents the `touchstart` and `dragstart` events for the `Carousel` element.\n *\n * @param e the `Event` object\n */\nfunction carouselDragHandler(this: HTMLElement, e: DragEvent | TouchEvent) {\n  const { target } = e;\n  const self = getCarouselInstance(this);\n\n  // istanbul ignore next @preserve\n  if (\n    self &&\n    self.isTouch &&\n    ((self.indicator && !self.indicator.contains(target as Node)) ||\n      !self.controls.includes(target as HTMLElement))\n  ) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    e.preventDefault();\n  }\n}\n\n// CAROUSEL POINTER HANDLERS\n// =========================\n/**\n * Handles the `pointerdown` event for the `Carousel` element.\n *\n * @param e the `Event` object\n */\nfunction carouselPointerDownHandler(this: HTMLElement, e: PointerEvent) {\n  const { target } = e;\n  const self = getCarouselInstance(this);\n\n  // istanbul ignore else @preserve\n  if (self && !self.isAnimating && !self.isTouch) {\n    // filter pointer event on controls & indicators\n    const { controls, indicators } = self;\n    // istanbul ignore else @preserve\n    if (\n      ![...controls, ...indicators].every((el) =>\n        el === target || el.contains(target as Node)\n      )\n    ) {\n      startX = e.pageX;\n\n      // istanbul ignore else @preserve\n      if (this.contains(target as Node)) {\n        self.isTouch = true;\n        toggleCarouselTouchHandlers(self, true);\n      }\n    }\n  }\n}\n\n/**\n * Handles the `pointermove` event for the `Carousel` element.\n *\n * @param e\n */\nconst carouselPointerMoveHandler = (e: PointerEvent) => {\n  currentX = e.pageX;\n};\n\n/**\n * Handles the `pointerup` event for the `Carousel` element.\n *\n * @param e\n */\nconst carouselPointerUpHandler = (e: PointerEvent) => {\n  const { target } = e;\n  const doc = getDocument(target as Node);\n  const self = [...querySelectorAll(carouselSelector, doc)]\n    .map((c) => getCarouselInstance(c) as Carousel)\n    .find((i) => i.isTouch) as Carousel;\n\n  // impossible to satisfy\n  // istanbul ignore else @preserve\n  if (self) {\n    const { element, index } = self;\n    const RTL = isRTL(element);\n    endX = e.pageX;\n\n    self.isTouch = false;\n    toggleCarouselTouchHandlers(self);\n\n    if (\n      !doc.getSelection()?.toString().length &&\n      element.contains(target as HTMLElement) &&\n      Math.abs(startX - endX) > 120\n    ) {\n      // determine next index to slide to\n      // istanbul ignore else @preserve\n      if (currentX < startX) {\n        self.to(index + (RTL ? -1 : 1));\n      } else if (currentX > startX) {\n        self.to(index + (RTL ? 1 : -1));\n      }\n    }\n\n    // reset pointer position\n    startX = 0;\n    currentX = 0;\n    endX = 0;\n  }\n};\n\n// CAROUSEL PRIVATE METHODS\n// ========================\n/**\n * Sets active indicator for the `Carousel` instance.\n *\n * @param self the `Carousel` instance\n * @param index the index of the new active indicator\n */\nconst activateCarouselIndicator = (self: Carousel, index: number) => {\n  const { indicators } = self;\n  [...indicators].forEach((x) => removeClass(x, activeClass));\n\n  // istanbul ignore else @preserve\n  if (self.indicators[index]) addClass(indicators[index], activeClass);\n};\n\n/**\n * Toggles the pointer event listeners for a given `Carousel` instance.\n *\n * @param self the `Carousel` instance\n * @param add when `TRUE` event listeners are added\n */\nconst toggleCarouselTouchHandlers = (self: Carousel, add?: boolean) => {\n  const { element } = self;\n  const action = add ? addListener : removeListener;\n  action(\n    getDocument(element),\n    pointermoveEvent,\n    carouselPointerMoveHandler,\n    passiveHandler,\n  );\n  action(\n    getDocument(element),\n    pointerupEvent,\n    carouselPointerUpHandler,\n    passiveHandler,\n  );\n};\n\n/**\n * Returns the index of the current active item.\n *\n * @param self the `Carousel` instance\n * @returns the query result\n */\nconst getActiveIndex = (self: Carousel) => {\n  const { slides, element } = self;\n  const activeItem = querySelector(`.${carouselItem}.${activeClass}`, element);\n  return isHTMLElement(activeItem) ? [...slides].indexOf(activeItem) : -1;\n};\n\n// CAROUSEL DEFINITION\n// ===================\n/** Creates a new `Carousel` instance. */\nexport default class Carousel extends BaseComponent {\n  static selector = carouselSelector;\n  static init = carouselInitCallback;\n  static getInstance = getCarouselInstance;\n  declare options: CarouselOptions;\n  declare direction: \"right\" | \"left\";\n  declare index: number;\n  declare isTouch: boolean;\n  declare slides: HTMLCollectionOf<HTMLElement>;\n  declare controls: HTMLElement[];\n  declare indicator: HTMLElement | null;\n  declare indicators: HTMLElement[];\n\n  /**\n   * @param target mostly a `.carousel` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<CarouselOptions>) {\n    super(target, config);\n\n    // initialization element\n    const { element } = this;\n\n    // additional properties\n    this.direction = isRTL(element) ? \"right\" : \"left\";\n    this.isTouch = false;\n\n    // carousel elements\n    // a LIVE collection is prefferable\n    this.slides = getElementsByClassName(carouselItem, element);\n    const { slides } = this;\n\n    // invalidate when not enough items\n    // no need to go further\n    if (slides.length >= 2) {\n      const activeIndex = getActiveIndex(this);\n      // recover item from disposed instance\n      const transitionItem = [...slides].find((s) =>\n        matches(s, `.${carouselItem}-next,.${carouselItem}-next`)\n      );\n      this.index = activeIndex;\n\n      // external controls must be within same document context\n      const doc = getDocument(element);\n\n      this.controls = [\n        ...querySelectorAll(`[${dataBsSlide}]`, element),\n        ...querySelectorAll(\n          `[${dataBsSlide}][${dataBsTarget}=\"#${element.id}\"]`,\n          doc,\n        ),\n      ].filter((c, i, ar) => i === ar.indexOf(c));\n\n      this.indicator = querySelector(`.${carouselString}-indicators`, element);\n\n      // a LIVE collection is prefferable\n      this.indicators = [\n        ...(this.indicator\n          ? querySelectorAll(`[${dataBsSlideTo}]`, this.indicator)\n          // istanbul ignore next @preserve\n          : []),\n        ...querySelectorAll(\n          `[${dataBsSlideTo}][${dataBsTarget}=\"#${element.id}\"]`,\n          doc,\n        ),\n      ].filter((c, i, ar) => i === ar.indexOf(c));\n\n      // set JavaScript and DATA API options\n      const { options } = this;\n\n      // don't use TRUE as interval, it's actually 0, use the default 5000ms better\n      this.options.interval = options.interval === true\n        ? carouselDefaults.interval\n        : options.interval;\n\n      // set first slide active if none\n      // istanbul ignore next @preserve - impossible to test\n      if (transitionItem) {\n        this.index = [...slides].indexOf(transitionItem);\n      } else if (activeIndex < 0) {\n        this.index = 0;\n        addClass(slides[0], activeClass);\n        if (this.indicators.length) activateCarouselIndicator(this, 0);\n      }\n\n      // istanbul ignore else @preserve\n      if (this.indicators.length) activateCarouselIndicator(this, this.index);\n\n      // attach event handlers\n      this._toggleEventListeners(true);\n\n      // start to cycle if interval is set\n      if (options.interval) this.cycle();\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return carouselComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return carouselDefaults;\n  }\n\n  /**\n   * Check if instance is paused.\n   */\n  get isPaused() {\n    return hasClass(this.element, pausedClass);\n  }\n\n  /**\n   * Check if instance is animating.\n   */\n  get isAnimating() {\n    return querySelector(\n      `.${carouselItem}-next,.${carouselItem}-prev`,\n      this.element,\n    ) !== null;\n  }\n\n  // CAROUSEL PUBLIC METHODS\n  // =======================\n  /** Slide automatically through items. */\n  cycle() {\n    const { element, options, isPaused, index } = this;\n\n    Timer.clear(element, carouselString);\n    if (isPaused) {\n      Timer.clear(element, pausedClass);\n      removeClass(element, pausedClass);\n    }\n\n    Timer.set(\n      element,\n      () => {\n        // it's very important to check self.element\n        // where instance might have been disposed\n        // istanbul ignore else @preserve\n        if (\n          this.element && !this.isPaused && !this.isTouch &&\n          isElementInScrollRange(element)\n        ) {\n          this.to(index + 1);\n        }\n      },\n      options.interval as number,\n      carouselString,\n    );\n  }\n\n  /** Pause the automatic cycle. */\n  pause() {\n    const { element, options } = this;\n    // istanbul ignore else @preserve\n    if (!this.isPaused && options.interval) {\n      addClass(element, pausedClass);\n      Timer.set(\n        element,\n        () => {\n          /* ESLint is now happy */\n        },\n        1,\n        pausedClass,\n      );\n    }\n  }\n\n  /** Slide to the next item. */\n  next() {\n    // istanbul ignore else @preserve\n    if (!this.isAnimating) {\n      this.to(this.index + 1);\n    }\n  }\n\n  /** Slide to the previous item. */\n  prev() {\n    // istanbul ignore else @preserve\n    if (!this.isAnimating) {\n      this.to(this.index - 1);\n    }\n  }\n\n  /**\n   * Jump to the item with the `idx` index.\n   *\n   * @param idx the index of the item to jump to\n   */\n  to(idx: number) {\n    const { element, slides, options } = this;\n    const activeItem = getActiveIndex(this);\n    const RTL = isRTL(element);\n    let next = idx;\n\n    // when controled via methods, make sure to check again\n    // first return if we're on the same item #227\n    // `to()` must be SPAM protected by Timer\n    if (\n      !this.isAnimating && activeItem !== next &&\n      !Timer.get(element, dataBsSlide)\n    ) {\n      // determine transition direction\n      // istanbul ignore else @preserve\n      if (\n        activeItem < next || (activeItem === 0 && next === slides.length - 1)\n      ) {\n        this.direction = RTL ? \"right\" : \"left\"; // next\n      } else if (\n        activeItem > next || (activeItem === slides.length - 1 && next === 0)\n      ) {\n        this.direction = RTL ? \"left\" : \"right\"; // prev\n      }\n      const { direction } = this;\n\n      // find the right next index\n      if (next < 0) {\n        next = slides.length - 1;\n      } else if (next >= slides.length) {\n        next = 0;\n      }\n\n      // orientation, class name, eventProperties\n      const orientation = direction === \"left\" ? \"next\" : \"prev\";\n      const directionClass = direction === \"left\" ? \"start\" : \"end\";\n\n      const eventProperties = {\n        relatedTarget: slides[next],\n        from: activeItem,\n        to: next,\n        direction,\n      };\n\n      // update event properties\n      ObjectAssign(carouselSlideEvent, eventProperties);\n      ObjectAssign(carouselSlidEvent, eventProperties);\n\n      // discontinue when prevented\n      dispatchEvent(element, carouselSlideEvent);\n      if (!carouselSlideEvent.defaultPrevented) {\n        // update index\n        this.index = next;\n        activateCarouselIndicator(this, next);\n\n        if (\n          getElementTransitionDuration(slides[next]) &&\n          hasClass(element, \"slide\")\n        ) {\n          Timer.set(\n            element,\n            () => {\n              addClass(slides[next], `${carouselItem}-${orientation}`);\n              reflow(slides[next]);\n              addClass(slides[next], `${carouselItem}-${directionClass}`);\n              addClass(slides[activeItem], `${carouselItem}-${directionClass}`);\n\n              // the instance might get diposed mid-animation\n              emulateTransitionEnd(\n                slides[next],\n                () =>\n                  this.slides && this.slides.length &&\n                  carouselTransitionEndHandler(this),\n              );\n            },\n            0,\n            dataBsSlide,\n          );\n        } else {\n          addClass(slides[next], activeClass);\n          removeClass(slides[activeItem], activeClass);\n\n          Timer.set(\n            element,\n            () => {\n              Timer.clear(element, dataBsSlide);\n              // check for element, might have been disposed\n              // istanbul ignore else @preserve\n              if (element && options.interval && !this.isPaused) {\n                this.cycle();\n              }\n\n              dispatchEvent(element, carouselSlidEvent);\n            },\n            0,\n            dataBsSlide,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Toggles all event listeners for the `Carousel` instance.\n   *\n   * @param add when `TRUE` event listeners are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const { element, options, slides, controls, indicators } = this;\n    const { touch, pause, interval, keyboard } = options;\n    const action = add ? addListener : removeListener;\n\n    if (pause && interval) {\n      action(element, mouseenterEvent, carouselPauseHandler);\n      action(element, mouseleaveEvent, carouselResumeHandler);\n    }\n\n    if (touch && slides.length > 2) {\n      action(\n        element,\n        pointerdownEvent,\n        carouselPointerDownHandler,\n        passiveHandler,\n      );\n      action(element, touchstartEvent, carouselDragHandler, { passive: false });\n      action(element, dragstartEvent, carouselDragHandler, { passive: false });\n    }\n\n    // istanbul ignore else @preserve\n    if (controls.length) {\n      controls.forEach((arrow) => {\n        // istanbul ignore else @preserve\n        if (arrow) action(arrow, mouseclickEvent, carouselControlsHandler);\n      });\n    }\n\n    // istanbul ignore else @preserve\n    if (indicators.length) {\n      indicators.forEach((indicator) => {\n        action(indicator, mouseclickEvent, carouselIndicatorHandler);\n      });\n    }\n\n    if (keyboard) {\n      action(getDocument(element), keydownEvent, carouselKeyHandler);\n    }\n  };\n\n  /** Remove `Carousel` component from target. */\n  dispose() {\n    const { isAnimating } = this;\n\n    const clone = {\n      ...this,\n      isAnimating,\n    };\n    this._toggleEventListeners();\n    super.dispose();\n\n    // istanbul ignore next @preserve - impossible to test in playwright\n    if (clone.isAnimating) {\n      emulateTransitionEnd(clone.slides[clone.index], () => {\n        carouselTransitionEndHandler(clone);\n      });\n    }\n  }\n}\n","/**\n * Global namespace for most components `collapsing` class.\n * As used by `Collapse` / `Tab`.\n */\nconst collapsingClass = \"collapsing\";\nexport default collapsingClass;\n","/** @type {string} */\nconst collapseString = \"collapse\";\nexport default collapseString;\n","/** @type {string} */\nconst collapseComponent = \"Collapse\";\nexport default collapseComponent;\n","/* Native JavaScript for Bootstrap 5 | Collapse\n----------------------------------------------- */\nimport {\n  addClass,\n  ariaExpanded,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  getDocument,\n  getInstance,\n  hasClass,\n  isHTMLElement,\n  isString,\n  mouseclickEvent,\n  noop,\n  querySelector,\n  querySelectorAll,\n  reflow,\n  removeClass,\n  setAttribute,\n  setElementStyle,\n  Timer,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport collapsingClass from \"../strings/collapsingClass\";\nimport showClass from \"../strings/showClass\";\nimport collapseString from \"../strings/collapseString\";\nimport collapseComponent from \"../strings/collapseComponent\";\n\nimport getTargetElement from \"../util/getTargetElement\";\nimport BaseComponent from \"./base-component\";\nimport type { CollapseEvent, CollapseOptions } from \"../interface/collapse\";\n\n// COLLAPSE GC\n// ===========\nconst collapseSelector = `.${collapseString}`;\nconst collapseToggleSelector = `[${dataBsToggle}=\"${collapseString}\"]`;\nconst collapseDefaults = { parent: null };\n\n/**\n * Static method which returns an existing `Collapse` instance associated\n * to a target `Element`.\n */\nconst getCollapseInstance = (element: HTMLElement) =>\n  getInstance<Collapse>(element, collapseComponent);\n\n/**\n * A `Collapse` initialization callback.\n */\nconst collapseInitCallback = (element: HTMLElement) => new Collapse(element);\n\n// COLLAPSE CUSTOM EVENTS\n// ======================\nconst showCollapseEvent = createCustomEvent<\n  Record<string, never>,\n  CollapseEvent\n>(`show.bs.${collapseString}`);\nconst shownCollapseEvent = createCustomEvent<\n  Record<string, never>,\n  CollapseEvent\n>(`shown.bs.${collapseString}`);\nconst hideCollapseEvent = createCustomEvent<\n  Record<string, never>,\n  CollapseEvent\n>(`hide.bs.${collapseString}`);\nconst hiddenCollapseEvent = createCustomEvent<\n  Record<string, never>,\n  CollapseEvent\n>(`hidden.bs.${collapseString}`);\n\n// COLLAPSE PRIVATE METHODS\n// ========================\n/**\n * Expand the designated `Element`.\n *\n * @param self the `Collapse` instance\n */\nconst expandCollapse = (self: Collapse) => {\n  const { element, parent, triggers } = self;\n\n  dispatchEvent(element, showCollapseEvent);\n  if (!showCollapseEvent.defaultPrevented) {\n    Timer.set(element, noop, 17);\n    if (parent) Timer.set(parent, noop, 17);\n\n    addClass(element, collapsingClass);\n    removeClass(element, collapseString);\n\n    setElementStyle(element, { height: `${element.scrollHeight}px` });\n\n    emulateTransitionEnd(element, () => {\n      Timer.clear(element);\n      if (parent) Timer.clear(parent);\n\n      triggers.forEach((btn) => setAttribute(btn, ariaExpanded, \"true\"));\n\n      removeClass(element, collapsingClass);\n      addClass(element, collapseString);\n      addClass(element, showClass);\n\n      setElementStyle(element, { height: \"\" });\n\n      dispatchEvent(element, shownCollapseEvent);\n    });\n  }\n};\n\n/**\n * Collapse the designated `Element`.\n *\n * @param self the `Collapse` instance\n */\nconst collapseContent = (self: Collapse) => {\n  const { element, parent, triggers } = self;\n\n  dispatchEvent(element, hideCollapseEvent);\n\n  if (!hideCollapseEvent.defaultPrevented) {\n    Timer.set(element, noop, 17);\n    if (parent) Timer.set(parent, noop, 17);\n\n    setElementStyle(element, { height: `${element.scrollHeight}px` });\n\n    removeClass(element, collapseString);\n    removeClass(element, showClass);\n    addClass(element, collapsingClass);\n\n    reflow(element);\n    setElementStyle(element, { height: \"0px\" });\n\n    emulateTransitionEnd(element, () => {\n      Timer.clear(element);\n      // istanbul ignore else @preserve\n      if (parent) Timer.clear(parent);\n\n      triggers.forEach((btn) => setAttribute(btn, ariaExpanded, \"false\"));\n\n      removeClass(element, collapsingClass);\n      addClass(element, collapseString);\n\n      setElementStyle(element, { height: \"\" });\n\n      dispatchEvent(element, hiddenCollapseEvent);\n    });\n  }\n};\n\n// COLLAPSE EVENT HANDLER\n// ======================\n/**\n * Handles the `click` event for the `Collapse` instance.\n *\n * @param e the `Event` object\n */\nconst collapseClickHandler = (e: MouseEvent) => {\n  const { target } = e; // our target is `HTMLElement`\n  const trigger = target &&\n    closest(target as HTMLElement, collapseToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getCollapseInstance(element);\n  // istanbul ignore else @preserve\n  if (self) self.toggle();\n\n  // event target is anchor link #398\n  if (trigger && trigger.tagName === \"A\") e.preventDefault();\n};\n\n// COLLAPSE DEFINITION\n// ===================\n\n/** Returns a new `Colapse` instance. */\nexport default class Collapse extends BaseComponent {\n  static selector = collapseSelector;\n  static init = collapseInitCallback;\n  static getInstance = getCollapseInstance;\n  declare options: CollapseOptions;\n  declare parent: HTMLElement | null;\n  declare triggers: HTMLElement[];\n\n  /**\n   * @param target and `Element` that matches the selector\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<CollapseOptions>) {\n    super(target, config);\n\n    // initialization element\n    const { element, options } = this;\n    const doc = getDocument(element);\n\n    // set triggering elements\n    this.triggers = [...querySelectorAll(collapseToggleSelector, doc)].filter(\n      (btn) => getTargetElement(btn) === element,\n    );\n\n    // set parent accordion\n    this.parent = isHTMLElement(options.parent)\n      ? options.parent\n      : isString(options.parent)\n      ? getTargetElement(element) || querySelector(options.parent, doc)\n      : null;\n\n    // add event listeners\n    this._toggleEventListeners(true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return collapseComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return collapseDefaults;\n  }\n\n  // COLLAPSE PUBLIC METHODS\n  // =======================\n  /** Hides the collapse. */\n  hide() {\n    const { triggers, element } = this;\n    // istanbul ignore else @preserve\n    if (!Timer.get(element)) {\n      collapseContent(this);\n      // istanbul ignore else @preserve\n      if (triggers.length) {\n        triggers.forEach((btn) => addClass(btn, `${collapseString}d`));\n      }\n    }\n  }\n\n  /** Shows the collapse. */\n  show() {\n    const { element, parent, triggers } = this;\n    let activeCollapse;\n    let activeCollapseInstance;\n\n    if (parent) {\n      activeCollapse = [\n        ...querySelectorAll(`.${collapseString}.${showClass}`, parent),\n      ].find((i) => getCollapseInstance(i));\n      activeCollapseInstance = activeCollapse &&\n        getCollapseInstance(activeCollapse);\n    }\n\n    if ((!parent || !Timer.get(parent)) && !Timer.get(element)) {\n      if (activeCollapseInstance && activeCollapse !== element) {\n        collapseContent(activeCollapseInstance);\n        activeCollapseInstance.triggers.forEach((btn) => {\n          addClass(btn, `${collapseString}d`);\n        });\n      }\n\n      expandCollapse(this);\n      // istanbul ignore else @preserve\n      if (triggers.length) {\n        triggers.forEach((btn) => removeClass(btn, `${collapseString}d`));\n      }\n    }\n  }\n\n  /** Toggles the visibility of the collapse. */\n  toggle() {\n    if (!hasClass(this.element, showClass)) this.show();\n    else this.hide();\n  }\n\n  /**\n   * Toggles on/off the event listener(s) of the `Collapse` instance.\n   *\n   * @param add when `true`, the event listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { triggers } = this;\n\n    // istanbul ignore else @preserve\n    if (triggers.length) {\n      triggers.forEach((btn) =>\n        action(btn, mouseclickEvent, collapseClickHandler)\n      );\n    }\n  };\n\n  /** Remove the `Collapse` component from the target `Element`. */\n  dispose() {\n    this._toggleEventListeners();\n\n    super.dispose();\n  }\n}\n","/**\n * Global namespace for `Dropdown` types / classes.\n */\nconst dropdownMenuClasses = [\"dropdown\", \"dropup\", \"dropstart\", \"dropend\"];\nexport default dropdownMenuClasses;\n","/** @type {string} */\nconst dropdownComponent = \"Dropdown\";\nexport default dropdownComponent;\n","/**\n * Global namespace for `.dropdown-menu`.\n */\nconst dropdownMenuClass = \"dropdown-menu\";\nexport default dropdownMenuClass;\n","import { closest, getAttribute, hasAttribute } from \"@thednp/shorty\";\n\n/**\n * Checks if an *event.target* or its parent has an `href=\"#\"` value.\n * We need to prevent jumping around onclick, don't we?\n *\n * @param element the target element\n * @returns the query result\n */\nconst isEmptyAnchor = (element: HTMLElement) => {\n  // `EventTarget` must be `HTMLElement`\n  const parentAnchor = closest(element, \"A\");\n  return (\n    (element.tagName === \"A\" &&\n      // anchor href starts with #\n      hasAttribute(element, \"href\") &&\n      (getAttribute(element, \"href\") as string).slice(-1) === \"#\") ||\n    // OR a child of an anchor with href starts with #\n    (parentAnchor &&\n      hasAttribute(parentAnchor, \"href\") &&\n      (getAttribute(parentAnchor, \"href\") as string).slice(-1) === \"#\")\n  );\n};\nexport default isEmptyAnchor;\n","/* Native JavaScript for Bootstrap 5 | Dropdown\n----------------------------------------------- */\nimport {\n  addClass,\n  ariaExpanded,\n  closest,\n  createCustomEvent,\n  CSS4Declaration,\n  dispatchEvent,\n  focus,\n  focusEvent,\n  getAttribute,\n  getBoundingClientRect,\n  getDocument,\n  getDocumentElement,\n  getElementsByClassName,\n  getElementStyle,\n  getInstance,\n  hasClass,\n  isHTMLElement,\n  isRTL,\n  keyArrowDown,\n  keyArrowUp,\n  keydownEvent,\n  keyEscape,\n  keyupEvent,\n  mouseclickEvent,\n  mousedownEvent,\n  ObjectAssign,\n  removeClass,\n  setAttribute,\n  setElementStyle,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport showClass from \"../strings/showClass\";\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport dropdownClasses from \"../strings/dropdownClasses\";\nimport dropdownComponent from \"../strings/dropdownComponent\";\nimport dropdownMenuClass from \"../strings/dropdownMenuClass\";\n\nimport isEmptyAnchor from \"../util/isEmptyAnchor\";\nimport BaseComponent from \"./base-component\";\nimport type { DropdownEvent, DropdownOptions } from \"../interface/dropdown\";\n\n// DROPDOWN PRIVATE GC\n// ===================\nconst [dropdownString, dropupString, dropstartString, dropendString] =\n  dropdownClasses;\nconst dropdownSelector = `[${dataBsToggle}=\"${dropdownString}\"]`;\n\n/**\n * Static method which returns an existing `Dropdown` instance associated\n * to a target `Element`.\n */\nconst getDropdownInstance = (element: HTMLElement) =>\n  getInstance<Dropdown>(element, dropdownComponent);\n\n/**\n * A `Dropdown` initialization callback.\n */\nconst dropdownInitCallback = (element: HTMLElement) => new Dropdown(element);\n\n// DROPDOWN PRIVATE GC\n// ===================\n// const dropdownMenuStartClass = `${dropdownMenuClass}-start`;\nconst dropdownMenuEndClass = `${dropdownMenuClass}-end`;\nconst verticalClass = [dropdownString, dropupString];\nconst horizontalClass = [dropstartString, dropendString];\nconst menuFocusTags = [\"A\", \"BUTTON\"];\n\nconst dropdownDefaults = {\n  offset: 5, // [number] 5(px)\n  display: \"dynamic\", // [dynamic|static]\n};\n\ntype DropdownEventProps = { relatedTarget: HTMLElement };\n\n// DROPDOWN CUSTOM EVENTS\n// ======================\nconst showDropdownEvent = createCustomEvent<DropdownEventProps, DropdownEvent>(\n  `show.bs.${dropdownString}`,\n);\nconst shownDropdownEvent = createCustomEvent<DropdownEventProps, DropdownEvent>(\n  `shown.bs.${dropdownString}`,\n);\nconst hideDropdownEvent = createCustomEvent<DropdownEventProps, DropdownEvent>(\n  `hide.bs.${dropdownString}`,\n);\nconst hiddenDropdownEvent = createCustomEvent<\n  DropdownEventProps,\n  DropdownEvent\n>(`hidden.bs.${dropdownString}`);\nconst updatedDropdownEvent = createCustomEvent<\n  DropdownEventProps,\n  DropdownEvent\n>(`updated.bs.${dropdownString}`);\n\n// DROPDOWN PRIVATE METHODS\n// ========================\n/**\n * Apply specific style or class names to a `.dropdown-menu` to automatically\n * accomodate the layout and the page scroll.\n *\n * @param self the `Dropdown` instance\n */\nconst styleDropdown = (self: Dropdown) => {\n  const { element, menu, parentElement, options } = self;\n  const { offset } = options;\n\n  // don't apply any style on mobile view\n  // istanbul ignore else @preserve: this test requires a navbar\n  if (getElementStyle(menu, \"position\") !== \"static\") {\n    const RTL = isRTL(element);\n    // const menuStart = hasClass(menu, dropdownMenuStartClass);\n    const menuEnd = hasClass(menu, dropdownMenuEndClass);\n\n    // reset menu offset and position\n    const resetProps = [\"margin\", \"top\", \"bottom\", \"left\", \"right\"];\n    resetProps.forEach((p) => {\n      // menu.style[p] = '';\n      const style: { [key: string]: string } = {};\n      style[p] = \"\";\n      setElementStyle(menu, style);\n    });\n\n    // set initial position class\n    // take into account .btn-group parent as .dropdown\n    // this requires navbar/btn-group/input-group\n    let positionClass = dropdownClasses.find((c) =>\n      hasClass(parentElement, c)\n    ) ||\n      // istanbul ignore next @preserve: fallback position\n      dropdownString;\n\n    const dropdownMargin: { [key: string]: number[] } = {\n      dropdown: [offset, 0, 0],\n      dropup: [0, 0, offset],\n      dropstart: RTL ? [-1, 0, 0, offset] : [-1, offset, 0],\n      dropend: RTL ? [-1, offset, 0] : [-1, 0, 0, offset],\n    };\n\n    const dropdownPosition: { [key: string]: Partial<CSS4Declaration> } = {\n      dropdown: { top: \"100%\" },\n      dropup: { top: \"auto\", bottom: \"100%\" },\n      dropstart: RTL\n        ? { left: \"100%\", right: \"auto\" }\n        : { left: \"auto\", right: \"100%\" },\n      dropend: RTL\n        ? { left: \"auto\", right: \"100%\" }\n        : { left: \"100%\", right: \"auto\" },\n      menuStart: RTL\n        ? { right: \"0\", left: \"auto\" }\n        : { right: \"auto\", left: \"0\" },\n      menuEnd: RTL\n        ? { right: \"auto\", left: \"0\" }\n        : { right: \"0\", left: \"auto\" },\n    };\n\n    const { offsetWidth: menuWidth, offsetHeight: menuHeight } = menu;\n\n    const { clientWidth, clientHeight } = getDocumentElement(element);\n    const {\n      left: targetLeft,\n      top: targetTop,\n      width: targetWidth,\n      height: targetHeight,\n    } = getBoundingClientRect(element);\n\n    // dropstart | dropend\n    const leftFullExceed = targetLeft - menuWidth - offset < 0;\n    // dropend\n    const rightFullExceed =\n      targetLeft + menuWidth + targetWidth + offset >= clientWidth;\n    // dropstart | dropend\n    const bottomExceed = targetTop + menuHeight + offset >= clientHeight;\n    // dropdown\n    const bottomFullExceed =\n      targetTop + menuHeight + targetHeight + offset >= clientHeight;\n    // dropup\n    const topExceed = targetTop - menuHeight - offset < 0;\n    // dropdown / dropup\n    const leftExceed = ((!RTL && menuEnd) || (RTL && !menuEnd)) &&\n      targetLeft + targetWidth - menuWidth < 0;\n    const rightExceed = ((RTL && menuEnd) || (!RTL && !menuEnd)) &&\n      targetLeft + menuWidth >= clientWidth;\n\n    // recompute position\n    // handle RTL as well\n    if (\n      horizontalClass.includes(positionClass) && leftFullExceed &&\n      rightFullExceed\n    ) {\n      positionClass = dropdownString;\n    }\n    if (\n      positionClass === dropstartString &&\n      (!RTL ? leftFullExceed : rightFullExceed)\n    ) {\n      positionClass = dropendString;\n    }\n    if (\n      positionClass === dropendString &&\n      (RTL ? leftFullExceed : rightFullExceed)\n    ) {\n      positionClass = dropstartString;\n    }\n    if (positionClass === dropupString && topExceed && !bottomFullExceed) {\n      positionClass = dropdownString;\n    }\n    if (positionClass === dropdownString && bottomFullExceed && !topExceed) {\n      positionClass = dropupString;\n    }\n\n    // override position for horizontal classes\n    if (horizontalClass.includes(positionClass) && bottomExceed) {\n      ObjectAssign(dropdownPosition[positionClass], {\n        top: \"auto\",\n        bottom: 0,\n      });\n    }\n\n    // override position for vertical classes\n    if (verticalClass.includes(positionClass) && (leftExceed || rightExceed)) {\n      // don't realign when menu is wider than window\n      // in both RTL and non-RTL readability is KING\n      let posAjust:\n        | { left: \"auto\" | number; right: \"auto\" | number }\n        | undefined = { left: \"auto\", right: \"auto\" };\n      // istanbul ignore else @preserve\n      if (!leftExceed && rightExceed && !RTL) {\n        posAjust = { left: \"auto\", right: 0 };\n      }\n      // istanbul ignore else @preserve\n      if (leftExceed && !rightExceed && RTL) {\n        posAjust = { left: 0, right: \"auto\" };\n      }\n      // istanbul ignore else @preserve\n      if (posAjust) {\n        ObjectAssign(dropdownPosition[positionClass], posAjust);\n      }\n    }\n\n    const margins: number[] = dropdownMargin[positionClass];\n    setElementStyle(menu, {\n      ...dropdownPosition[positionClass],\n      margin: `${margins.map((x) => (x ? `${x}px` : x)).join(\" \")}`,\n    });\n\n    // override dropdown-menu-start | dropdown-menu-end\n    if (verticalClass.includes(positionClass) && menuEnd) {\n      // istanbul ignore else @preserve\n      if (menuEnd) {\n        const endAdjust = (!RTL && leftExceed) || (RTL && rightExceed)\n          ? \"menuStart\"\n          // istanbul ignore next @preserve\n          : \"menuEnd\";\n        setElementStyle(menu, dropdownPosition[endAdjust]);\n      }\n    }\n    // trigger updated event\n    dispatchEvent(parentElement, updatedDropdownEvent);\n  }\n};\n\n/**\n * Returns an `Array` of focusable items in the given dropdown-menu.\n *\n * @param menu the target menu\n * @returns all children of the dropdown menu\n */\nconst getMenuItems = (menu: HTMLElement) => {\n  return [...menu.children]\n    .map((c) => {\n      if (c && menuFocusTags.includes(c.tagName)) return c;\n      const { firstElementChild } = c;\n      if (\n        firstElementChild && menuFocusTags.includes(firstElementChild.tagName)\n      ) {\n        return firstElementChild;\n      }\n      return null;\n    })\n    .filter((c) => c);\n};\n\n/**\n * Toggles on/off the listeners for the events that close the dropdown\n * as well as event that request a new position for the dropdown.\n *\n * @param {Dropdown} self the `Dropdown` instance\n */\nconst toggleDropdownDismiss = (self: Dropdown) => {\n  const { element, options, menu } = self;\n  const action = self.open ? addListener : removeListener;\n  const doc = getDocument(element);\n\n  action(doc, mouseclickEvent, dropdownDismissHandler);\n  action(doc, focusEvent, dropdownDismissHandler);\n  action(doc, keydownEvent, dropdownPreventScroll);\n  action(doc, keyupEvent, dropdownKeyHandler);\n\n  // istanbul ignore else @preserve\n  if (options.display === \"dynamic\") {\n    if (self.open) self._observer.observe(menu);\n    else self._observer.disconnect();\n  }\n};\n\n/**\n * Returns the currently open `.dropdown` element.\n *\n * @param element target\n * @returns the query result\n */\nconst getCurrentOpenDropdown = (\n  element: HTMLElement,\n): HTMLElement | undefined => {\n  const currentParent = [...dropdownClasses, \"btn-group\", \"input-group\"]\n    .map((c) =>\n      getElementsByClassName(`${c} ${showClass}`, getDocument(element))\n    )\n    .find((x) => x.length);\n\n  if (currentParent && currentParent.length) {\n    return [...(currentParent[0].children as HTMLCollectionOf<HTMLElement>)]\n      .find((x) =>\n        dropdownClasses.some((c) => c === getAttribute(x, dataBsToggle))\n      );\n  }\n  return undefined;\n};\n\n// DROPDOWN EVENT HANDLERS\n// =======================\n/**\n * Handles the `click` event for the `Dropdown` instance.\n *\n * @param e event object\n */\nconst dropdownDismissHandler = (e: MouseEvent) => {\n  const { target, type } = e;\n\n  // istanbul ignore else @preserve\n  if (target && isHTMLElement(target)) {\n    // some weird FF bug #409\n    const element = getCurrentOpenDropdown(target);\n    const self = element && getDropdownInstance(element);\n\n    // istanbul ignore else @preserve\n    if (self) {\n      const { parentElement, menu } = self;\n\n      const isForm = parentElement &&\n        parentElement.contains(target) &&\n        (target.tagName === \"form\" || closest(target, \"form\") !== null);\n\n      if (\n        [mouseclickEvent, mousedownEvent].includes(type) &&\n        isEmptyAnchor(target)\n      ) {\n        e.preventDefault();\n      }\n\n      // istanbul ignore else @preserve\n      if (\n        !isForm && type !== focusEvent && target !== element && target !== menu\n      ) {\n        self.hide();\n      }\n    }\n  }\n};\n\n/**\n * Handles `click` event listener for `Dropdown`.\n *\n * @param e event object\n */\nconst dropdownClickHandler = (e: MouseEvent) => {\n  const { target } = e;\n  const element = target && closest(target as HTMLElement, dropdownSelector);\n  const self = element && getDropdownInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    e.stopPropagation();\n    self.toggle();\n    // istanbul ignore else @preserve\n    if (element && isEmptyAnchor(element)) e.preventDefault();\n  }\n};\n\n/**\n * Prevents scroll when dropdown-menu is visible.\n *\n * @param e event object\n */\nconst dropdownPreventScroll = (e: KeyboardEvent) => {\n  // istanbul ignore else @preserve\n  if ([keyArrowDown, keyArrowUp].includes(e.code)) e.preventDefault();\n};\n\n/**\n * Handles keyboard `keydown` events for `Dropdown`.\n *\n * @param e keyboard key\n */\nfunction dropdownKeyHandler(this: HTMLElement, e: KeyboardEvent) {\n  const { code } = e;\n  const element = getCurrentOpenDropdown(this);\n  const self = element && getDropdownInstance(element);\n  const { activeElement } = (element && getDocument(element)) as Document;\n\n  // istanbul ignore else @preserve\n  if (self && activeElement) {\n    const { menu, open } = self;\n    const menuItems = getMenuItems(menu);\n\n    // arrow up & down\n    if (\n      menuItems && menuItems.length && [keyArrowDown, keyArrowUp].includes(code)\n    ) {\n      let idx = menuItems.indexOf(activeElement);\n      // istanbul ignore else @preserve\n      if (activeElement === element) {\n        idx = 0;\n      } else if (code === keyArrowUp) {\n        idx = idx > 1 ? idx - 1 : 0;\n      } else if (code === keyArrowDown) {\n        idx = idx < menuItems.length - 1 ? idx + 1 : idx;\n      }\n      // istanbul ignore else @preserve\n      if (menuItems[idx]) focus(menuItems[idx] as HTMLElement);\n    }\n\n    if (keyEscape === code && open) {\n      self.toggle();\n      focus(element);\n    }\n  }\n}\n\n/** Handles dropdown layout changes during resize / scroll. */\nfunction dropdownIntersectionHandler(target: HTMLElement) {\n  const element = getCurrentOpenDropdown(target);\n  const self = element && getDropdownInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self && self.open) styleDropdown(self);\n}\n\n// DROPDOWN DEFINITION\n// ===================\n/** Returns a new Dropdown instance. */\nexport default class Dropdown extends BaseComponent {\n  static selector = dropdownSelector;\n  static init = dropdownInitCallback;\n  static getInstance = getDropdownInstance;\n  declare options: DropdownOptions;\n  declare open: boolean;\n  declare parentElement: HTMLElement;\n  declare menu: HTMLElement;\n  declare _observer: IntersectionObserver;\n\n  /**\n   * @param target Element or string selector\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<DropdownOptions>) {\n    super(target, config);\n\n    // initialization element\n    const { parentElement } = this.element;\n    const [menu] = getElementsByClassName(\n      dropdownMenuClass,\n      parentElement as ParentNode,\n    );\n\n    // invalidate when dropdown-menu is missing\n    if (menu) {\n      // set targets\n      this.parentElement = parentElement as HTMLElement;\n      this.menu = menu;\n      this._observer = new IntersectionObserver(\n        ([entry]) => dropdownIntersectionHandler(entry.target as HTMLElement),\n        { threshold: 1 },\n      );\n\n      // add event listener\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return dropdownComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return dropdownDefaults;\n  }\n\n  // DROPDOWN PUBLIC METHODS\n  // =======================\n  /** Shows/hides the dropdown menu to the user. */\n  toggle() {\n    if (this.open) this.hide();\n    else this.show();\n  }\n\n  /** Shows the dropdown menu to the user. */\n  show() {\n    const { element, open, menu, parentElement } = this;\n\n    // istanbul ignore else @preserve\n    if (!open) {\n      const currentElement = getCurrentOpenDropdown(element);\n      const currentInstance = currentElement &&\n        getDropdownInstance(currentElement);\n      if (currentInstance) currentInstance.hide();\n\n      // dispatch event\n      [showDropdownEvent, shownDropdownEvent, updatedDropdownEvent].forEach(\n        (e) => {\n          e.relatedTarget = element;\n        },\n      );\n\n      dispatchEvent(parentElement, showDropdownEvent);\n      if (!showDropdownEvent.defaultPrevented) {\n        addClass(menu, showClass);\n        addClass(parentElement, showClass);\n        setAttribute(element, ariaExpanded, \"true\");\n\n        // change menu position\n        styleDropdown(this);\n\n        this.open = !open;\n\n        focus(element); // focus the element\n        toggleDropdownDismiss(this);\n        dispatchEvent(parentElement, shownDropdownEvent);\n      }\n    }\n  }\n\n  /** Hides the dropdown menu from the user. */\n  hide() {\n    const { element, open, menu, parentElement } = this;\n\n    // istanbul ignore else @preserve\n    if (open) {\n      [hideDropdownEvent, hiddenDropdownEvent].forEach((e) => {\n        e.relatedTarget = element;\n      });\n\n      dispatchEvent(parentElement, hideDropdownEvent);\n      if (!hideDropdownEvent.defaultPrevented) {\n        removeClass(menu, showClass);\n        removeClass(parentElement, showClass);\n        setAttribute(element, ariaExpanded, \"false\");\n\n        this.open = !open;\n        // only re-attach handler if the instance is not disposed\n        toggleDropdownDismiss(this);\n        dispatchEvent(parentElement, hiddenDropdownEvent);\n      }\n    }\n  }\n\n  /**\n   * Toggles on/off the `click` event listener of the `Dropdown`.\n   *\n   * @param add when `true`, it will add the event listener\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    action(this.element, mouseclickEvent, dropdownClickHandler);\n  };\n\n  /** Removes the `Dropdown` component from the target element. */\n  dispose() {\n    if (this.open) this.hide();\n\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n","/** @type {string} */\nconst modalString = \"modal\";\nexport default modalString;\n","/** @type {string} */\nconst modalComponent = \"Modal\";\nexport default modalComponent;\n","/** @type {string} */\nconst offcanvasComponent = \"Offcanvas\";\nexport default offcanvasComponent;\n","/**\n * Global namespace for components `fixed-top` class.\n */\nconst fixedTopClass = \"fixed-top\";\nexport default fixedTopClass;\n","/**\n * Global namespace for components `fixed-bottom` class.\n */\nconst fixedBottomClass = \"fixed-bottom\";\nexport default fixedBottomClass;\n","/**\n * Global namespace for components `sticky-top` class.\n */\nconst stickyTopClass = \"sticky-top\";\nexport default stickyTopClass;\n","/**\n * Global namespace for components `position-sticky` class.\n */\nconst positionStickyClass = \"position-sticky\";\nexport default positionStickyClass;\n","import {\n  getDocumentBody,\n  getDocumentElement,\n  getElementsByClassName,\n  getElementStyle,\n  getWindow,\n  hasClass,\n  setElementStyle,\n} from \"@thednp/shorty\";\n\nimport fixedTopClass from \"../strings/fixedTopClass\";\nimport fixedBottomClass from \"../strings/fixedBottomClass\";\nimport stickyTopClass from \"../strings/stickyTopClass\";\nimport positionStickyClass from \"../strings/positionStickyClass\";\n\nconst getFixedItems = (parent?: ParentNode) => [\n  ...getElementsByClassName(fixedTopClass, parent),\n  ...getElementsByClassName(fixedBottomClass, parent),\n  ...getElementsByClassName(stickyTopClass, parent),\n  ...getElementsByClassName(positionStickyClass, parent),\n  ...getElementsByClassName(\"is-fixed\", parent),\n];\n\n/**\n * Removes *padding* and *overflow* from the `<body>`\n * and all spacing from fixed items.\n *\n * @param element the target modal/offcanvas\n */\nexport const resetScrollbar = (element?: HTMLElement) => {\n  const bd = getDocumentBody(element);\n  setElementStyle(bd, {\n    paddingRight: \"\",\n    overflow: \"\",\n  });\n\n  const fixedItems = getFixedItems(bd);\n\n  // istanbul ignore else @preserve\n  if (fixedItems.length) {\n    fixedItems.forEach((fixed) => {\n      setElementStyle(fixed, {\n        paddingRight: \"\",\n        marginRight: \"\",\n      });\n    });\n  }\n};\n\n/**\n * Returns the scrollbar width if the body does overflow\n * the window.\n *\n * @param element target element\n * @returns the scrollbar width value\n */\nexport const measureScrollbar = (element: HTMLElement) => {\n  const { clientWidth } = getDocumentElement(element);\n  const { innerWidth } = getWindow(element);\n  return Math.abs(innerWidth - clientWidth);\n};\n\n/**\n * Sets the `<body>` and fixed items style when modal / offcanvas\n * is shown to the user.\n *\n * @param element the target modal/offcanvas\n * @param overflow body does overflow or not\n */\nexport const setScrollbar = (element: HTMLElement, overflow?: boolean) => {\n  const bd = getDocumentBody(element);\n  const bodyPad = parseInt(getElementStyle(bd, \"paddingRight\"), 10);\n  const isOpen = getElementStyle(bd, \"overflow\") === \"hidden\";\n  const sbWidth = isOpen && bodyPad ? 0 : measureScrollbar(element);\n  const fixedItems = getFixedItems(bd);\n\n  // istanbul ignore else @preserve\n  if (overflow) {\n    setElementStyle(bd, {\n      overflow: \"hidden\",\n      paddingRight: `${bodyPad + sbWidth}px`,\n    });\n\n    // istanbul ignore else @preserve\n    if (fixedItems.length) {\n      fixedItems.forEach((fixed) => {\n        const itemPadValue = getElementStyle(fixed, \"paddingRight\");\n        fixed.style.paddingRight = `${parseInt(itemPadValue, 10) + sbWidth}px`;\n        // istanbul ignore else @preserve\n        if (\n          [stickyTopClass, positionStickyClass].some((c) => hasClass(fixed, c))\n        ) {\n          const itemMValue = getElementStyle(fixed, \"marginRight\");\n          fixed.style.marginRight = `${parseInt(itemMValue, 10) - sbWidth}px`;\n        }\n      });\n    }\n  }\n};\n","/** @type {string} */\nconst offcanvasString = \"offcanvas\";\nexport default offcanvasString;\n","import { createElement, getDocumentBody, isNode } from \"@thednp/shorty\";\n\n// the default container for Modal, Offcanvas, Popover and Tooltip\nconst popupContainer = createElement({\n  tagName: \"div\",\n  className: \"popup-container\",\n}) as HTMLElement;\n\nconst appendPopup = (target: HTMLElement, customContainer?: ParentNode) => {\n  const containerIsBody = isNode(customContainer) &&\n    customContainer.nodeName === \"BODY\";\n  const lookup = isNode(customContainer) && !containerIsBody\n    ? customContainer\n    : popupContainer;\n  const BODY = containerIsBody ? customContainer : getDocumentBody(target);\n\n  // istanbul ignore else @preserve\n  if (isNode(target)) {\n    if (lookup === popupContainer) {\n      BODY.append(popupContainer);\n    }\n    lookup.append(target);\n  }\n};\n\nconst removePopup = (target: HTMLElement, customContainer?: ParentNode) => {\n  const containerIsBody = isNode(customContainer) &&\n    customContainer.nodeName === \"BODY\";\n  const lookup = isNode(customContainer) && !containerIsBody\n    ? customContainer\n    : popupContainer;\n\n  // istanbul ignore else @preserve\n  if (isNode(target)) {\n    target.remove();\n\n    if (lookup === popupContainer && !popupContainer.children.length) {\n      popupContainer.remove();\n    }\n  }\n};\n\nconst hasPopup = (target: HTMLElement, customContainer?: ParentNode) => {\n  const lookup = isNode(customContainer) && customContainer.nodeName !== \"BODY\"\n    ? customContainer\n    : popupContainer;\n  return isNode(target) && lookup.contains(target);\n};\n\nexport { appendPopup, hasPopup, popupContainer, removePopup };\n","import {\n  addClass,\n  createElement,\n  getDocument,\n  getDocumentBody,\n  hasClass,\n  querySelector,\n  reflow,\n  removeClass,\n} from \"@thednp/shorty\";\n\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport modalString from \"../strings/modalString\";\nimport offcanvasString from \"../strings/offcanvasString\";\nimport { resetScrollbar } from \"./scrollbar\";\nimport { appendPopup, removePopup } from \"./popupContainer\";\n\nconst backdropString = \"backdrop\";\nconst modalBackdropClass = `${modalString}-${backdropString}`;\nconst offcanvasBackdropClass = `${offcanvasString}-${backdropString}`;\nconst modalActiveSelector = `.${modalString}.${showClass}`;\nconst offcanvasActiveSelector = `.${offcanvasString}.${showClass}`;\n\n// any document would suffice\nconst overlay = createElement(\"div\") as HTMLElement;\n\n/**\n * Returns the current active modal / offcancas element.\n *\n * @param element the context element\n * @returns the requested element\n */\nconst getCurrentOpen = (element?: HTMLElement): HTMLElement | null => {\n  return querySelector(\n    `${modalActiveSelector},${offcanvasActiveSelector}`,\n    getDocument(element),\n  );\n};\n\n/**\n * Toogles from a Modal overlay to an Offcanvas, or vice-versa.\n *\n * @param isModal\n */\nconst toggleOverlayType = (isModal?: boolean) => {\n  const targetClass = isModal ? modalBackdropClass : offcanvasBackdropClass;\n  [modalBackdropClass, offcanvasBackdropClass].forEach((c) => {\n    removeClass(overlay, c);\n  });\n  addClass(overlay, targetClass);\n};\n\n/**\n * Append the overlay to DOM.\n *\n * @param element\n * @param hasFade\n * @param isModal\n */\nconst appendOverlay = (\n  element: HTMLElement,\n  hasFade: boolean,\n  isModal?: boolean,\n) => {\n  toggleOverlayType(isModal);\n  appendPopup(overlay, getDocumentBody(element));\n  if (hasFade) addClass(overlay, fadeClass);\n};\n\n/**\n * Shows the overlay to the user.\n */\nconst showOverlay = () => {\n  if (!hasClass(overlay, showClass)) {\n    addClass(overlay, showClass);\n    reflow(overlay);\n  }\n};\n\n/**\n * Hides the overlay from the user.\n */\nconst hideOverlay = () => {\n  removeClass(overlay, showClass);\n};\n\n/**\n * Removes the overlay from DOM.\n *\n * @param element\n */\nconst removeOverlay = (element?: HTMLElement): void => {\n  if (!getCurrentOpen(element)) {\n    removeClass(overlay, fadeClass);\n    removePopup(overlay, getDocumentBody(element));\n    resetScrollbar(element);\n  }\n};\n\nexport {\n  appendOverlay,\n  getCurrentOpen,\n  hideOverlay,\n  modalActiveSelector,\n  modalBackdropClass,\n  offcanvasActiveSelector,\n  offcanvasBackdropClass,\n  overlay,\n  removeOverlay,\n  showOverlay,\n  toggleOverlayType,\n};\n","import { getElementStyle, isHTMLElement } from \"@thednp/shorty\";\n\n/**\n * @param element target\n * @returns the check result\n */\nconst isVisible = (element: HTMLElement) => {\n  return isHTMLElement(element) &&\n    getElementStyle(element, \"visibility\") !== \"hidden\" &&\n    element.offsetParent !== null;\n};\nexport default isVisible;\n","/* Native JavaScript for Bootstrap 5 | Modal\n-------------------------------------------- */\nimport {\n  addClass,\n  ariaHidden,\n  ariaModal,\n  closest,\n  createCustomEvent,\n  CSS4Declaration,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focus,\n  getDocument,\n  getDocumentBody,\n  getDocumentElement,\n  getElementTransitionDuration,\n  getInstance,\n  hasClass,\n  isRTL,\n  KeyboardEvent,\n  keydownEvent,\n  keyEscape,\n  mouseclickEvent,\n  MouseEvent,\n  querySelector,\n  querySelectorAll,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n  setElementStyle,\n  Timer,\n  toggleFocusTrap,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport dataBsDismiss from \"../strings/dataBsDismiss\";\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport modalString from \"../strings/modalString\";\nimport modalComponent from \"../strings/modalComponent\";\nimport offcanvasComponent from \"../strings/offcanvasComponent\";\nimport getTargetElement from \"../util/getTargetElement\";\nimport { measureScrollbar, setScrollbar } from \"../util/scrollbar\";\nimport {\n  appendOverlay,\n  getCurrentOpen,\n  hideOverlay,\n  modalActiveSelector,\n  overlay,\n  removeOverlay,\n  showOverlay,\n  toggleOverlayType,\n} from \"../util/backdrop\";\nimport isVisible from \"../util/isVisible\";\nimport BaseComponent from \"./base-component\";\nimport { ModalEvent, ModalOptions } from \"../interface/modal\";\nimport { hasPopup } from \"../util/popupContainer\";\n\n// MODAL PRIVATE GC\n// ================\nconst modalSelector = `.${modalString}`;\nconst modalToggleSelector = `[${dataBsToggle}=\"${modalString}\"]`;\nconst modalDismissSelector = `[${dataBsDismiss}=\"${modalString}\"]`;\nconst modalStaticClass = `${modalString}-static`;\n\nconst modalDefaults = {\n  backdrop: true,\n  keyboard: true,\n};\n\ntype ModalEventProps = {\n  relatedTarget: HTMLElement | undefined;\n};\n\n/**\n * Static method which returns an existing `Modal` instance associated\n * to a target `Element`.\n */\nconst getModalInstance = (element: HTMLElement) =>\n  getInstance<Modal>(element, modalComponent);\n\n/**\n * A `Modal` initialization callback.\n */\nconst modalInitCallback = (element: HTMLElement) => new Modal(element);\n\n// MODAL CUSTOM EVENTS\n// ===================\nconst showModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `show.bs.${modalString}`,\n);\nconst shownModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `shown.bs.${modalString}`,\n);\nconst hideModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `hide.bs.${modalString}`,\n);\nconst hiddenModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `hidden.bs.${modalString}`,\n);\n\n// MODAL PRIVATE METHODS\n// =====================\n/**\n * Applies special style for the `<body>` and fixed elements\n * when a modal instance is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst setModalScrollbar = (self: Modal) => {\n  const { element } = self;\n  const scrollbarWidth = measureScrollbar(element);\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  const { clientHeight: modalHeight, scrollHeight: modalScrollHeight } =\n    element;\n  const modalOverflow = modalHeight !== modalScrollHeight;\n\n  // istanbul ignore next @preserve: impossible to test?\n  if (!modalOverflow && scrollbarWidth) {\n    const pad = !isRTL(element)\n      ? \"paddingRight\"\n      // istanbul ignore next @preserve\n      : \"paddingLeft\";\n    const padStyle = { [pad]: `${scrollbarWidth}px` } as Partial<\n      CSS4Declaration\n    >;\n    setElementStyle(element, padStyle);\n  }\n  setScrollbar(element, modalOverflow || clientHeight !== scrollHeight);\n};\n\n/**\n * Toggles on/off the listeners of events that close the modal.\n *\n * @param self the `Modal` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleModalDismiss = (self: Modal, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n  action(element, mouseclickEvent, modalDismissHandler);\n  action(getDocument(element), keydownEvent, modalKeyHandler);\n\n  if (add) self._observer.observe(element);\n  else self._observer.disconnect();\n};\n\n/**\n * Executes after a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalHide = (self: Modal) => {\n  const { triggers, element, relatedTarget } = self;\n  removeOverlay(element);\n  setElementStyle(element, { paddingRight: \"\", display: \"\" });\n  toggleModalDismiss(self);\n\n  const focusElement = showModalEvent.relatedTarget || triggers.find(isVisible);\n  // istanbul ignore else @preserve\n  if (focusElement) focus(focusElement as HTMLElement);\n\n  hiddenModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, hiddenModalEvent);\n  toggleFocusTrap(element);\n};\n\n/**\n * Executes after a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalShow = (self: Modal) => {\n  const { element, relatedTarget } = self;\n  focus(element);\n  toggleModalDismiss(self, true);\n\n  shownModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, shownModalEvent);\n  toggleFocusTrap(element);\n};\n\n/**\n * Executes before a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalShow = (self: Modal) => {\n  const { element, hasFade } = self;\n  setElementStyle(element, { display: \"block\" });\n  setModalScrollbar(self);\n  // istanbul ignore else @preserve\n  if (!getCurrentOpen(element)) {\n    setElementStyle(getDocumentBody(element), { overflow: \"hidden\" });\n  }\n\n  addClass(element, showClass);\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, \"true\");\n\n  if (hasFade) emulateTransitionEnd(element, () => afterModalShow(self));\n  else afterModalShow(self);\n};\n\n/**\n * Executes before a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalHide = (self: Modal) => {\n  const { element, options, hasFade } = self;\n\n  // callback can also be the transitionEvent object, we wanna make sure it's not\n  // call is not forced and overlay is visible\n  if (\n    options.backdrop && hasFade && hasClass(overlay, showClass) &&\n    !getCurrentOpen(element)\n  ) {\n    // AND no modal is visible\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => afterModalHide(self));\n  } else {\n    afterModalHide(self);\n  }\n};\n\n// MODAL EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for modal.\n *\n * @param e the `Event` object\n */\nconst modalClickHandler = (e: MouseEvent<HTMLElement>) => {\n  const { target } = e;\n\n  const trigger = target && closest(target, modalToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getModalInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    // istanbul ignore else @preserve\n    if (trigger && trigger.tagName === \"A\") e.preventDefault();\n    self.relatedTarget = trigger;\n    self.toggle();\n  }\n};\n\n/**\n * Handles the `keydown` event listener for modal\n * to hide the modal when user type the `ESC` key.\n *\n * @param e the `Event` object\n */\nconst modalKeyHandler = ({ code, target }: KeyboardEvent<HTMLElement>) => {\n  const element = querySelector(modalActiveSelector, getDocument(target));\n  const self = element && getModalInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    const { options } = self;\n    // istanbul ignore else @preserve\n    if (\n      options.keyboard &&\n      code === keyEscape && // the keyboard option is enabled and the key is 27\n      hasClass(element, showClass)\n    ) {\n      // the modal is not visible\n      self.relatedTarget = null;\n      self.hide();\n    }\n  }\n};\n\n/**\n * Handles the `click` event listeners that hide the modal.\n *\n * @param e the `Event` object\n */\nconst modalDismissHandler = (e: MouseEvent<HTMLElement>) => {\n  const { currentTarget } = e;\n  const self = currentTarget && getModalInstance(currentTarget);\n\n  // this timer is needed\n  // istanbul ignore else @preserve\n  if (self && currentTarget && !Timer.get(currentTarget)) {\n    const { options, isStatic, modalDialog } = self;\n    const { backdrop } = options;\n    const { target } = e;\n\n    const selectedText = getDocument(currentTarget)?.getSelection()?.toString()\n      .length;\n    const targetInsideDialog = modalDialog.contains(target);\n    const dismiss = target && closest(target, modalDismissSelector);\n\n    // istanbul ignore else @preserve\n    if (isStatic && !targetInsideDialog) {\n      Timer.set(\n        currentTarget,\n        () => {\n          addClass(currentTarget, modalStaticClass);\n          emulateTransitionEnd(modalDialog, () => staticTransitionEnd(self));\n        },\n        17,\n      );\n    } else if (\n      dismiss || (!selectedText && !isStatic && !targetInsideDialog && backdrop)\n    ) {\n      self.relatedTarget = dismiss || null;\n      self.hide();\n      e.preventDefault();\n    }\n  }\n};\n\n/**\n * Handles the `transitionend` event listeners for `Modal`.\n *\n * @param self the `Modal` instance\n */\nconst staticTransitionEnd = (self: Modal) => {\n  const { element, modalDialog } = self;\n  const duration = (getElementTransitionDuration(modalDialog) || 0) + 17;\n  removeClass(element, modalStaticClass);\n  // user must wait for zoom out transition\n  Timer.set(element, () => Timer.clear(element), duration);\n};\n\n// MODAL DEFINITION\n// ================\n/** Returns a new `Modal` instance. */\nexport default class Modal extends BaseComponent {\n  static selector = modalSelector;\n  static init = modalInitCallback;\n  static getInstance = getModalInstance;\n  declare options: ModalOptions;\n  declare modalDialog: HTMLElement;\n  declare triggers: HTMLElement[];\n  declare isStatic: boolean;\n  declare hasFade: boolean;\n  declare relatedTarget: HTMLElement | null;\n  declare _observer: ResizeObserver;\n\n  /**\n   * @param target usually the `.modal` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ModalOptions>) {\n    super(target, config);\n\n    // the modal\n    const { element } = this;\n\n    // the modal-dialog\n    const modalDialog = querySelector(`.${modalString}-dialog`, element);\n\n    // istanbul ignore else @preserve\n    if (modalDialog) {\n      this.modalDialog = modalDialog;\n      // modal can have multiple triggering elements\n      this.triggers = [\n        ...querySelectorAll(modalToggleSelector, getDocument(element)),\n      ].filter(\n        (btn) => getTargetElement(btn) === element,\n      );\n\n      // additional internals\n      this.isStatic = this.options.backdrop === \"static\";\n      this.hasFade = hasClass(element, fadeClass);\n      this.relatedTarget = null;\n      this._observer = new ResizeObserver(() => this.update());\n\n      // attach event listeners\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return modalComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return modalDefaults;\n  }\n\n  // MODAL PUBLIC METHODS\n  // ====================\n  /** Toggles the visibility of the modal. */\n  toggle() {\n    if (hasClass(this.element, showClass)) this.hide();\n    else this.show();\n  }\n\n  /** Shows the modal to the user. */\n  show() {\n    const { element, options, hasFade, relatedTarget } = this;\n    const { backdrop } = options;\n    let overlayDelay = 0;\n\n    // istanbul ignore else @preserve\n    if (!hasClass(element, showClass)) {\n      showModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, showModalEvent);\n      if (!showModalEvent.defaultPrevented) {\n        // we elegantly hide any opened modal/offcanvas\n        const currentOpen = getCurrentOpen(element);\n\n        // istanbul ignore else @preserve\n        if (currentOpen && currentOpen !== element) {\n          const that = getModalInstance(currentOpen) ||\n            // istanbul ignore next @preserve\n            getInstance<typeof BaseComponent & { hide: () => void }>(\n              currentOpen,\n              offcanvasComponent,\n            );\n          // istanbul ignore else @preserve\n          if (that) that.hide();\n        }\n        if (backdrop) {\n          if (!hasPopup(overlay)) {\n            appendOverlay(element, hasFade, true);\n          } else {\n            toggleOverlayType(true);\n          }\n\n          overlayDelay = getElementTransitionDuration(overlay);\n          showOverlay();\n\n          setTimeout(() => beforeModalShow(this), overlayDelay);\n        } else {\n          beforeModalShow(this);\n          // istanbul ignore else @preserve\n          if (currentOpen && hasClass(overlay, showClass)) {\n            hideOverlay();\n          }\n        }\n      }\n    }\n  }\n\n  /** Hide the modal from the user. */\n  hide() {\n    const { element, hasFade, relatedTarget } = this;\n\n    // istanbul ignore else @preserve\n    if (hasClass(element, showClass)) {\n      hideModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, hideModalEvent);\n\n      // istanbul ignore else @preserve\n      if (!hideModalEvent.defaultPrevented) {\n        removeClass(element, showClass);\n        setAttribute(element, ariaHidden, \"true\");\n        removeAttribute(element, ariaModal);\n\n        if (hasFade) {\n          emulateTransitionEnd(element, () => beforeModalHide(this));\n        } else {\n          beforeModalHide(this);\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates the modal layout.\n   */\n  update = () => {\n    // istanbul ignore else @preserve\n    if (hasClass(this.element, showClass)) setModalScrollbar(this);\n  };\n\n  /**\n   * Toggles on/off the `click` event listener of the `Modal` instance.\n   *\n   * @param add when `true`, event listener(s) is/are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { triggers } = this;\n\n    // istanbul ignore else @preserve\n    if (triggers.length) {\n      triggers.forEach((btn) =>\n        action(btn, mouseclickEvent, modalClickHandler)\n      );\n    }\n  };\n\n  /** Removes the `Modal` component from target element. */\n  dispose() {\n    const clone = { ...this };\n    const { modalDialog, hasFade } = clone;\n    const callback = () => setTimeout(() => super.dispose(), 17);\n\n    this.hide();\n    this._toggleEventListeners();\n\n    if (hasFade) {\n      // use transitionend callback\n      emulateTransitionEnd(modalDialog, callback);\n    } else {\n      callback();\n    }\n  }\n}\n","/* Native JavaScript for Bootstrap 5 | OffCanvas\n------------------------------------------------ */\nimport {\n  addClass,\n  ariaHidden,\n  ariaModal,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focus,\n  getDocument,\n  getDocumentBody,\n  getDocumentElement,\n  getElementTransitionDuration,\n  getInstance,\n  hasClass,\n  keydownEvent,\n  keyEscape,\n  mouseclickEvent,\n  querySelector,\n  querySelectorAll,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n  setElementStyle,\n  toggleFocusTrap,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport dataBsDismiss from \"../strings/dataBsDismiss\";\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport showClass from \"../strings/showClass\";\nimport offcanvasString from \"../strings/offcanvasString\";\nimport offcanvasComponent from \"../strings/offcanvasComponent\";\nimport modalComponent from \"../strings/modalComponent\";\n\nimport getTargetElement from \"../util/getTargetElement\";\nimport isVisible from \"../util/isVisible\";\nimport { setScrollbar } from \"../util/scrollbar\";\nimport { hasPopup } from \"../util/popupContainer\";\nimport {\n  appendOverlay,\n  getCurrentOpen,\n  hideOverlay,\n  offcanvasActiveSelector,\n  overlay,\n  removeOverlay,\n  showOverlay,\n  toggleOverlayType,\n} from \"../util/backdrop\";\nimport BaseComponent from \"./base-component\";\nimport { OffcanvasEvent, OffcanvasOptions } from \"../interface/offcanvas\";\n\n// OFFCANVAS PRIVATE GC\n// ====================\nconst offcanvasSelector = `.${offcanvasString}`;\nconst offcanvasToggleSelector = `[${dataBsToggle}=\"${offcanvasString}\"]`;\nconst offcanvasDismissSelector = `[${dataBsDismiss}=\"${offcanvasString}\"]`;\nconst offcanvasTogglingClass = `${offcanvasString}-toggling`;\n\nconst offcanvasDefaults = {\n  backdrop: true, // boolean\n  keyboard: true, // boolean\n  scroll: false, // boolean\n};\n\ntype OffCanvasEventProps = {\n  relatedTarget: HTMLElement | undefined;\n};\n\n/**\n * Static method which returns an existing `Offcanvas` instance associated\n * to a target `Element`.\n */\nconst getOffcanvasInstance = (element: HTMLElement) =>\n  getInstance<Offcanvas>(element, offcanvasComponent);\n\n/**\n * An `Offcanvas` initialization callback.\n */\nconst offcanvasInitCallback = (element: HTMLElement) => new Offcanvas(element);\n\n// OFFCANVAS CUSTOM EVENTS\n// =======================\nconst showOffcanvasEvent = createCustomEvent<\n  OffCanvasEventProps,\n  OffcanvasEvent\n>(`show.bs.${offcanvasString}`);\nconst shownOffcanvasEvent = createCustomEvent<\n  OffCanvasEventProps,\n  OffcanvasEvent\n>(`shown.bs.${offcanvasString}`);\nconst hideOffcanvasEvent = createCustomEvent<\n  OffCanvasEventProps,\n  OffcanvasEvent\n>(`hide.bs.${offcanvasString}`);\nconst hiddenOffcanvasEvent = createCustomEvent<\n  OffCanvasEventProps,\n  OffcanvasEvent\n>(`hidden.bs.${offcanvasString}`);\n\n// OFFCANVAS PRIVATE METHODS\n// =========================\n/**\n * Sets additional style for the `<body>` and other elements\n * when showing an offcanvas to the user.\n *\n * @param self the `Offcanvas` instance\n */\nconst setOffCanvasScrollbar = (self: Offcanvas) => {\n  const { element } = self;\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  setScrollbar(element, clientHeight !== scrollHeight);\n};\n\n/**\n * Toggles on/off the listeners of the events that close the offcanvas.\n *\n * @param self the `Offcanvas` instance\n * @param add when *true* listeners are added\n */\nconst toggleOffCanvasDismiss = (self: Offcanvas, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const doc = getDocument(self.element);\n  action(doc, keydownEvent, offcanvasKeyDismissHandler);\n  action(doc, mouseclickEvent, offcanvasDismissHandler);\n};\n\n/**\n * Executes before showing the offcanvas.\n *\n * @param self the `Offcanvas` instance\n */\nconst beforeOffcanvasShow = (self: Offcanvas) => {\n  const { element, options } = self;\n\n  // istanbul ignore else @preserve\n  if (!options.scroll) {\n    setOffCanvasScrollbar(self);\n    setElementStyle(getDocumentBody(element), { overflow: \"hidden\" });\n  }\n\n  addClass(element, offcanvasTogglingClass);\n  addClass(element, showClass);\n  setElementStyle(element, { visibility: \"visible\" });\n\n  emulateTransitionEnd(element, () => showOffcanvasComplete(self));\n};\n\n/**\n * Executes before hiding the offcanvas.\n *\n * @param self the `Offcanvas` instance\n */\nconst beforeOffcanvasHide = (self: Offcanvas) => {\n  const { element, options } = self;\n  const currentOpen = getCurrentOpen(element);\n\n  element.blur();\n\n  if (!currentOpen && options.backdrop && hasClass(overlay, showClass)) {\n    hideOverlay();\n  }\n  emulateTransitionEnd(element, () => hideOffcanvasComplete(self));\n};\n\n// OFFCANVAS EVENT HANDLERS\n// ========================\n/**\n * Handles the `click` event listeners.\n *\n * @param e the `Event` object\n */\nconst offcanvasTriggerHandler = (e: MouseEvent) => {\n  const trigger = closest(e.target as HTMLElement, offcanvasToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getOffcanvasInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    self.relatedTarget = trigger;\n    self.toggle();\n    // istanbul ignore else @preserve\n    if (trigger && trigger.tagName === \"A\") {\n      e.preventDefault();\n    }\n  }\n};\n\n/**\n * Handles the event listeners that close the offcanvas.\n *\n * @param e the `Event` object\n */\nconst offcanvasDismissHandler = (e: MouseEvent) => {\n  const { target } = e;\n  const element = querySelector(\n    offcanvasActiveSelector,\n    getDocument(target as Node),\n  );\n  const offCanvasDismiss = querySelector(\n    offcanvasDismissSelector,\n    element as HTMLElement | undefined,\n  );\n  const self = element && getOffcanvasInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    const { options, triggers } = self;\n    const { backdrop } = options;\n    const trigger = closest(target as HTMLElement, offcanvasToggleSelector);\n    const selection = getDocument(element).getSelection();\n\n    // istanbul ignore else: a filter is required here @preserve\n    if (!overlay.contains(target as HTMLElement) || backdrop !== \"static\") {\n      // istanbul ignore else @preserve\n      if (\n        !(selection && selection.toString().length) &&\n        ((!element.contains(target as HTMLElement) &&\n          backdrop &&\n          // istanbul ignore next @preserve\n          (!trigger || triggers.includes(target as HTMLElement))) ||\n          (offCanvasDismiss &&\n            offCanvasDismiss.contains(target as HTMLElement)))\n      ) {\n        self.relatedTarget =\n          offCanvasDismiss && offCanvasDismiss.contains(target as HTMLElement)\n            ? offCanvasDismiss\n            : null;\n        self.hide();\n      }\n\n      // istanbul ignore next @preserve\n      if (trigger && trigger.tagName === \"A\") e.preventDefault();\n    }\n  }\n};\n\n/**\n * Handles the `keydown` event listener for offcanvas\n * to hide it when user type the `ESC` key.\n *\n * @param e the `Event` object\n */\nconst offcanvasKeyDismissHandler = ({ code, target }: KeyboardEvent) => {\n  const element = querySelector(\n    offcanvasActiveSelector,\n    getDocument(target as Node),\n  );\n  const self = element && getOffcanvasInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    // istanbul ignore else @preserve\n    if (self.options.keyboard && code === keyEscape) {\n      self.relatedTarget = null;\n      self.hide();\n    }\n  }\n};\n\n/**\n * Handles the `transitionend` when showing the offcanvas.\n *\n * @param self the `Offcanvas` instance\n */\nconst showOffcanvasComplete = (self: Offcanvas) => {\n  const { element } = self;\n  removeClass(element, offcanvasTogglingClass);\n\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, \"true\");\n  setAttribute(element, \"role\", \"dialog\");\n\n  dispatchEvent(element, shownOffcanvasEvent);\n\n  toggleOffCanvasDismiss(self, true);\n  focus(element);\n  toggleFocusTrap(element);\n};\n\n/**\n * Handles the `transitionend` when hiding the offcanvas.\n *\n * @param self the `Offcanvas` instance\n */\nconst hideOffcanvasComplete = (self: Offcanvas) => {\n  const { element, triggers } = self;\n\n  setAttribute(element, ariaHidden, \"true\");\n  removeAttribute(element, ariaModal);\n  removeAttribute(element, \"role\");\n  setElementStyle(element, { visibility: \"\" });\n\n  const visibleTrigger = showOffcanvasEvent.relatedTarget ||\n    triggers.find(isVisible);\n  // istanbul ignore else @preserve\n  if (visibleTrigger) focus(visibleTrigger as HTMLElement);\n\n  removeOverlay(element);\n\n  dispatchEvent(element, hiddenOffcanvasEvent);\n  removeClass(element, offcanvasTogglingClass);\n  toggleFocusTrap(element);\n\n  // must check for open instances\n  if (!getCurrentOpen(element)) {\n    toggleOffCanvasDismiss(self);\n  }\n};\n\n// OFFCANVAS DEFINITION\n// ====================\n/** Returns a new `Offcanvas` instance. */\nexport default class Offcanvas extends BaseComponent {\n  static selector = offcanvasSelector;\n  static init = offcanvasInitCallback;\n  static getInstance = getOffcanvasInstance;\n  declare options: OffcanvasOptions;\n  declare triggers: HTMLElement[];\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target usually an `.offcanvas` element\n   * @param config instance options\n   */\n  constructor(\n    target: HTMLElement | string,\n    config?: Partial<OffcanvasOptions>,\n  ) {\n    super(target, config);\n\n    // instance element\n    const { element } = this;\n\n    // all the triggering buttons\n    this.triggers = [\n      ...querySelectorAll(offcanvasToggleSelector, getDocument(element)),\n    ].filter(\n      (btn) => getTargetElement(btn) === element,\n    );\n\n    // additional instance property\n    this.relatedTarget = null;\n\n    // attach event listeners\n    this._toggleEventListeners(true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return offcanvasComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return offcanvasDefaults;\n  }\n\n  // OFFCANVAS PUBLIC METHODS\n  // ========================\n  /** Shows or hides the offcanvas from the user. */\n  toggle() {\n    if (hasClass(this.element, showClass)) this.hide();\n    else this.show();\n  }\n\n  /** Shows the offcanvas to the user. */\n  show() {\n    const { element, options, relatedTarget } = this;\n    let overlayDelay = 0;\n\n    if (!hasClass(element, showClass)) {\n      showOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n      shownOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, showOffcanvasEvent);\n\n      if (!showOffcanvasEvent.defaultPrevented) {\n        // we elegantly hide any opened modal/offcanvas\n        const currentOpen = getCurrentOpen(element);\n        if (currentOpen && currentOpen !== element) {\n          const that = getOffcanvasInstance(currentOpen) ||\n            // istanbul ignore next @preserve\n            getInstance<typeof BaseComponent & { hide: () => void }>(\n              currentOpen,\n              modalComponent,\n            );\n\n          // istanbul ignore else @preserve\n          if (that) that.hide();\n        }\n\n        if (options.backdrop) {\n          if (!hasPopup(overlay)) {\n            appendOverlay(element, true);\n          } else {\n            toggleOverlayType();\n          }\n\n          overlayDelay = getElementTransitionDuration(overlay);\n          showOverlay();\n\n          setTimeout(() => beforeOffcanvasShow(this), overlayDelay);\n        } else {\n          beforeOffcanvasShow(this);\n          // istanbul ignore next @preserve - this test was done on Modal\n          if (currentOpen && hasClass(overlay, showClass)) {\n            hideOverlay();\n          }\n        }\n      }\n    }\n  }\n\n  /** Hides the offcanvas from the user. */\n  hide() {\n    const { element, relatedTarget } = this;\n\n    if (hasClass(element, showClass)) {\n      hideOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n      hiddenOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, hideOffcanvasEvent);\n      if (!hideOffcanvasEvent.defaultPrevented) {\n        addClass(element, offcanvasTogglingClass);\n        removeClass(element, showClass);\n        beforeOffcanvasHide(this);\n      }\n    }\n  }\n\n  /**\n   * Toggles on/off the `click` event listeners.\n   *\n   * @param self the `Offcanvas` instance\n   * @param add when *true*, listeners are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    this.triggers.forEach((btn) =>\n      action(btn, mouseclickEvent, offcanvasTriggerHandler)\n    );\n  };\n\n  /** Removes the `Offcanvas` from the target element. */\n  dispose() {\n    const { element } = this;\n    const isOpen = hasClass(element, showClass);\n    const callback = () => setTimeout(() => super.dispose(), 1);\n\n    this.hide();\n    this._toggleEventListeners();\n\n    if (isOpen) {\n      emulateTransitionEnd(element, callback);\n      // istanbul ignore next @preserve\n    } else {\n      callback();\n    }\n  }\n}\n","/** @type {string} */\nconst popoverString = \"popover\";\nexport default popoverString;\n","/** @type {string} */\nconst popoverComponent = \"Popover\";\nexport default popoverComponent;\n","/** @type {string} */\nconst tooltipString = \"tooltip\";\nexport default tooltipString;\n","import tooltipString from \"../strings/tooltipString\";\n\n/**\n * Returns a template for Popover / Tooltip.\n *\n * @param tipType the expected markup type\n * @returns the template markup\n */\nconst getTipTemplate = (tipType: string) => {\n  const isTooltip = tipType === tooltipString;\n  const bodyClass = isTooltip ? `${tipType}-inner` : `${tipType}-body`;\n  const header = !isTooltip ? `<h3 class=\"${tipType}-header\"></h3>` : \"\";\n  const arrow = `<div class=\"${tipType}-arrow\"></div>`;\n  const body = `<div class=\"${bodyClass}\"></div>`;\n  return `<div class=\"${tipType}\" role=\"${tooltipString}\">${\n    header + arrow + body\n  }</div>`;\n};\n\nexport default getTipTemplate;\n","const tipClassPositions = {\n  top: \"top\",\n  bottom: \"bottom\",\n  left: \"start\",\n  right: \"end\",\n};\n\nexport default tipClassPositions;\n","import {\n  createCustomEvent,\n  dispatchEvent,\n  getBoundingClientRect,\n  getDocumentElement,\n  getElementStyle,\n  isHTMLElement,\n  isRTL,\n  setElementStyle,\n  toLowerCase,\n} from \"@thednp/shorty\";\n\nimport popoverComponent from \"../strings/popoverComponent\";\nimport tipClassPositions from \"./tipClassPositions\";\nimport Tooltip from \"../components/tooltip\";\nimport type { TooltipEvent } from \"../interface/tooltip\";\nimport type { PopoverEvent } from \"../interface/popover\";\n\n/**\n * Style popovers and tooltips.\n *\n * @param self the `Popover` / `Tooltip` instance\n */\nconst styleTip = <T extends Tooltip>(self: T) => {\n  const tipClasses = /\\b(top|bottom|start|end)+/;\n  const { element, tooltip, container, options, arrow } = self;\n\n  // istanbul ignore else @preserve\n  if (tooltip) {\n    const tipPositions = { ...tipClassPositions };\n    const RTL = isRTL(element);\n\n    // reset tooltip style (top: 0, left: 0 works best)\n    setElementStyle(tooltip, {\n      // top: '0px', left: '0px', right: '', bottom: '',\n      top: \"\",\n      left: \"\",\n      right: \"\",\n      bottom: \"\",\n    });\n    const isPopover = self.name === popoverComponent;\n    const { offsetWidth: tipWidth, offsetHeight: tipHeight } = tooltip;\n    const { clientWidth: htmlcw, clientHeight: htmlch, offsetWidth: htmlow } =\n      getDocumentElement(element);\n    let { placement } = options;\n    const { clientWidth: parentCWidth, offsetWidth: parentOWidth } =\n      container as HTMLElement;\n    const parentPosition = getElementStyle(\n      container as HTMLElement,\n      \"position\",\n    );\n    const fixedParent = parentPosition === \"fixed\";\n    const scrollbarWidth = fixedParent\n      ? Math.abs(parentCWidth - parentOWidth)\n      : Math.abs(htmlcw - htmlow);\n    const leftBoundry = RTL && fixedParent\n      // istanbul ignore next @preserve\n      ? scrollbarWidth\n      : 0;\n    const rightBoundry = htmlcw - (!RTL ? scrollbarWidth : 0) - 1;\n    const {\n      width: elemWidth,\n      height: elemHeight,\n      left: elemRectLeft,\n      right: elemRectRight,\n      top: elemRectTop,\n    } = getBoundingClientRect(element, true);\n    const { x, y } = {\n      x: elemRectLeft,\n      y: elemRectTop,\n    };\n    // reset arrow style\n    setElementStyle(arrow as HTMLElement, {\n      top: \"\",\n      left: \"\",\n      right: \"\",\n      bottom: \"\",\n    });\n    let topPosition: number | string = 0;\n    let bottomPosition: number | string = \"\";\n    let leftPosition: number | string = 0;\n    let rightPosition: number | string = \"\";\n    let arrowTop: number | string = \"\";\n    let arrowLeft: number | string = \"\";\n    let arrowRight: number | string = \"\";\n\n    const arrowWidth = (arrow as HTMLElement).offsetWidth || 0;\n    const arrowHeight = (arrow as HTMLElement).offsetHeight || 0;\n    const arrowAdjust = arrowWidth / 2;\n\n    // check placement\n    let topExceed = elemRectTop - tipHeight - arrowHeight < 0;\n    let bottomExceed =\n      elemRectTop + tipHeight + elemHeight + arrowHeight >= htmlch;\n    let leftExceed = elemRectLeft - tipWidth - arrowWidth < leftBoundry;\n    let rightExceed =\n      elemRectLeft + tipWidth + elemWidth + arrowWidth >= rightBoundry;\n\n    const horizontals = [\"left\", \"right\"];\n    const verticals = [\"top\", \"bottom\"];\n\n    topExceed = horizontals.includes(placement)\n      ? elemRectTop + elemHeight / 2 - tipHeight / 2 - arrowHeight < 0\n      : topExceed;\n    bottomExceed = horizontals.includes(placement)\n      ? elemRectTop + tipHeight / 2 + elemHeight / 2 + arrowHeight >= htmlch\n      : bottomExceed;\n    leftExceed = verticals.includes(placement)\n      ? elemRectLeft + elemWidth / 2 - tipWidth / 2 < leftBoundry\n      : leftExceed;\n    rightExceed = verticals.includes(placement)\n      ? elemRectLeft + tipWidth / 2 + elemWidth / 2 >= rightBoundry\n      : rightExceed;\n\n    // first remove side positions if both left and right limits are exceeded\n    // we usually fall back to top|bottom\n    placement = horizontals.includes(placement) && leftExceed && rightExceed\n      ? \"top\"\n      : placement;\n    // recompute placement\n    placement = placement === \"top\" && topExceed ? \"bottom\" : placement;\n    placement = placement === \"bottom\" && bottomExceed ? \"top\" : placement;\n    placement = placement === \"left\" && leftExceed ? \"right\" : placement;\n    placement = placement === \"right\" && rightExceed\n      ? \"left\"\n      // istanbul ignore next @preserve\n      : placement;\n\n    // update tooltip/popover class\n    if (!tooltip.className.includes(placement)) {\n      tooltip.className = tooltip.className.replace(\n        tipClasses,\n        tipPositions[placement],\n      );\n    }\n\n    // compute tooltip / popover coordinates\n    // istanbul ignore else @preserve\n    if (horizontals.includes(placement)) {\n      // secondary|side positions\n      if (placement === \"left\") {\n        // LEFT\n        leftPosition = x - tipWidth - (isPopover ? arrowWidth : 0);\n      } else {\n        // RIGHT\n        leftPosition = x + elemWidth + (isPopover ? arrowWidth : 0);\n      }\n\n      // adjust top and arrow\n      if (topExceed && bottomExceed) {\n        topPosition = 0;\n        bottomPosition = 0;\n        arrowTop = elemRectTop + elemHeight / 2 - arrowHeight / 2;\n      } else if (topExceed) {\n        topPosition = y;\n        bottomPosition = \"\";\n        arrowTop = elemHeight / 2 - arrowWidth;\n      } else if (bottomExceed) {\n        topPosition = y - tipHeight + elemHeight;\n        bottomPosition = \"\";\n        arrowTop = tipHeight - elemHeight / 2 - arrowWidth;\n      } else {\n        topPosition = y - tipHeight / 2 + elemHeight / 2;\n        arrowTop = tipHeight / 2 - arrowHeight / 2;\n      }\n    } else if (verticals.includes(placement)) {\n      if (placement === \"top\") {\n        topPosition = y - tipHeight - (isPopover ? arrowHeight : 0);\n      } else {\n        // BOTTOM\n        topPosition = y + elemHeight + (isPopover ? arrowHeight : 0);\n      }\n\n      // adjust left | right and also the arrow\n      if (leftExceed) {\n        leftPosition = 0;\n        arrowLeft = x + elemWidth / 2 - arrowAdjust;\n      } else if (rightExceed) {\n        leftPosition = \"auto\";\n        rightPosition = 0;\n        arrowRight = elemWidth / 2 + rightBoundry - elemRectRight - arrowAdjust;\n      } else {\n        leftPosition = x - tipWidth / 2 + elemWidth / 2;\n        arrowLeft = tipWidth / 2 - arrowAdjust;\n      }\n    }\n\n    // apply style to tooltip/popover\n    setElementStyle(tooltip, {\n      top: `${topPosition}px`,\n      bottom: bottomPosition === \"\" ? \"\" : `${bottomPosition}px`,\n      left: leftPosition === \"auto\" ? leftPosition : `${leftPosition}px`,\n      right: rightPosition !== \"\" ? `${rightPosition}px` : \"\",\n    });\n\n    // update arrow placement\n    // istanbul ignore else @preserve\n    if (isHTMLElement(arrow)) {\n      if (arrowTop !== \"\") {\n        arrow.style.top = `${arrowTop}px`;\n      }\n      if (arrowLeft !== \"\") {\n        arrow.style.left = `${arrowLeft}px`;\n      } else if (arrowRight !== \"\") {\n        arrow.style.right = `${arrowRight}px`;\n      }\n    }\n    const updatedTooltipEvent = createCustomEvent<\n      Record<string, unknown>,\n      TooltipEvent | PopoverEvent\n    >(\n      `updated.bs.${toLowerCase(self.name)}`,\n    );\n    dispatchEvent(element, updatedTooltipEvent);\n  }\n};\n\nexport default styleTip;\n","import getTipTemplate from \"./getTipTemplate\";\nimport tooltipString from \"../strings/tooltipString\";\nimport { TooltipOptions } from \"../interface/tooltip\";\n\nconst tooltipDefaults: TooltipOptions = {\n  template: getTipTemplate(tooltipString),\n  title: \"\",\n  customClass: \"\",\n  trigger: \"hover focus\",\n  placement: \"top\",\n  sanitizeFn: undefined,\n  animation: true,\n  delay: 200,\n  container: document.body,\n  content: \"\",\n  dismissible: false,\n  btnClose: \"\",\n};\nexport default tooltipDefaults;\n","const p = (i) => i != null && typeof i == \"object\" || !1, k = (i) => p(i) && typeof i.nodeType == \"number\" && [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].some(\n  (t) => i.nodeType === t\n) || !1, _ = (i) => k(i) && i.nodeType === 1 || !1, B = (i) => typeof i == \"function\" || !1, m = \"PositionObserver Error\";\nclass x {\n  entries;\n  _tick;\n  _root;\n  _callback;\n  /**\n   * The constructor takes two arguments, a `callback`, which is called\n   * whenever the position of an observed element changes and an `options` object.\n   * The callback function should take an array of `PositionObserverEntry` objects\n   * as its only argument, but it's not required.\n   *\n   * @param callback the callback that applies to all targets of this observer\n   * @param options the options of this observer\n   */\n  constructor(t, n) {\n    if (!B(t))\n      throw new Error(`${m}: ${t} is not a function.`);\n    this.entries = [], this._callback = t, this._root = _(n?.root) ? n.root : document?.documentElement, this._tick = 0;\n  }\n  /**\n   * Start observing the position of the specified element.\n   * If the element is not currently attached to the DOM,\n   * it will NOT be added to the entries.\n   * @param target\n   */\n  observe = (t) => {\n    if (!_(t))\n      throw new Error(\n        `${m}: ${t} is not an instance of HTMLElement.`\n      );\n    if (!this._root.contains(t)) return;\n    const { clientWidth: n, clientHeight: o } = this._root, h = t.getBoundingClientRect(), { left: l, top: u, bottom: e, right: s, width: r, height: c } = h, a = u > 1 - c && l > 1 - r && e <= o + c - 1 && s <= n + r - 1;\n    this.entries.push({ target: t, boundingBox: h, isVisible: a }), this._tick || (this._tick = requestAnimationFrame(this._runCallback));\n  };\n  /**\n   * Stop observing the position of the specified element.\n   * @param target\n   */\n  unobserve = (t) => {\n    const n = this.entries.findIndex((o) => o.target === t);\n    this.entries.splice(n, 1);\n  };\n  /**\n   * Private method responsible for all the heavy duty.\n   */\n  _runCallback = () => {\n    if (!this.entries.length) return;\n    const t = [], { clientWidth: n, clientHeight: o } = this._root;\n    this.entries.forEach((h, l) => {\n      const { target: u, boundingBox: e } = h, s = u.getBoundingClientRect(), { left: r, top: c, bottom: a, right: d, width: b, height: f } = s;\n      if (e.left !== r || e.top !== c || e.right !== d || e.bottom !== a) {\n        const g = c > 1 - f && r > 1 - b && a <= o + f - 1 && d <= n + b - 1;\n        this.entries[l].boundingBox = s, this.entries[l].isVisible = g, t.push({ target: u, boundingBox: s, isVisible: g });\n      }\n    }), t.length && this._callback(t), requestAnimationFrame(this._runCallback);\n  };\n  /**\n   * Immediately stop observing all elements.\n   */\n  disconnect = () => {\n    cancelAnimationFrame(this._tick), this.entries.length = 0, this._tick = 0;\n  };\n}\nexport {\n  x as default\n};\n//# sourceMappingURL=index.mjs.map\n","/**\n * Global namespace for `data-bs-title` attribute.\n */\nconst dataOriginalTitle = \"data-original-title\";\nexport default dataOriginalTitle;\n","/** @type {string} */\nconst tooltipComponent = \"Tooltip\";\nexport default tooltipComponent;\n","import {\n  isArray,\n  isFunction,\n  isHTMLElement,\n  isNode,\n  isNodeList,\n  isString,\n} from \"@thednp/shorty\";\n\n/**\n * Append an existing `Element` to Popover / Tooltip component or HTML\n * markup string to be parsed & sanitized to be used as popover / tooltip content.\n *\n * @param element target\n * @param content the `Element` to append / string\n * @param sanitizeFn a function to sanitize string content\n */\nconst setHtml = (\n  element: HTMLElement,\n  content: Node[] | Node | string,\n  sanitizeFn?: (s: string) => string,\n) => {\n  // istanbul ignore else @preserve\n  if (isString(content) && content.length) {\n    let dirty = content.trim(); // fixing #233\n    if (isFunction(sanitizeFn)) dirty = sanitizeFn(dirty);\n\n    const domParser = new DOMParser();\n    const tempDocument = domParser.parseFromString(dirty, \"text/html\");\n    element.append(...[...tempDocument.body.childNodes]);\n  } else if (isHTMLElement(content)) {\n    element.append(content);\n  } else if (\n    isNodeList(content) || (isArray(content) && content.every(isNode))\n  ) {\n    element.append(...[...content]);\n  }\n};\nexport default setHtml;\n","import {\n  addClass,\n  createElement,\n  hasClass,\n  isHTMLElement,\n  isRTL,\n  querySelector,\n  setAttribute,\n} from \"@thednp/shorty\";\n\nimport tooltipComponent from \"../strings/tooltipComponent\";\nimport tooltipString from \"../strings/tooltipString\";\nimport popoverString from \"../strings/popoverString\";\nimport fadeClass from \"../strings/fadeClass\";\nimport tipClassPositions from \"./tipClassPositions\";\nimport setHtml from \"./setHtml\";\nimport Tooltip from \"../components/tooltip\";\nimport Popover from \"../components/popover\";\n\n/**\n * Creates a new tooltip / popover.\n *\n * @param self the `Tooltip` / `Popover` instance\n */\nconst createTip = (self: Tooltip | Popover) => {\n  const isTooltip = self.name === tooltipComponent;\n\n  const { id, element, options } = self;\n  const {\n    title,\n    placement,\n    template,\n    animation,\n    customClass,\n    sanitizeFn,\n    dismissible,\n    content,\n    btnClose,\n  } = options;\n  const tipString = isTooltip ? tooltipString : popoverString;\n  const tipPositions = { ...tipClassPositions };\n  let titleParts: Node[] = [];\n  let contentParts: Node[] = [];\n\n  if (isRTL(element)) {\n    tipPositions.left = \"end\";\n    tipPositions.right = \"start\";\n  }\n\n  // set initial popover class\n  const placementClass = `bs-${tipString}-${tipPositions[placement]}`;\n\n  // load template\n  let tooltipTemplate: Node | string;\n  if (isHTMLElement(template)) {\n    tooltipTemplate = template;\n  } else {\n    const htmlMarkup = createElement(\"div\") as HTMLElement;\n    setHtml(htmlMarkup, template, sanitizeFn);\n    tooltipTemplate = htmlMarkup.firstChild as HTMLElement;\n  }\n\n  // set popover markup\n  self.tooltip = isHTMLElement(tooltipTemplate)\n    ? (tooltipTemplate.cloneNode(true) as HTMLElement)\n    // istanbul ignore next @preserve\n    : undefined;\n\n  const { tooltip } = self;\n  // istanbul ignore else @preserve\n  if (tooltip) {\n    // set id and role attributes\n    setAttribute(tooltip, \"id\", id);\n    setAttribute(tooltip, \"role\", tooltipString);\n\n    const bodyClass = isTooltip\n      ? `${tooltipString}-inner`\n      : `${popoverString}-body`;\n    const tooltipHeader = isTooltip\n      ? null\n      : querySelector(`.${popoverString}-header`, tooltip);\n    const tooltipBody = querySelector(`.${bodyClass}`, tooltip);\n\n    // set arrow and enable access for styleTip\n    self.arrow = querySelector(`.${tipString}-arrow`, tooltip) as HTMLElement;\n    const { arrow } = self;\n\n    if (isHTMLElement(title)) titleParts = [title.cloneNode(true)];\n    else {\n      const tempTitle = createElement(\"div\") as HTMLElement;\n      setHtml(tempTitle, title, sanitizeFn);\n      titleParts = [...[...tempTitle.childNodes]];\n    }\n\n    if (isHTMLElement(content)) contentParts = [content.cloneNode(true)];\n    else {\n      const tempContent = createElement(\"div\") as HTMLElement;\n      setHtml(tempContent, content, sanitizeFn);\n      contentParts = [...[...tempContent.childNodes]];\n    }\n\n    // set dismissible button\n    if (dismissible) {\n      if (title) {\n        if (isHTMLElement(btnClose)) {\n          titleParts = [...titleParts, btnClose.cloneNode(true)];\n        } else {\n          const tempBtn = createElement(\"div\") as HTMLElement;\n          setHtml(tempBtn, btnClose, sanitizeFn);\n          titleParts = [...titleParts, tempBtn.firstChild as Node];\n        }\n      } else {\n        // istanbul ignore else @preserve\n        if (tooltipHeader) tooltipHeader.remove();\n        if (isHTMLElement(btnClose)) {\n          contentParts = [...contentParts, btnClose.cloneNode(true)];\n        } else {\n          const tempBtn = createElement(\"div\") as HTMLElement;\n          setHtml(tempBtn, btnClose, sanitizeFn);\n          contentParts = [...contentParts, tempBtn.firstChild as Node];\n        }\n      }\n    }\n\n    // fill the template with content from options / data attributes\n    // also sanitize title && content\n    // istanbul ignore else @preserve\n    if (!isTooltip) {\n      // istanbul ignore else @preserve\n      if (title && tooltipHeader) {\n        setHtml(tooltipHeader, titleParts, sanitizeFn);\n      }\n      // istanbul ignore else @preserve\n      if (content && tooltipBody) {\n        setHtml(tooltipBody, contentParts, sanitizeFn);\n      }\n      // set btn\n      self.btn = querySelector(\".btn-close\", tooltip) || undefined;\n    } else if (title && tooltipBody) setHtml(tooltipBody, title, sanitizeFn);\n\n    // Bootstrap 5.2.x\n    // addClass(tooltip, 'position-absolute');\n    addClass(tooltip, \"position-fixed\");\n    addClass(arrow, \"position-absolute\");\n\n    // set popover animation and placement\n    // istanbul ignore else @preserve\n    if (!hasClass(tooltip, tipString)) addClass(tooltip, tipString);\n    // istanbul ignore else @preserve\n    if (animation && !hasClass(tooltip, fadeClass)) {\n      addClass(tooltip, fadeClass);\n    }\n    // istanbul ignore else @preserve\n    if (customClass && !hasClass(tooltip, customClass)) {\n      addClass(tooltip, customClass);\n    }\n    // istanbul ignore else @preserve\n    if (!hasClass(tooltip, placementClass)) addClass(tooltip, placementClass);\n  }\n};\n\nexport default createTip;\n","import {\n  getDocument,\n  getElementStyle,\n  getParentNode,\n  isShadowRoot,\n  isTableElement,\n} from \"@thednp/shorty\";\n\n/**\n * Returns an `HTMLElement` to be used as default value for *options.container*\n * for `Tooltip` / `Popover` components.\n *\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param element the target\n * @returns the query result\n */\nconst getElementContainer = (element: HTMLElement): ParentNode => {\n  const majorBlockTags = [\"HTML\", \"BODY\"];\n  const containers: ParentNode[] = [];\n  let { parentNode } = element as Node;\n\n  while (parentNode && !majorBlockTags.includes(parentNode.nodeName)) {\n    parentNode = getParentNode(parentNode) as ParentNode;\n    // istanbul ignore else @preserve\n    if (!(isShadowRoot(parentNode) || isTableElement(parentNode))) {\n      containers.push(parentNode);\n    }\n  }\n\n  return (\n    containers.find((c, i) => {\n      if (\n        getElementStyle(c as HTMLElement, \"position\") !== \"relative\" &&\n        containers.slice(i + 1).every((r) =>\n          getElementStyle(r as HTMLElement, \"position\") === \"static\"\n        )\n      ) {\n        return c;\n      }\n      return null;\n    }) ||\n    // istanbul ignore next: optional guard\n    getDocument(element).body\n  );\n};\n\nexport default getElementContainer;\n","/* Native JavaScript for Bootstrap 5 | Tooltip\n---------------------------------------------- */\nimport {\n  addClass,\n  ariaDescribedBy,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focus,\n  focusEvent,\n  focusinEvent,\n  focusoutEvent,\n  getAttribute,\n  getDocument,\n  getElementStyle,\n  getInstance,\n  getUID,\n  hasAttribute,\n  hasClass,\n  isApple,\n  mouseclickEvent,\n  mousedownEvent,\n  mouseenterEvent,\n  mousehoverEvent,\n  mouseleaveEvent,\n  ObjectAssign,\n  passiveHandler,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n  Timer,\n  toLowerCase,\n  touchstartEvent,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\nimport PositionObserver from \"@thednp/position-observer\";\n\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport dataOriginalTitle from \"../strings/dataOriginalTitle\";\nimport showClass from \"../strings/showClass\";\nimport tooltipString from \"../strings/tooltipString\";\nimport tooltipComponent from \"../strings/tooltipComponent\";\nimport popoverString from \"../strings/popoverString\";\nimport popoverComponent from \"../strings/popoverComponent\";\nimport modalString from \"../strings/modalString\";\nimport offcanvasString from \"../strings/offcanvasString\";\n\nimport styleTip from \"../util/styleTip\";\nimport createTip from \"../util/createTip\";\nimport { appendPopup, hasPopup, removePopup } from \"../util/popupContainer\";\nimport getElementContainer from \"../util/getElementContainer\";\nimport tooltipDefaults from \"../util/tooltipDefaults\";\nimport BaseComponent from \"./base-component\";\nimport type { TooltipEvent, TooltipOptions } from \"../interface/tooltip\";\nimport type { PopoverEvent, PopoverOptions } from \"../interface/popover\";\n\n// TOOLTIP PRIVATE GC\n// ==================\nconst tooltipSelector =\n  `[${dataBsToggle}=\"${tooltipString}\"],[data-tip=\"${tooltipString}\"]`;\nconst titleAttr = \"title\";\n\n/**\n * Static method which returns an existing `Tooltip` instance associated\n * to a target `Element`.\n */\nlet getTooltipInstance = (element: HTMLElement) =>\n  getInstance<Tooltip>(element, tooltipComponent);\n\n/**\n * A `Tooltip` initialization callback.\n */\nconst tooltipInitCallback = (element: HTMLElement) => new Tooltip(element);\n\n// TOOLTIP PRIVATE METHODS\n// =======================\n/**\n * Removes the tooltip from the DOM.\n *\n * @param self the `Tooltip` instance\n */\nconst removeTooltip = (self: Tooltip) => {\n  const { element, tooltip, container, offsetParent } = self;\n  removeAttribute(element, ariaDescribedBy);\n  removePopup(\n    tooltip as HTMLElement,\n    container === offsetParent ? container : offsetParent,\n  );\n};\n\n/**\n * Check if container contains the tooltip.\n *\n * @param self Tooltip\n */\nconst hasTip = (self: Tooltip): boolean | undefined => {\n  const { tooltip, container, offsetParent } = self;\n\n  return tooltip &&\n    hasPopup(tooltip, container === offsetParent ? container : offsetParent);\n};\n\n/**\n * Executes after the instance has been disposed.\n *\n * @param self the `Tooltip` instance\n * @param callback the parent dispose callback\n */\nconst disposeTooltipComplete = (self: Tooltip, callback?: () => void) => {\n  const { element } = self;\n  self._toggleEventListeners();\n\n  // istanbul ignore else @preserve\n  if (\n    hasAttribute(element, dataOriginalTitle) && self.name === tooltipComponent\n  ) {\n    toggleTooltipTitle(self);\n  }\n  // istanbul ignore else @preserve\n  if (callback) callback();\n};\n\n/**\n * Toggles on/off the special `Tooltip` event listeners.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipAction = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n\n  action(\n    getDocument(element),\n    touchstartEvent,\n    self.handleTouch,\n    passiveHandler,\n  );\n};\n\n/**\n * Executes after the tooltip was shown to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipShownAction = (self: Tooltip) => {\n  const { element } = self;\n  const shownTooltipEvent = createCustomEvent<\n    Record<string, never>,\n    TooltipEvent | PopoverEvent\n  >(\n    `shown.bs.${toLowerCase(self.name)}`,\n  );\n\n  toggleTooltipAction(self, true);\n  dispatchEvent(element, shownTooltipEvent);\n  Timer.clear(element, \"in\");\n};\n\n/**\n * Executes after the tooltip was hidden to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipHiddenAction = (self: Tooltip) => {\n  const { element } = self;\n  const hiddenTooltipEvent = createCustomEvent<\n    Record<string, never>,\n    TooltipEvent | PopoverEvent\n  >(\n    `hidden.bs.${toLowerCase(self.name)}`,\n  );\n\n  toggleTooltipAction(self);\n  removeTooltip(self);\n  dispatchEvent(element, hiddenTooltipEvent);\n\n  Timer.clear(element, \"out\");\n};\n\n/**\n * Toggles on/off the `Tooltip` event listeners that hide/update the tooltip.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipOpenHandlers = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n  // const { offsetHeight, scrollHeight } = container as HTMLElement;\n  const parentModal = closest(element, `.${modalString}`);\n  const parentOffcanvas = closest(element, `.${offcanvasString}`);\n\n  if (add) self._observer.observe(self.element);\n  else self._observer.disconnect();\n\n  // dismiss tooltips inside modal / offcanvas\n  if (parentModal) {\n    action(parentModal, `hide.bs.${modalString}`, self.handleHide);\n  }\n  if (parentOffcanvas) {\n    action(parentOffcanvas, `hide.bs.${offcanvasString}`, self.handleHide);\n  }\n};\n\n/**\n * Toggles the `title` and `data-original-title` attributes.\n *\n * @param self the `Tooltip` instance\n * @param content when `true`, event listeners are added\n */\nconst toggleTooltipTitle = (self: Tooltip, content?: string) => {\n  // [0 - add, 1 - remove] | [0 - remove, 1 - add]\n  const titleAtt = [dataOriginalTitle, titleAttr];\n  const { element } = self;\n\n  setAttribute(\n    element,\n    titleAtt[content ? 0 : 1],\n    content ||\n      getAttribute(element, titleAtt[0]) ||\n      // istanbul ignore next @preserve\n      \"\",\n  );\n  removeAttribute(element, titleAtt[content ? 1 : 0]);\n};\n\n// TOOLTIP DEFINITION\n// ==================\n/** Creates a new `Tooltip` instance. */\nexport default class Tooltip extends BaseComponent {\n  static selector = tooltipSelector;\n  static init = tooltipInitCallback;\n  static getInstance = getTooltipInstance;\n  static styleTip = styleTip;\n  declare options: TooltipOptions;\n  declare btn?: HTMLElement;\n  declare tooltip?: HTMLElement;\n  declare container: ParentNode;\n  declare arrow?: HTMLElement;\n  declare offsetParent?: HTMLElement;\n  declare enabled: boolean;\n  declare id: string;\n  declare _observer: PositionObserver;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<TooltipOptions>) {\n    super(target, config);\n\n    const { element } = this;\n    const isTooltip = this.name === tooltipComponent;\n    const tipString = isTooltip ? tooltipString : popoverString;\n    const tipComponent = isTooltip ? tooltipComponent : popoverComponent;\n\n    // istanbul ignore next @preserve: this is to set Popover too\n    getTooltipInstance = <T extends Tooltip>(elem: HTMLElement) =>\n      getInstance<T>(elem, tipComponent);\n\n    // additional properties\n    this.enabled = true;\n    /** Set unique ID for `aria-describedby`. */\n    this.id = `${tipString}-${getUID(element, tipString)}`;\n\n    // instance options\n    const { options } = this;\n\n    // invalidate\n    if (!((!options.title && isTooltip) || (!isTooltip && !options.content))) {\n      // reset default options\n      ObjectAssign(tooltipDefaults, { titleAttr: \"\" });\n\n      // set title attributes and add event listeners\n      // istanbul ignore else @preserve\n      if (\n        hasAttribute(element, titleAttr) && isTooltip &&\n        typeof options.title === \"string\"\n      ) {\n        toggleTooltipTitle(this, options.title);\n      }\n\n      // set containers\n      this.container = getElementContainer(element);\n      this.offsetParent = [\"sticky\", \"fixed\"].some(\n          (position) =>\n            getElementStyle(this.container as HTMLElement, \"position\") ===\n              position,\n        )\n        ? (this.container as HTMLElement)\n        : getDocument(this.element).body;\n\n      // create tooltip here\n      createTip(this);\n\n      // create observer\n      this._observer = new PositionObserver(() => this.update());\n\n      // attach events\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return tooltipComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return tooltipDefaults;\n  }\n\n  // TOOLTIP PUBLIC METHODS\n  // ======================\n  /** Handles the focus event on iOS. */\n  // istanbul ignore next @preserve - impossible to test without Apple device\n  handleFocus = () => focus(this.element);\n  /** Shows the tooltip. */\n  handleShow = () => this.show();\n  show() {\n    const { options, tooltip, element, container, offsetParent, id } = this;\n    const { animation } = options;\n    const outTimer = Timer.get(element, \"out\");\n    const tipContainer = container === offsetParent ? container : offsetParent;\n\n    Timer.clear(element, \"out\");\n\n    if (tooltip && !outTimer && !hasTip(this)) {\n      Timer.set(\n        element,\n        () => {\n          const showTooltipEvent = createCustomEvent<\n            Record<string, never>,\n            TooltipEvent | PopoverEvent\n          >(\n            `show.bs.${toLowerCase(this.name)}`,\n          );\n          dispatchEvent(element, showTooltipEvent);\n\n          // istanbul ignore else @preserve\n          if (!showTooltipEvent.defaultPrevented) {\n            // append to container\n            appendPopup(tooltip, tipContainer);\n\n            setAttribute(element, ariaDescribedBy, `#${id}`);\n\n            this.update();\n            toggleTooltipOpenHandlers(this, true);\n\n            // istanbul ignore else @preserve\n            if (!hasClass(tooltip, showClass)) addClass(tooltip, showClass);\n            // istanbul ignore else @preserve\n            if (animation) {\n              emulateTransitionEnd(tooltip, () => tooltipShownAction(this));\n            } else tooltipShownAction(this);\n          }\n        },\n        17,\n        \"in\",\n      );\n    }\n  }\n\n  /** Hides the tooltip. */\n  handleHide = () => this.hide();\n  hide() {\n    const { options, tooltip, element } = this;\n    const { animation, delay } = options;\n\n    Timer.clear(element, \"in\");\n\n    // istanbul ignore else @preserve\n    if (tooltip && hasTip(this)) {\n      Timer.set(\n        element,\n        () => {\n          const hideTooltipEvent = createCustomEvent<\n            Record<string, never>,\n            TooltipEvent | PopoverEvent\n          >(\n            `hide.bs.${toLowerCase(this.name)}`,\n          );\n          dispatchEvent(element, hideTooltipEvent);\n\n          // istanbul ignore else @preserve\n          if (!hideTooltipEvent.defaultPrevented) {\n            this.update();\n            removeClass(tooltip, showClass);\n            toggleTooltipOpenHandlers(this);\n\n            // istanbul ignore else @preserve\n            if (animation) {\n              emulateTransitionEnd(tooltip, () => tooltipHiddenAction(this));\n            } else tooltipHiddenAction(this);\n          }\n        },\n        delay + 17,\n        \"out\",\n      );\n    }\n  }\n\n  /** Updates the tooltip position. */\n  update = () => {\n    styleTip<Tooltip>(this);\n  };\n\n  /** Toggles the tooltip visibility. */\n  toggle = () => {\n    const { tooltip } = this;\n\n    if (tooltip && !hasTip(this)) this.show();\n    else this.hide();\n  };\n\n  /** Enables the tooltip. */\n  enable() {\n    const { enabled } = this;\n    // istanbul ignore else @preserve\n    if (!enabled) {\n      this._toggleEventListeners(true);\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Disables the tooltip. */\n  disable() {\n    const { tooltip, enabled } = this;\n    // istanbul ignore else @preserve\n    if (enabled) {\n      if (tooltip && hasTip(this)) this.hide();\n      this._toggleEventListeners();\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Toggles the `disabled` property. */\n  toggleEnabled() {\n    if (!this.enabled) this.enable();\n    else this.disable();\n  }\n\n  /**\n   * Handles the `touchstart` event listener for `Tooltip`\n   *\n   * @this {Tooltip}\n   * @param {TouchEvent} e the `Event` object\n   */\n  handleTouch = ({ target }: TouchEvent) => {\n    const { tooltip, element } = this;\n\n    // istanbul ignore if @preserve\n    if (\n      (tooltip && tooltip.contains(target as HTMLElement)) ||\n      target === element ||\n      (target && element.contains(target as HTMLElement))\n    ) {\n      // smile for ESLint\n    } else {\n      this.hide();\n    }\n  };\n\n  /**\n   * Toggles on/off the `Tooltip` event listeners.\n   *\n   * @param add when `true`, event listeners are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    // btn is only for dismissible popover\n    const { element, options, btn } = this;\n    const { trigger } = options;\n    const isPopover = this.name !== tooltipComponent;\n    const dismissible = isPopover && (options as PopoverOptions).dismissible\n      ? true\n      : false;\n\n    // istanbul ignore else @preserve\n    if (!trigger.includes(\"manual\")) {\n      this.enabled = !!add;\n\n      const triggerOptions = trigger.split(\" \");\n\n      triggerOptions.forEach((tr) => {\n        // istanbul ignore else @preserve\n        if (tr === mousehoverEvent) {\n          action(element, mousedownEvent, this.handleShow);\n          action(element, mouseenterEvent, this.handleShow);\n\n          // istanbul ignore else @preserve\n          if (!dismissible) {\n            action(element, mouseleaveEvent, this.handleHide);\n            action(\n              getDocument(element),\n              touchstartEvent,\n              this.handleTouch,\n              passiveHandler,\n            );\n          }\n        } else if (tr === mouseclickEvent) {\n          action(element, tr, !dismissible ? this.toggle : this.handleShow);\n        } else if (tr === focusEvent) {\n          action(element, focusinEvent, this.handleShow);\n          // istanbul ignore else @preserve\n          if (!dismissible) action(element, focusoutEvent, this.handleHide);\n          // istanbul ignore else @preserve\n          if (isApple()) {\n            action(element, mouseclickEvent, this.handleFocus);\n          }\n        }\n        // istanbul ignore else @preserve\n        if (dismissible && btn) {\n          action(btn, mouseclickEvent, this.handleHide);\n        }\n      });\n    }\n  };\n\n  /** Removes the `Tooltip` from the target element. */\n  dispose() {\n    const { tooltip, options } = this;\n    const clone = { ...this, name: this.name };\n    const callback = () =>\n      setTimeout(\n        () => disposeTooltipComplete(clone, () => super.dispose()),\n        17,\n      );\n\n    if (options.animation && hasTip(clone)) {\n      this.options.delay = 0; // reset delay\n      this.hide();\n      emulateTransitionEnd(tooltip as HTMLElement, callback);\n    } else {\n      callback();\n    }\n  }\n}\n","/* Native JavaScript for Bootstrap 5 | Popover\n---------------------------------------------- */\nimport { focus, getInstance, ObjectAssign } from \"@thednp/shorty\";\n\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport popoverString from \"../strings/popoverString\";\nimport popoverComponent from \"../strings/popoverComponent\";\n\nimport getTipTemplate from \"../util/getTipTemplate\";\nimport styleTip from \"../util/styleTip\";\nimport tooltipDefaults from \"../util/tooltipDefaults\";\nimport Tooltip from \"./tooltip\";\n\nimport type { PopoverOptions /* , PopoverEvent */ } from \"../interface/popover\";\n\n// POPOVER PRIVATE GC\n// ==================\nconst popoverSelector =\n  `[${dataBsToggle}=\"${popoverString}\"],[data-tip=\"${popoverString}\"]`;\n\nconst popoverDefaults: PopoverOptions = ObjectAssign({}, tooltipDefaults, {\n  template: getTipTemplate(popoverString),\n  content: \"\",\n  dismissible: false,\n  btnClose: '<button class=\"btn-close\" aria-label=\"Close\"></button>',\n});\n\n/**\n * Static method which returns an existing `Popover` instance associated\n * to a target `Element`.\n */\nconst getPopoverInstance = (element: HTMLElement) =>\n  getInstance<Popover>(element, popoverComponent);\n\n/**\n * A `Popover` initialization callback.\n */\nconst popoverInitCallback = (element: HTMLElement) => new Popover(element);\n\n// POPOVER DEFINITION\n// ==================\n/** Returns a new `Popover` instance. */\nexport default class Popover extends Tooltip {\n  static selector = popoverSelector;\n  static init = popoverInitCallback;\n  static getInstance = getPopoverInstance;\n  static styleTip = styleTip;\n  declare options: PopoverOptions;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<PopoverOptions>) {\n    super(target, config);\n  }\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return popoverComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return popoverDefaults;\n  }\n\n  /* extend original `show()` */\n  show = () => {\n    super.show();\n    // btn only exists within dismissible popover\n    const { options, btn } = this;\n    // istanbul ignore else @preserve\n    if (options.dismissible && btn) setTimeout(() => focus(btn), 17);\n  };\n}\n","/** @type {string} */\nconst scrollspyString = \"scrollspy\";\nexport default scrollspyString;\n","/** @type {string} */\nconst scrollspyComponent = \"ScrollSpy\";\nexport default scrollspyComponent;\n","/* Native JavaScript for Bootstrap 5 | ScrollSpy\n------------------------------------------------ */\nimport {\n  addClass,\n  createCustomEvent,\n  dispatchEvent,\n  getAttribute,\n  getBoundingClientRect,\n  getDocument,\n  getDocumentBody,\n  getDocumentElement,\n  getElementsByTagName,\n  getInstance,\n  hasClass,\n  isHTMLElement,\n  querySelector,\n  removeClass,\n} from \"@thednp/shorty\";\n\nimport PositionObserver from \"@thednp/position-observer\";\n\nimport activeClass from \"../strings/activeClass\";\nimport scrollspyString from \"../strings/scrollspyString\";\nimport scrollspyComponent from \"../strings/scrollspyComponent\";\n\nimport BaseComponent from \"./base-component\";\nimport { ScrollSpyEvent, ScrollSpyOptions } from \"../interface/scrollspy\";\n\n// SCROLLSPY PRIVATE GC\n// ====================\nconst scrollspySelector = '[data-bs-spy=\"scroll\"]';\n\nconst scrollspyDefaults: ScrollSpyOptions = {\n  offset: 10,\n  target: null,\n};\n\ntype ScrollSpyEventProps = {\n  relatedTarget: HTMLElement;\n};\n\n/**\n * Static method which returns an existing `ScrollSpy` instance associated\n * to a target `Element`.\n */\nconst getScrollSpyInstance = (element: HTMLElement) =>\n  getInstance<ScrollSpy>(element, scrollspyComponent);\n\n/**\n * A `ScrollSpy` initialization callback.\n */\nconst scrollspyInitCallback = (element: HTMLElement) => new ScrollSpy(element);\n\n// SCROLLSPY CUSTOM EVENT\n// ======================\nconst activateScrollSpy = createCustomEvent<\n  ScrollSpyEventProps,\n  ScrollSpyEvent\n>(`activate.bs.${scrollspyString}`);\n\n// SCROLLSPY PRIVATE METHODS\n// =========================\n/**\n * Update the state of all items.\n *\n * @param self the `ScrollSpy` instance\n */\nconst updateSpyTargets = (self: ScrollSpy) => {\n  const { target, scrollTarget, options, itemsLength, scrollHeight, element } =\n    self;\n  const { offset } = options;\n  const isRoot = scrollTarget !== element;\n\n  const links = target && getElementsByTagName(\"A\", target);\n  const doc = getDocument(element);\n  const scrollHEIGHT = scrollTarget.scrollHeight;\n\n  self.scrollTop = scrollTarget.scrollTop;\n\n  // only update items/offsets once or with each mutation\n  // istanbul ignore else @preserve\n  if (\n    links && (scrollHEIGHT !== scrollHeight || itemsLength !== links.length)\n  ) {\n    let href;\n    let targetItem;\n    let rect;\n\n    // reset arrays & update\n    self.items = [];\n    self.targets = [];\n    self.offsets = [];\n    self.scrollHeight = scrollHEIGHT;\n    self.maxScroll = self.scrollHeight - getOffsetHeight(self);\n\n    Array.from(links).forEach((link) => {\n      href = getAttribute(link, \"href\");\n      targetItem = href && href.charAt(0) === \"#\" && href.slice(-1) !== \"#\" &&\n        querySelector(href, doc);\n\n      if (targetItem) {\n        self.items.push(link);\n        self.targets.push(targetItem);\n        rect = getBoundingClientRect(targetItem);\n        self.offsets.push(\n          (isRoot ? rect.top + self.scrollTop : targetItem.offsetTop) - offset,\n        );\n      }\n    });\n    self.itemsLength = self.items.length;\n  }\n};\n\n/**\n * Toggles on/off the component observer.\n *\n * @param self the ScrollSpy instance\n * @param add when `true`, listener is added\n */\nconst toggleObservers = (\n  { targets, scrollTarget, element, _observer }: ScrollSpy,\n  add?: boolean,\n) => {\n  if (add) {\n    if (scrollTarget === element) {\n      targets.forEach((targetItem) => _observer.observe(targetItem));\n    } else {\n      _observer.observe(element);\n    }\n  } else _observer.disconnect();\n};\n\n/**\n * Returns the `scrollHeight` property of the scrolling element.\n *\n * @param scrollTarget the `ScrollSpy` instance\n * @return `scrollTarget` height\n */\nconst getScrollHeight = (scrollTarget: HTMLElement) => {\n  return scrollTarget.scrollHeight;\n};\n\n/**\n * Returns the height property of the scrolling element.\n *\n * @param params the `ScrollSpy` instance\n */\nconst getOffsetHeight = ({ element, scrollTarget }: ScrollSpy) => {\n  return scrollTarget !== element\n    ? scrollTarget.clientHeight\n    : getBoundingClientRect(element).height;\n};\n\n/**\n * Clear all items of the target.\n *\n * @param target a single item\n */\nconst clear = (target: HTMLElement) => {\n  [...getElementsByTagName(\"A\", target)].forEach((item) => {\n    if (hasClass(item, activeClass)) removeClass(item, activeClass);\n  });\n};\n\n/**\n * Activates a new item.\n *\n * @param self the `ScrollSpy` instance\n * @param item a single item\n */\nconst activate = (self: ScrollSpy, item: HTMLElement) => {\n  const { target, element } = self;\n\n  // istanbul ignore else @preserve\n  if (isHTMLElement(target)) clear(target);\n\n  self.activeItem = item;\n  addClass(item, activeClass);\n\n  // activate all parents\n  const parents: HTMLElement[] = [];\n  let parentItem = item;\n  while (parentItem !== getDocumentBody(element)) {\n    parentItem = parentItem.parentElement as HTMLElement;\n    if (hasClass(parentItem, \"nav\") || hasClass(parentItem, \"dropdown-menu\")) {\n      parents.push(parentItem);\n    }\n  }\n\n  parents.forEach((menuItem) => {\n    const parentLink = menuItem.previousElementSibling as HTMLElement | null;\n\n    // istanbul ignore else @preserve\n    if (parentLink && !hasClass(parentLink, activeClass)) {\n      addClass(parentLink, activeClass);\n    }\n  });\n\n  // dispatch\n  activateScrollSpy.relatedTarget = item;\n  dispatchEvent(element, activateScrollSpy);\n};\n\n// SCROLLSPY DEFINITION\n// ====================\n/** Returns a new `ScrollSpy` instance. */\nexport default class ScrollSpy extends BaseComponent {\n  static selector = scrollspySelector;\n  static init = scrollspyInitCallback;\n  static getInstance = getScrollSpyInstance;\n  declare options: ScrollSpyOptions;\n  declare target: HTMLElement | null;\n  declare scrollTarget: HTMLElement;\n  declare scrollTop: number;\n  declare maxScroll: number;\n  declare scrollHeight: number;\n  declare activeItem: HTMLElement | null;\n  declare items: HTMLElement[];\n  declare targets: HTMLElement[];\n  declare itemsLength: number;\n  declare offsets: number[];\n  declare _observer: PositionObserver;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(\n    target: HTMLElement | string,\n    config?: Partial<ScrollSpyOptions>,\n  ) {\n    super(target, config);\n\n    // initialization element & options\n    const { element, options } = this;\n\n    // additional properties\n    this.target = querySelector(\n      options.target as HTMLElement | string,\n      getDocument(element),\n    );\n\n    // invalidate\n    if (this.target) {\n      // set initial state\n      this.scrollTarget = element.clientHeight < element.scrollHeight\n        ? element\n        : getDocumentElement(element);\n      this.scrollHeight = getScrollHeight(this.scrollTarget);\n\n      // run an initial burst, we need to know the targets\n      this.refresh();\n\n      // create observer\n      this._observer = new PositionObserver(() => this.refresh(), {\n        root: this.scrollTarget,\n      });\n\n      // add event handlers\n      toggleObservers(this, true);\n    }\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return scrollspyComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return scrollspyDefaults;\n  }\n  /* eslint-enable */\n\n  // SCROLLSPY PUBLIC METHODS\n  // ========================\n  /** Updates all items. */\n  refresh = () => {\n    const { target } = this;\n\n    // check if target is visible and invalidate\n    // istanbul ignore else @preserve\n    if (isHTMLElement(target) && target.offsetHeight > 0) {\n      updateSpyTargets(this);\n\n      const { scrollTop, maxScroll, itemsLength, items, activeItem } = this;\n\n      if (scrollTop >= maxScroll) {\n        const newActiveItem = items[itemsLength - 1];\n\n        // istanbul ignore else @preserve\n        if (activeItem !== newActiveItem) {\n          activate(this, newActiveItem);\n        }\n        return;\n      }\n\n      const { offsets } = this;\n\n      // istanbul ignore else @preserve\n      if (activeItem && scrollTop < offsets[0] && offsets[0] > 0) {\n        this.activeItem = null;\n        // istanbul ignore else @preserve\n        if (target) clear(target);\n        return;\n      }\n\n      items.forEach((item, i) => {\n        if (\n          activeItem !== item &&\n          scrollTop >= offsets[i] &&\n          (typeof offsets[i + 1] === \"undefined\" || scrollTop < offsets[i + 1])\n        ) {\n          activate(this, item);\n        }\n      });\n    }\n  };\n\n  /** Removes `ScrollSpy` from the target element. */\n  dispose() {\n    const clone = { ...this };\n    toggleObservers(clone);\n    super.dispose();\n  }\n}\n","/** @type {string} */\nconst tabString = \"tab\";\nexport default tabString;\n","/** @type {string} */\nconst tabComponent = \"Tab\";\nexport default tabComponent;\n","/* Native JavaScript for Bootstrap 5 | Tab\n------------------------------------------ */\nimport {\n  addClass,\n  ariaSelected,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  getElementsByClassName,\n  getInstance,\n  hasClass,\n  isHTMLElement,\n  mouseclickEvent,\n  querySelector,\n  reflow,\n  removeClass,\n  setAttribute,\n  Timer,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport collapsingClass from \"../strings/collapsingClass\";\nimport activeClass from \"../strings/activeClass\";\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport dropdownClasses from \"../strings/dropdownClasses\";\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport tabString from \"../strings/tabString\";\nimport tabComponent from \"../strings/tabComponent\";\n\nimport getTargetElement from \"../util/getTargetElement\";\nimport BaseComponent from \"./base-component\";\nimport type { /* TabOptions, */ TabEvent } from \"../interface/tab\";\n\n// TAB PRIVATE GC\n// ================\nconst tabSelector = `[${dataBsToggle}=\"${tabString}\"]`;\n\n/**\n * Static method which returns an existing `Tab` instance associated\n * to a target `Element`.\n */\nconst getTabInstance = (element: HTMLElement) =>\n  getInstance<Tab>(element, tabComponent);\n\n/** A `Tab` initialization callback. */\nconst tabInitCallback = (element: HTMLElement) => new Tab(element);\n\ntype TabEventProps = {\n  relatedTarget: HTMLElement | undefined;\n};\n\n// TAB CUSTOM EVENTS\n// =================\nconst showTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `show.bs.${tabString}`,\n);\nconst shownTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `shown.bs.${tabString}`,\n);\nconst hideTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `hide.bs.${tabString}`,\n);\nconst hiddenTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `hidden.bs.${tabString}`,\n);\n\ninterface TabPrivate {\n  tab: HTMLElement | null;\n  content: HTMLElement | null;\n  currentHeight: number;\n  nextHeight: number;\n}\n\n/**\n * Stores the current active tab and its content\n * for a given `.nav` element.\n */\nconst tabPrivate: Map<HTMLElement, TabPrivate> = new Map();\n\n// TAB PRIVATE METHODS\n// ===================\n/**\n * Executes after tab transition has finished.\n *\n * @param self the `Tab` instance\n */\nconst triggerTabEnd = (self: Tab) => {\n  const { tabContent, nav } = self;\n\n  // istanbul ignore else @preserve\n  if (tabContent && hasClass(tabContent, collapsingClass)) {\n    tabContent.style.height = \"\";\n    removeClass(tabContent, collapsingClass);\n  }\n\n  // istanbul ignore else @preserve\n  if (nav) Timer.clear(nav);\n};\n\n/**\n * Executes before showing the tab content.\n *\n * @param self the `Tab` instance\n */\nconst triggerTabShow = (self: Tab) => {\n  const { element, tabContent, content: nextContent, nav } = self;\n  const { tab } = (isHTMLElement(nav) && tabPrivate.get(nav)) ||\n    // istanbul ignore next @preserve\n    { tab: null };\n\n  // istanbul ignore else @preserve\n  if (tabContent && nextContent && hasClass(nextContent, fadeClass)) {\n    const { currentHeight, nextHeight } = tabPrivate.get(element) ||\n      // istanbul ignore next @preserve\n      { currentHeight: 0, nextHeight: 0 };\n    // istanbul ignore else @preserve: vitest won't validate this branch\n    if (currentHeight !== nextHeight) {\n      // enables height animation\n      setTimeout(() => {\n        tabContent.style.height = `${nextHeight}px`;\n        reflow(tabContent);\n        emulateTransitionEnd(tabContent, () => triggerTabEnd(self));\n      }, 50);\n    } else {\n      triggerTabEnd(self);\n    }\n  } else if (nav) Timer.clear(nav);\n\n  shownTabEvent.relatedTarget = tab as HTMLElement | undefined;\n\n  dispatchEvent(element, shownTabEvent);\n};\n\n/**\n * Executes before hiding the tab.\n *\n * @param self the `Tab` instance\n */\nconst triggerTabHide = (self: Tab) => {\n  const { element, content: nextContent, tabContent, nav } = self;\n  const { tab, content } = (nav && tabPrivate.get(nav)) ||\n    // istanbul ignore next @preserve\n    { tab: null, content: null };\n  let currentHeight = 0;\n\n  // istanbul ignore else @preserve\n  if (tabContent && nextContent && hasClass(nextContent, fadeClass)) {\n    [content, nextContent].forEach((c) => {\n      // istanbul ignore else @preserve\n      if (isHTMLElement(c)) addClass(c, \"overflow-hidden\");\n    });\n    currentHeight = isHTMLElement(content)\n      ? content.scrollHeight // istanbul ignore next @preserve\n      : 0;\n  }\n\n  // update relatedTarget and dispatch event\n  showTabEvent.relatedTarget = tab as HTMLElement | undefined;\n  hiddenTabEvent.relatedTarget = element;\n  dispatchEvent(element, showTabEvent);\n\n  // istanbul ignore else @preserve\n  if (!showTabEvent.defaultPrevented) {\n    // istanbul ignore else @preserve\n    if (nextContent) addClass(nextContent, activeClass);\n    // istanbul ignore else @preserve\n    if (content) removeClass(content, activeClass);\n\n    // istanbul ignore else @preserve\n    if (tabContent && nextContent && hasClass(nextContent, fadeClass)) {\n      const nextHeight = nextContent.scrollHeight;\n      tabPrivate.set(element, {\n        currentHeight,\n        nextHeight,\n        tab: null,\n        content: null,\n      });\n\n      addClass(tabContent, collapsingClass);\n      tabContent.style.height = `${currentHeight}px`;\n      reflow(tabContent);\n      [content, nextContent].forEach((c) => {\n        // istanbul ignore else @preserve\n        if (c) removeClass(c, \"overflow-hidden\");\n      });\n    }\n\n    if (nextContent && nextContent && hasClass(nextContent, fadeClass)) {\n      setTimeout(() => {\n        addClass(nextContent, showClass);\n        emulateTransitionEnd(nextContent, () => {\n          triggerTabShow(self);\n        });\n      }, 1);\n    } else {\n      // istanbul ignore else @preserve\n      if (nextContent) addClass(nextContent, showClass);\n      triggerTabShow(self);\n    }\n\n    // istanbul ignore else @preserve\n    if (tab) dispatchEvent(tab, hiddenTabEvent);\n  }\n};\n\n/**\n * Returns the current active tab and its target content.\n *\n * @param self the `Tab` instance\n * @returns the query result\n */\nconst getActiveTab = (\n  self: Tab,\n): { tab: HTMLElement | null; content: HTMLElement | null } => {\n  const { nav } = self;\n  // istanbul ignore next @preserve\n  if (!isHTMLElement(nav as HTMLElement | undefined)) {\n    return { tab: null, content: null };\n  }\n\n  const activeTabs = getElementsByClassName(activeClass, nav as HTMLElement);\n  let tab: HTMLElement | null = null;\n  // istanbul ignore else @preserve\n  if (\n    activeTabs.length === 1 &&\n    !dropdownClasses.some((c) =>\n      hasClass(activeTabs[0].parentElement as HTMLElement, c)\n    )\n  ) {\n    [tab] = activeTabs;\n  } else if (activeTabs.length > 1) {\n    tab = activeTabs[activeTabs.length - 1];\n  }\n  const content = isHTMLElement(tab as HTMLElement)\n    ? getTargetElement(tab as HTMLElement)\n    : null;\n  return { tab, content };\n};\n\n/**\n * Returns a parent dropdown.\n *\n * @param element the `Tab` element\n * @returns the parent dropdown\n */\nconst getParentDropdown = (element?: HTMLElement): HTMLElement | null => {\n  // istanbul ignore next @preserve\n  if (!isHTMLElement(element)) return null;\n  const dropdown = closest(element, `.${dropdownClasses.join(\",.\")}`);\n  return dropdown\n    ? querySelector(`.${dropdownClasses[0]}-toggle`, dropdown)\n    : null;\n};\n\n// TAB EVENT HANDLER\n// =================\n/**\n * Handles the `click` event listener.\n *\n * @param e the `Event` object\n */\nconst tabClickHandler = (e: Event) => {\n  const self = getTabInstance(e.target as HTMLElement);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    e.preventDefault();\n    self.show();\n  }\n};\n\n// TAB DEFINITION\n// ==============\n/** Creates a new `Tab` instance. */\nexport default class Tab extends BaseComponent {\n  static selector = tabSelector;\n  static init = tabInitCallback;\n  static getInstance = getTabInstance;\n  declare nav: HTMLElement | null;\n  declare content: HTMLElement | null;\n  declare tabContent: HTMLElement | null;\n  declare nextContent: HTMLElement | null;\n  declare dropdown: HTMLElement | null;\n\n  /** @param target the target element */\n  constructor(target: HTMLElement | string) {\n    super(target);\n\n    // initialization element\n    const { element } = this;\n    const content = getTargetElement(element);\n\n    // no point initializing a tab without a corresponding content\n    // istanbul ignore else @preserve\n    if (content) {\n      const nav = closest(element, \".nav\");\n      const container = closest(content, \".tab-content\");\n\n      this.nav = nav;\n      this.content = content;\n      this.tabContent = container;\n\n      // event targets\n      this.dropdown = getParentDropdown(element);\n\n      // show first Tab instance of none is shown\n      // suggested on #432\n      const { tab } = getActiveTab(this);\n      if (nav && !tab) {\n        const firstTab = querySelector(tabSelector, nav);\n        const firstTabContent = firstTab && getTargetElement(firstTab);\n\n        // istanbul ignore else @preserve\n        if (firstTabContent) {\n          addClass(firstTab, activeClass);\n          addClass(firstTabContent, showClass);\n          addClass(firstTabContent, activeClass);\n          setAttribute(element, ariaSelected, \"true\");\n        }\n      }\n\n      // add event listener\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return tabComponent;\n  }\n\n  // TAB PUBLIC METHODS\n  // ==================\n  /** Shows the tab to the user. */\n  show() {\n    const { element, content: nextContent, nav, dropdown } = this;\n\n    // istanbul ignore else @preserve\n    if (!(nav && Timer.get(nav)) && !hasClass(element, activeClass)) {\n      const { tab, content } = getActiveTab(this);\n\n      // istanbul ignore else @preserve\n      if (nav) {\n        tabPrivate.set(nav, { tab, content, currentHeight: 0, nextHeight: 0 });\n      }\n\n      // update relatedTarget and dispatch\n      hideTabEvent.relatedTarget = element;\n\n      // istanbul ignore else @preserve\n      if (isHTMLElement(tab)) {\n        dispatchEvent(tab as EventTarget, hideTabEvent);\n        // istanbul ignore else @preserve\n        if (!hideTabEvent.defaultPrevented) {\n          addClass(element, activeClass);\n          setAttribute(element, ariaSelected, \"true\");\n\n          const activeDropdown = isHTMLElement(tab) && getParentDropdown(tab);\n          if (activeDropdown && hasClass(activeDropdown, activeClass)) {\n            removeClass(activeDropdown, activeClass);\n          }\n\n          // istanbul ignore else @preserve\n          if (nav) {\n            const toggleTab = () => {\n              // istanbul ignore else @preserve\n              if (tab) {\n                removeClass(tab, activeClass);\n                setAttribute(tab, ariaSelected, \"false\");\n              }\n              if (dropdown && !hasClass(dropdown, activeClass)) {\n                addClass(dropdown, activeClass);\n              }\n            };\n\n            if (\n              content &&\n              (hasClass(content, fadeClass) ||\n                (nextContent && hasClass(nextContent, fadeClass)))\n            ) {\n              Timer.set(nav, toggleTab, 1);\n            } else toggleTab();\n          }\n\n          // istanbul ignore else @preserve\n          if (content) {\n            removeClass(content, showClass);\n            if (hasClass(content, fadeClass)) {\n              emulateTransitionEnd(content, () => triggerTabHide(this));\n            } else {\n              triggerTabHide(this);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Toggles on/off the `click` event listener.\n   *\n   * @param add when `true`, event listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    action(this.element, mouseclickEvent, tabClickHandler);\n  };\n\n  /** Removes the `Tab` component from the target element. */\n  dispose() {\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n","/** @type {string} */\nconst toastString = \"toast\";\nexport default toastString;\n","/** @type {string} */\nconst toastComponent = \"Toast\";\nexport default toastComponent;\n","/* Native JavaScript for Bootstrap 5 | Toast\n-------------------------------------------- */\nimport {\n  addClass,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focusinEvent,\n  focusoutEvent,\n  getDocument,\n  getInstance,\n  hasClass,\n  mouseclickEvent,\n  mouseenterEvent,\n  mouseleaveEvent,\n  querySelector,\n  querySelectorAll,\n  reflow,\n  removeClass,\n  Timer,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport dataBsDismiss from \"../strings/dataBsDismiss\";\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport toastString from \"../strings/toastString\";\nimport toastComponent from \"../strings/toastComponent\";\nimport getTargetElement from \"../util/getTargetElement\";\nimport BaseComponent from \"./base-component\";\nimport { ToastEvent, ToastOptions } from \"../interface/toast\";\n\n// TOAST PRIVATE GC\n// ================\nconst toastSelector = `.${toastString}`;\nconst toastDismissSelector = `[${dataBsDismiss}=\"${toastString}\"]`;\nconst toastToggleSelector = `[${dataBsToggle}=\"${toastString}\"]`;\nconst showingClass = \"showing\";\n/** @deprecated */\nconst hideClass = \"hide\";\n\nconst toastDefaults = {\n  animation: true,\n  autohide: true,\n  delay: 5000,\n};\n\n/**\n * Static method which returns an existing `Toast` instance associated\n * to a target `Element`.\n */\nconst getToastInstance = (element: HTMLElement) =>\n  getInstance<Toast>(element, toastComponent);\n\n/**\n * A `Toast` initialization callback.\n */\nconst toastInitCallback = (element: HTMLElement) => new Toast(element);\n\n// TOAST CUSTOM EVENTS\n// ===================\nconst showToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `show.bs.${toastString}`,\n);\nconst shownToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `shown.bs.${toastString}`,\n);\nconst hideToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `hide.bs.${toastString}`,\n);\nconst hiddenToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `hidden.bs.${toastString}`,\n);\n\n// TOAST PRIVATE METHODS\n// =====================\n/**\n * Executes after the toast is shown to the user.\n *\n * @param self the `Toast` instance\n */\nconst showToastComplete = (self: Toast) => {\n  const { element, options } = self;\n  removeClass(element, showingClass);\n  Timer.clear(element, showingClass);\n\n  dispatchEvent(element, shownToastEvent);\n  // istanbul ignore else @preserve\n  if (options.autohide) {\n    Timer.set(element, () => self.hide(), options.delay, toastString);\n  }\n};\n\n/**\n * Executes after the toast is hidden to the user.\n *\n * @param self the `Toast` instance\n */\nconst hideToastComplete = (self: Toast) => {\n  const { element } = self;\n  removeClass(element, showingClass);\n  removeClass(element, showClass);\n  addClass(element, hideClass); // B/C\n  Timer.clear(element, toastString);\n  dispatchEvent(element, hiddenToastEvent);\n};\n\n/**\n * Executes before hiding the toast.\n *\n * @param self the `Toast` instance\n */\nconst hideToast = (self: Toast) => {\n  const { element, options } = self;\n  addClass(element, showingClass);\n\n  if (options.animation) {\n    reflow(element);\n    emulateTransitionEnd(element, () => hideToastComplete(self));\n  } else {\n    hideToastComplete(self);\n  }\n};\n\n/**\n * Executes before showing the toast.\n *\n * @param self the `Toast` instance\n */\nconst showToast = (self: Toast) => {\n  const { element, options } = self;\n  Timer.set(\n    element,\n    () => {\n      removeClass(element, hideClass); // B/C\n      reflow(element);\n      addClass(element, showClass);\n      addClass(element, showingClass);\n\n      if (options.animation) {\n        emulateTransitionEnd(element, () => showToastComplete(self));\n      } else {\n        showToastComplete(self);\n      }\n    },\n    17,\n    showingClass,\n  );\n};\n\n// TOAST EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for toast.\n *\n * @param e the `Event` object\n */\nconst toastClickHandler = (e: Event) => {\n  const { target } = e;\n\n  const trigger = target && closest(target as HTMLElement, toastToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getToastInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    // istanbul ignore else @preserve\n    if (trigger && trigger.tagName === \"A\") e.preventDefault();\n    self.relatedTarget = trigger;\n    self.show();\n  }\n};\n\n/**\n * Executes when user interacts with the toast without closing it,\n * usually by hovering or focusing it.\n *\n * @param e the `Toast` instance\n */\nconst interactiveToastHandler = (e: MouseEvent) => {\n  const element = e.target as HTMLElement;\n  const self = getToastInstance(element);\n  const { type, relatedTarget } = e;\n\n  // istanbul ignore else @preserve: a solid filter is required\n  if (\n    self && element !== relatedTarget &&\n    !element.contains(relatedTarget as Node)\n  ) {\n    if ([mouseenterEvent, focusinEvent].includes(type)) {\n      Timer.clear(element, toastString);\n    } else {\n      Timer.set(element, () => self.hide(), self.options.delay, toastString);\n    }\n  }\n};\n\n// TOAST DEFINITION\n// ================\n/** Creates a new `Toast` instance. */\nexport default class Toast extends BaseComponent {\n  static selector = toastSelector;\n  static init = toastInitCallback;\n  static getInstance = getToastInstance;\n  declare options: ToastOptions;\n  declare dismiss: HTMLElement | null;\n  declare triggers: HTMLElement[];\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target the target `.toast` element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ToastOptions>) {\n    super(target, config);\n    const { element, options } = this;\n\n    // set fadeClass, the options.animation will override the markup\n    if (options.animation && !hasClass(element, fadeClass)) {\n      addClass(element, fadeClass);\n    } else if (!options.animation && hasClass(element, fadeClass)) {\n      removeClass(element, fadeClass);\n    }\n\n    // dismiss button\n    this.dismiss = querySelector(toastDismissSelector, element);\n\n    // toast can have multiple triggering elements\n    this.triggers = [\n      ...querySelectorAll(toastToggleSelector, getDocument(element)),\n    ].filter(\n      (btn) => getTargetElement(btn) === element,\n    );\n\n    // add event listener\n    this._toggleEventListeners(true);\n  }\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return toastComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return toastDefaults;\n  }\n  /**\n   * Returns *true* when toast is visible.\n   */\n  get isShown() {\n    return hasClass(this.element, showClass);\n  }\n\n  // TOAST PUBLIC METHODS\n  // ====================\n  /** Shows the toast. */\n  show = () => {\n    const { element, isShown } = this;\n\n    // istanbul ignore else @preserve\n    if (element && !isShown) {\n      dispatchEvent(element, showToastEvent);\n      if (!showToastEvent.defaultPrevented) {\n        showToast(this);\n      }\n    }\n  };\n\n  /** Hides the toast. */\n  hide = () => {\n    const { element, isShown } = this;\n\n    // istanbul ignore else @preserve\n    if (element && isShown) {\n      dispatchEvent(element, hideToastEvent);\n      if (!hideToastEvent.defaultPrevented) {\n        hideToast(this);\n      }\n    }\n  };\n\n  /**\n   * Toggles on/off the `click` event listener.\n   *\n   * @param add when `true`, it will add the listener\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { element, triggers, dismiss, options, hide } = this;\n\n    // istanbul ignore else @preserve\n    if (dismiss) {\n      action(dismiss, mouseclickEvent, hide);\n    }\n\n    // istanbul ignore else @preserve\n    if (options.autohide) {\n      [focusinEvent, focusoutEvent, mouseenterEvent, mouseleaveEvent].forEach(\n        (e) => action(element, e, interactiveToastHandler),\n      );\n    }\n    // istanbul ignore else @preserve\n    if (triggers.length) {\n      triggers.forEach((btn) =>\n        action(btn, mouseclickEvent, toastClickHandler)\n      );\n    }\n  };\n\n  /** Removes the `Toast` component from the target element. */\n  dispose() {\n    const { element, isShown } = this;\n    this._toggleEventListeners();\n    Timer.clear(element, toastString);\n\n    if (isShown) {\n      removeClass(element, showClass);\n    }\n    super.dispose();\n  }\n}\n","import { Data, getElementsByTagName, matches } from \"@thednp/shorty\";\n\nimport { addListener } from \"@thednp/event-listener\";\n\nimport Alert from \"../components/alert\";\nimport Button from \"../components/button\";\nimport Carousel from \"../components/carousel\";\nimport Collapse from \"../components/collapse\";\nimport Dropdown from \"../components/dropdown\";\nimport Modal from \"../components/modal\";\nimport Offcanvas from \"../components/offcanvas\";\nimport Popover from \"../components/popover\";\nimport ScrollSpy from \"../components/scrollspy\";\nimport Tab from \"../components/tab\";\nimport Toast from \"../components/toast\";\nimport Tooltip from \"../components/tooltip\";\n\nconst componentsList = new Map<\n  string,\n  | typeof Alert\n  | typeof Button\n  | typeof Carousel\n  | typeof Collapse\n  | typeof Dropdown\n  | typeof Modal\n  | typeof Offcanvas\n  | typeof Popover\n  | typeof ScrollSpy\n  | typeof Tab\n  | typeof Toast\n  | typeof Tooltip\n>();\n\ntype Component =\n  | Alert\n  | Button\n  | Carousel\n  | Collapse\n  | Dropdown\n  | Modal\n  | Offcanvas\n  | Popover\n  | ScrollSpy\n  | Tab\n  | Toast\n  | Tooltip;\n\n[\n  Alert,\n  Button,\n  Carousel,\n  Collapse,\n  Dropdown,\n  Modal,\n  Offcanvas,\n  Popover,\n  ScrollSpy,\n  Tab,\n  Toast,\n  Tooltip,\n].forEach((c) => componentsList.set(c.prototype.name, c));\n\n/**\n * Initialize all matched `Element`s for one component.\n *\n * @param callback\n * @param collection\n */\nconst initComponentDataAPI = (\n  callback: (el: HTMLElement) => Component,\n  collection: HTMLCollectionOf<HTMLElement> | HTMLElement[],\n) => {\n  [...collection].forEach((x) => callback(x));\n};\n\n/**\n * Remove one component from a target container element or all in the page.\n *\n * @param component the component name\n * @param context parent `Node`\n */\nconst removeComponentDataAPI = <T>(component: string, context: ParentNode) => {\n  const compData = Data.getAllFor(component) as Map<HTMLElement, T>;\n\n  if (compData) {\n    [...compData].forEach(([element, instance]) => {\n      if (context.contains(element)) {\n        (instance as T & { dispose: () => void }).dispose();\n      }\n    });\n  }\n};\n\n/**\n * Initialize all BSN components for a target container.\n *\n * @param context parent `Node`\n */\nexport const initCallback = (context?: ParentNode) => {\n  const lookUp = context && context.nodeName ? context : document;\n  const elemCollection = [...getElementsByTagName(\"*\", lookUp)];\n\n  componentsList.forEach((cs) => {\n    const { init, selector } = cs;\n    initComponentDataAPI(\n      init,\n      elemCollection.filter((item) => matches(item, selector)),\n    );\n  });\n};\n\n/**\n * Remove all BSN components for a target container.\n *\n * @param context parent `Node`\n */\nexport const removeDataAPI = (context?: ParentNode) => {\n  const lookUp = context && context.nodeName ? context : document;\n\n  componentsList.forEach((comp) => {\n    removeComponentDataAPI(comp.prototype.name, lookUp);\n  });\n};\n\n// Bulk initialize all components\nif (document.body) initCallback();\nelse {\n  addListener(document, \"DOMContentLoaded\", () => initCallback(), {\n    once: true,\n  });\n}\n"],"names":["x","e","k","addListener","removeListener","dropdownClasses","p","r","f","PositionObserver"],"mappings":"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","x_google_ignoreList":[0,1,52]}