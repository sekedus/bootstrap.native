{"version":3,"file":"bootstrap-native.mjs","sources":["../node_modules/.pnpm/@thednp+shorty@2.0.7/node_modules/@thednp/shorty/dist/shorty.mjs","../node_modules/.pnpm/@thednp+event-listener@2.0.6/node_modules/@thednp/event-listener/dist/event-listener.mjs","../src/strings/fadeClass.ts","../src/strings/showClass.ts","../src/strings/dataBsDismiss.ts","../src/strings/alertString.ts","../src/strings/alertComponent.ts","../src/version.ts","../src/components/base-component.ts","../src/components/alert.ts","../src/strings/activeClass.ts","../src/strings/dataBsToggle.ts","../src/strings/buttonString.ts","../src/strings/buttonComponent.ts","../src/components/button.ts","../src/strings/dataBsTarget.ts","../src/strings/carouselString.ts","../src/strings/carouselComponent.ts","../src/strings/dataBsParent.ts","../src/strings/dataBsContainer.ts","../src/util/getTargetElement.ts","../src/components/carousel.ts","../src/strings/collapsingClass.ts","../src/strings/collapseString.ts","../src/strings/collapseComponent.ts","../src/components/collapse.ts","../src/strings/dropdownClasses.ts","../src/strings/dropdownComponent.ts","../src/strings/dropdownMenuClass.ts","../src/util/isEmptyAnchor.ts","../src/components/dropdown.ts","../src/strings/modalString.ts","../src/strings/modalComponent.ts","../src/strings/offcanvasComponent.ts","../src/strings/fixedTopClass.ts","../src/strings/fixedBottomClass.ts","../src/strings/stickyTopClass.ts","../src/strings/positionStickyClass.ts","../src/util/scrollbar.ts","../src/strings/offcanvasString.ts","../src/util/popupContainer.ts","../src/util/backdrop.ts","../src/util/isVisible.ts","../src/components/modal.ts","../src/components/offcanvas.ts","../src/strings/popoverString.ts","../src/strings/popoverComponent.ts","../src/strings/tooltipString.ts","../src/util/getTipTemplate.ts","../src/util/tipClassPositions.ts","../src/util/styleTip.ts","../src/util/tooltipDefaults.ts","../node_modules/.pnpm/@thednp+position-observer@0.0.3/node_modules/@thednp/position-observer/dist/index.mjs","../src/strings/dataOriginalTitle.ts","../src/strings/tooltipComponent.ts","../src/util/setHtml.ts","../src/util/createTip.ts","../src/util/getElementContainer.ts","../src/components/tooltip.ts","../src/components/popover.ts","../src/strings/scrollspyString.ts","../src/strings/scrollspyComponent.ts","../src/components/scrollspy.ts","../src/strings/tabString.ts","../src/strings/tabComponent.ts","../src/components/tab.ts","../src/strings/toastString.ts","../src/strings/toastComponent.ts","../src/components/toast.ts","../src/util/init.ts"],"sourcesContent":["const ariaChecked = \"aria-checked\", ariaDescription = \"aria-description\", ariaDescribedBy = \"aria-describedby\", ariaExpanded = \"aria-expanded\", ariaHasPopup = \"aria-haspopup\", ariaHidden = \"aria-hidden\", ariaLabel = \"aria-label\", ariaLabelledBy = \"aria-labelledby\", ariaModal = \"aria-modal\", ariaPressed = \"aria-pressed\", ariaSelected = \"aria-selected\", ariaValueMin = \"aria-valuemin\", ariaValueMax = \"aria-valuemax\", ariaValueNow = \"aria-valuenow\", ariaValueText = \"aria-valuetext\", abortEvent = \"abort\", beforeunloadEvent = \"beforeunload\", blurEvent = \"blur\", changeEvent = \"change\", contextmenuEvent = \"contextmenu\", DOMContentLoadedEvent = \"DOMContentLoaded\", DOMMouseScrollEvent = \"DOMMouseScroll\", errorEvent = \"error\", focusEvent = \"focus\", focusinEvent = \"focusin\", focusoutEvent = \"focusout\", gesturechangeEvent = \"gesturechange\", gestureendEvent = \"gestureend\", gesturestartEvent = \"gesturestart\", keydownEvent = \"keydown\", keypressEvent = \"keypress\", keyupEvent = \"keyup\", loadEvent = \"load\", mouseclickEvent = \"click\", mousedblclickEvent = \"dblclick\", mousedownEvent = \"mousedown\", mouseupEvent = \"mouseup\", mousehoverEvent = \"hover\", mouseenterEvent = \"mouseenter\", mouseleaveEvent = \"mouseleave\", mouseinEvent = \"mousein\", mouseoutEvent = \"mouseout\", mouseoverEvent = \"mouseover\", mousemoveEvent = \"mousemove\", mousewheelEvent = \"mousewheel\", moveEvent = \"move\", orientationchangeEvent = \"orientationchange\", pointercancelEvent = \"pointercancel\", pointerdownEvent = \"pointerdown\", pointerleaveEvent = \"pointerleave\", pointermoveEvent = \"pointermove\", pointerupEvent = \"pointerup\", readystatechangeEvent = \"readystatechange\", resetEvent = \"reset\", resizeEvent = \"resize\", selectEvent = \"select\", selectendEvent = \"selectend\", selectstartEvent = \"selectstart\", scrollEvent = \"scroll\", submitEvent = \"submit\", touchstartEvent = \"touchstart\", touchmoveEvent = \"touchmove\", touchcancelEvent = \"touchcancel\", touchendEvent = \"touchend\", unloadEvent = \"unload\", nativeEvents = {\n  DOMContentLoaded: DOMContentLoadedEvent,\n  DOMMouseScroll: DOMMouseScrollEvent,\n  abort: abortEvent,\n  beforeunload: beforeunloadEvent,\n  blur: blurEvent,\n  change: changeEvent,\n  click: mouseclickEvent,\n  contextmenu: contextmenuEvent,\n  dblclick: mousedblclickEvent,\n  error: errorEvent,\n  focus: focusEvent,\n  focusin: focusinEvent,\n  focusout: focusoutEvent,\n  gesturechange: gesturechangeEvent,\n  gestureend: gestureendEvent,\n  gesturestart: gesturestartEvent,\n  hover: mousehoverEvent,\n  keydown: keydownEvent,\n  keypress: keypressEvent,\n  keyup: keyupEvent,\n  load: loadEvent,\n  mousedown: mousedownEvent,\n  mousemove: mousemoveEvent,\n  mousein: mouseinEvent,\n  mouseout: mouseoutEvent,\n  mouseenter: mouseenterEvent,\n  mouseleave: mouseleaveEvent,\n  mouseover: mouseoverEvent,\n  mouseup: mouseupEvent,\n  mousewheel: mousewheelEvent,\n  move: moveEvent,\n  orientationchange: orientationchangeEvent,\n  pointercancel: pointercancelEvent,\n  pointerdown: pointerdownEvent,\n  pointerleave: pointerleaveEvent,\n  pointermove: pointermoveEvent,\n  pointerup: pointerupEvent,\n  readystatechange: readystatechangeEvent,\n  reset: resetEvent,\n  resize: resizeEvent,\n  scroll: scrollEvent,\n  select: selectEvent,\n  selectend: selectendEvent,\n  selectstart: selectstartEvent,\n  submit: submitEvent,\n  touchcancel: touchcancelEvent,\n  touchend: touchendEvent,\n  touchmove: touchmoveEvent,\n  touchstart: touchstartEvent,\n  unload: unloadEvent\n}, dragEvent = \"drag\", dragstartEvent = \"dragstart\", dragenterEvent = \"dragenter\", dragleaveEvent = \"dragleave\", dragoverEvent = \"dragover\", dragendEvent = \"dragend\", loadstartEvent = \"loadstart\", mouseSwipeEvents = {\n  start: \"mousedown\",\n  end: \"mouseup\",\n  move: \"mousemove\",\n  cancel: \"mouseleave\"\n}, mouseClickEvents = { down: \"mousedown\", up: \"mouseup\" }, mouseHoverEvents = \"onmouseleave\" in document ? [\"mouseenter\", \"mouseleave\"] : (\n  /* istanbul ignore next @preserve */\n  [\"mouseover\", \"mouseout\"]\n), touchEvents = {\n  start: \"touchstart\",\n  end: \"touchend\",\n  move: \"touchmove\",\n  cancel: \"touchcancel\"\n}, focusEvents = { in: \"focusin\", out: \"focusout\" }, focusableSelector = 'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"]', keyboardEventKeys = {\n  Backspace: \"Backspace\",\n  //  8\n  Tab: \"Tab\",\n  //  9\n  Enter: \"Enter\",\n  // 13\n  Shift: \"Shift\",\n  // 16\n  Control: \"Control\",\n  // 17\n  Alt: \"Alt\",\n  // 18\n  Pause: \"Pause\",\n  // 19\n  CapsLock: \"CapsLock\",\n  // 20\n  Escape: \"Escape\",\n  // 27\n  Scape: \"Space\",\n  // 32\n  ArrowLeft: \"ArrowLeft\",\n  // 37\n  ArrowUp: \"ArrowUp\",\n  // 38\n  ArrowRight: \"ArrowRight\",\n  // 39\n  ArrowDown: \"ArrowDown\",\n  // 40\n  Insert: \"Insert\",\n  // 45\n  Delete: \"Delete\",\n  // 46\n  Meta: \"Meta\",\n  // 91 windows key\n  ContextMenu: \"ContextMenu\",\n  // 93\n  ScrollLock: \"ScrollLock\"\n  // 145\n}, keyAlt = \"Alt\", keyArrowDown = \"ArrowDown\", keyArrowUp = \"ArrowUp\", keyArrowLeft = \"ArrowLeft\", keyArrowRight = \"ArrowRight\", keyBackspace = \"Backspace\", keyCapsLock = \"CapsLock\", keyControl = \"Control\", keyDelete = \"Delete\", keyEnter = \"Enter\", keyNumpadEnter = \"NumpadEnter\", keyEscape = \"Escape\", keyInsert = \"Insert\", keyMeta = \"Meta\", keyPause = \"Pause\", keyScrollLock = \"ScrollLock\", keyShift = \"Shift\", keySpace = \"Space\", keyTab = \"Tab\", animationDuration = \"animationDuration\", animationDelay = \"animationDelay\", animationName = \"animationName\", animationEndEvent = \"animationend\", transitionDuration = \"transitionDuration\", transitionDelay = \"transitionDelay\", transitionEndEvent = \"transitionend\", transitionProperty = \"transitionProperty\", addEventListener = \"addEventListener\", removeEventListener = \"removeEventListener\", bezierEasings = {\n  linear: \"linear\",\n  easingSinusoidalIn: \"cubic-bezier(0.47,0,0.745,0.715)\",\n  easingSinusoidalOut: \"cubic-bezier(0.39,0.575,0.565,1)\",\n  easingSinusoidalInOut: \"cubic-bezier(0.445,0.05,0.55,0.95)\",\n  easingQuadraticIn: \"cubic-bezier(0.550,0.085,0.680,0.530)\",\n  easingQuadraticOut: \"cubic-bezier(0.250,0.460,0.450,0.940)\",\n  easingQuadraticInOut: \"cubic-bezier(0.455,0.030,0.515,0.955)\",\n  easingCubicIn: \"cubic-bezier(0.55,0.055,0.675,0.19)\",\n  easingCubicOut: \"cubic-bezier(0.215,0.61,0.355,1)\",\n  easingCubicInOut: \"cubic-bezier(0.645,0.045,0.355,1)\",\n  easingQuarticIn: \"cubic-bezier(0.895,0.03,0.685,0.22)\",\n  easingQuarticOut: \"cubic-bezier(0.165,0.84,0.44,1)\",\n  easingQuarticInOut: \"cubic-bezier(0.77,0,0.175,1)\",\n  easingQuinticIn: \"cubic-bezier(0.755,0.05,0.855,0.06)\",\n  easingQuinticOut: \"cubic-bezier(0.23,1,0.32,1)\",\n  easingQuinticInOut: \"cubic-bezier(0.86,0,0.07,1)\",\n  easingExponentialIn: \"cubic-bezier(0.95,0.05,0.795,0.035)\",\n  easingExponentialOut: \"cubic-bezier(0.19,1,0.22,1)\",\n  easingExponentialInOut: \"cubic-bezier(1,0,0,1)\",\n  easingCircularIn: \"cubic-bezier(0.6,0.04,0.98,0.335)\",\n  easingCircularOut: \"cubic-bezier(0.075,0.82,0.165,1)\",\n  easingCircularInOut: \"cubic-bezier(0.785,0.135,0.15,0.86)\",\n  easingBackIn: \"cubic-bezier(0.6,-0.28,0.735,0.045)\",\n  easingBackOut: \"cubic-bezier(0.175,0.885,0.32,1.275)\",\n  easingBackInOut: \"cubic-bezier(0.68,-0.55,0.265,1.55)\"\n}, offsetHeight = \"offsetHeight\", offsetWidth = \"offsetWidth\", scrollHeight = \"scrollHeight\", scrollWidth = \"scrollWidth\", tabindex = \"tabindex\", userAgentData = navigator.userAgentData, { userAgent: userAgentString } = navigator, userAgent = userAgentString, isMobile = () => {\n  const mobileBrands = /iPhone|iPad|iPod|Android/i;\n  return navigator?.userAgentData?.brands.some(\n    (x) => mobileBrands.test(x.brand)\n  ) || mobileBrands.test(navigator?.userAgent) || !1;\n}, isApple = () => {\n  const appleBrands = /(iPhone|iPod|iPad)/;\n  return navigator?.userAgentData?.brands.some(\n    (x) => appleBrands.test(x.brand)\n  ) || /* istanbul ignore next @preserve */\n  appleBrands.test(\n    navigator?.userAgent\n  ) || !1;\n}, isFirefox = () => navigator?.userAgent?.includes(\"Firefox\") || /* istanbul ignore next @preserve */\n!1, support3DTransform = () => [\"webkitPerspective\", \"perspective\"].some((p) => p in document.head.style), noop = () => {\n}, on = (element, eventName, listener, options) => {\n  const ops = options || !1;\n  element.addEventListener(\n    eventName,\n    listener,\n    ops\n  );\n}, off = (element, eventName, listener, options) => {\n  const ops = options || !1;\n  element.removeEventListener(\n    eventName,\n    listener,\n    ops\n  );\n}, one = (element, eventName, listener, options) => {\n  const handlerWrapper = (e) => {\n    (e.target === element || e.currentTarget === element) && (listener.apply(element, [e]), off(element, eventName, handlerWrapper, options));\n  };\n  on(element, eventName, handlerWrapper, options);\n}, supportPassive = () => {\n  let result = !1;\n  try {\n    const opts = Object.defineProperty({}, \"passive\", {\n      get: () => (result = !0, result)\n    });\n    one(document, DOMContentLoadedEvent, noop, opts);\n  } catch {\n  }\n  return result;\n}, supportTransform = () => [\"webkitTransform\", \"transform\"].some((p) => p in document.head.style), supportTouch = () => \"ontouchstart\" in window || /* istanbul ignore next @preserve */\n\"msMaxTouchPoints\" in navigator, supportAnimation = () => [\"webkitAnimation\", \"animation\"].some((p) => p in document.head.style), supportTransition = () => [\"webkitTransition\", \"transition\"].some((p) => p in document.head.style), getAttribute = (element, att) => element.getAttribute(att), getAttributeNS = (ns, element, att) => element.getAttributeNS(ns, att), hasAttribute = (element, att) => element.hasAttribute(att), hasAttributeNS = (ns, element, att) => element.hasAttributeNS(ns, att), setAttribute = (element, att, value) => element.setAttribute(att, value), setAttributeNS = (ns, element, att, value) => element.setAttributeNS(ns, att, value), removeAttribute = (element, att) => element.removeAttribute(att), removeAttributeNS = (ns, element, att) => element.removeAttributeNS(ns, att), addClass = (element, ...classNAME) => {\n  element.classList.add(...classNAME);\n}, removeClass = (element, ...classNAME) => {\n  element.classList.remove(...classNAME);\n}, hasClass = (element, classNAME) => element.classList.contains(classNAME), { body: documentBody } = document, { documentElement } = document, { head: documentHead } = document, ArrayFrom = (arr) => Array.from(arr), isObject = (obj) => obj != null && typeof obj == \"object\" || !1, isNode = (node) => isObject(node) && typeof node.nodeType == \"number\" && [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].some(\n  (x) => node.nodeType === x\n) || !1, isHTMLElement = (element) => isNode(element) && element.nodeType === 1 || !1, componentData = /* @__PURE__ */ new Map(), Data = {\n  data: componentData,\n  /**\n   * Sets web components data.\n   *\n   * @param element target element\n   * @param component the component's name or a unique key\n   * @param instance the component instance\n   */\n  set: (element, component, instance) => {\n    if (!isHTMLElement(element)) return;\n    componentData.has(component) || componentData.set(component, /* @__PURE__ */ new Map()), componentData.get(component).set(element, instance);\n  },\n  /**\n   * Returns all instances for specified component.\n   *\n   * @param component the component's name or a unique key\n   * @returns all the component instances\n   */\n  getAllFor: (component) => componentData.get(component) || null,\n  /**\n   * Returns the instance associated with the target.\n   *\n   * @param element target element\n   * @param component the component's name or a unique key\n   * @returns the instance\n   */\n  get: (element, component) => {\n    if (!isHTMLElement(element) || !component) return null;\n    const instanceMap = Data.getAllFor(component);\n    return element && instanceMap && instanceMap.get(element) || null;\n  },\n  /**\n   * Removes web components data.\n   *\n   * @param element target element\n   * @param component the component's name or a unique key\n   */\n  remove: (element, component) => {\n    const instanceMap = Data.getAllFor(component);\n    !instanceMap || !isHTMLElement(element) || (instanceMap.delete(element), instanceMap.size === 0 && componentData.delete(component));\n  }\n}, getInstance = (target, component) => Data.get(target, component), isString = (str) => typeof str == \"string\" || !1, isWindow = (obj) => isObject(obj) && obj.constructor.name === \"Window\" || !1, isDocument = (obj) => isNode(obj) && obj.nodeType === 9 || !1, getDocument = (node) => isWindow(node) ? node.document : isDocument(node) ? node : isNode(node) ? node.ownerDocument : globalThis.document, ObjectAssign = (obj, ...source) => Object.assign(obj, ...source), createElement = (param) => {\n  if (!param) return;\n  if (isString(param))\n    return getDocument().createElement(param);\n  const { tagName } = param, newElement = createElement(tagName);\n  if (!newElement) return;\n  const attr = { ...param };\n  return delete attr.tagName, ObjectAssign(newElement, attr);\n}, createElementNS = (ns, param) => {\n  if (!ns || !param) return;\n  if (isString(param))\n    return getDocument().createElementNS(ns, param);\n  const { tagName } = param, newElement = createElementNS(ns, tagName);\n  if (!newElement) return;\n  const attr = { ...param };\n  return delete attr.tagName, ObjectAssign(newElement, attr);\n}, dispatchEvent = (element, event) => element.dispatchEvent(event), distinct = (value, index, arr) => arr.indexOf(value) === index, getElementStyle = (element, property) => {\n  const computedStyle = getComputedStyle(element), prop = property.replace(\"webkit\", \"Webkit\").replace(/([A-Z])/g, \"-$1\").toLowerCase();\n  return computedStyle.getPropertyValue(prop);\n}, getElementAnimationDelay = (element) => {\n  const propertyValue = getElementStyle(element, animationName), durationValue = getElementStyle(element, animationDelay), durationScale = durationValue.includes(\"ms\") ? (\n    /* istanbul ignore next */\n    1\n  ) : 1e3, duration = propertyValue && propertyValue !== \"none\" ? parseFloat(durationValue) * durationScale : 0;\n  return Number.isNaN(duration) ? (\n    /* istanbul ignore next */\n    0\n  ) : duration;\n}, getElementAnimationDuration = (element) => {\n  const propertyValue = getElementStyle(element, animationName), durationValue = getElementStyle(element, animationDuration), durationScale = durationValue.includes(\"ms\") ? (\n    /* istanbul ignore next */\n    1\n  ) : 1e3, duration = propertyValue && propertyValue !== \"none\" ? parseFloat(durationValue) * durationScale : 0;\n  return Number.isNaN(duration) ? (\n    /* istanbul ignore next */\n    0\n  ) : duration;\n}, emulateAnimationEnd = (element, handler) => {\n  let called = 0;\n  const endEvent = new Event(animationEndEvent), duration = getElementAnimationDuration(element), delay = getElementAnimationDelay(element);\n  if (duration) {\n    const animationEndWrapper = (e) => {\n      e.target === element && (handler.apply(element, [e]), element.removeEventListener(animationEndEvent, animationEndWrapper), called = 1);\n    };\n    element.addEventListener(animationEndEvent, animationEndWrapper), setTimeout(() => {\n      called || dispatchEvent(element, endEvent);\n    }, duration + delay + 17);\n  } else\n    handler.apply(element, [endEvent]);\n}, getElementTransitionDelay = (element) => {\n  const propertyValue = getElementStyle(element, transitionProperty), delayValue = getElementStyle(element, transitionDelay), delayScale = delayValue.includes(\"ms\") ? (\n    /* istanbul ignore next */\n    1\n  ) : 1e3, duration = propertyValue && propertyValue !== \"none\" ? parseFloat(delayValue) * delayScale : (\n    /* istanbul ignore next */\n    0\n  );\n  return Number.isNaN(duration) ? (\n    /* istanbul ignore next */\n    0\n  ) : duration;\n}, getElementTransitionDuration = (element) => {\n  const propertyValue = getElementStyle(element, transitionProperty), durationValue = getElementStyle(element, transitionDuration), durationScale = durationValue.includes(\"ms\") ? (\n    /* istanbul ignore next */\n    1\n  ) : 1e3, duration = propertyValue && propertyValue !== \"none\" ? parseFloat(durationValue) * durationScale : (\n    /* istanbul ignore next */\n    0\n  );\n  return Number.isNaN(duration) ? (\n    /* istanbul ignore next */\n    0\n  ) : duration;\n}, emulateTransitionEnd = (element, handler) => {\n  let called = 0;\n  const endEvent = new Event(transitionEndEvent), duration = getElementTransitionDuration(element), delay = getElementTransitionDelay(element);\n  if (duration) {\n    const transitionEndWrapper = (e) => {\n      e.target === element && (handler.apply(element, [e]), element.removeEventListener(transitionEndEvent, transitionEndWrapper), called = 1);\n    };\n    element.addEventListener(transitionEndEvent, transitionEndWrapper), setTimeout(() => {\n      called || dispatchEvent(element, endEvent);\n    }, duration + delay + 17);\n  } else\n    handler.apply(element, [endEvent]);\n}, Float32ArrayFrom = (arr) => Float32Array.from(Array.from(arr)), Float64ArrayFrom = (arr) => Float64Array.from(Array.from(arr)), focus = (element, options) => element.focus(options), normalizeValue = (value) => [\"true\", !0].includes(value) ? !0 : [\"false\", !1].includes(value) ? !1 : [\"null\", \"\", null, void 0].includes(value) ? null : value !== \"\" && !Number.isNaN(+value) ? +value : value, ObjectEntries = (obj) => Object.entries(obj), toLowerCase = (source) => source.toLowerCase(), normalizeOptions = (element, defaultOps, inputOps, ns) => {\n  const INPUT = { ...inputOps }, data = { ...element.dataset }, normalOps = { ...defaultOps }, dataOps = {}, title = \"title\";\n  return ObjectEntries(data).forEach(([k, v]) => {\n    const key = ns && typeof k == \"string\" && k.includes(ns) ? k.replace(ns, \"\").replace(\n      /[A-Z]/g,\n      (match) => toLowerCase(match)\n    ) : (\n      /* istanbul ignore next @preserve */\n      k\n    );\n    dataOps[key] = normalizeValue(v);\n  }), ObjectEntries(INPUT).forEach(([k, v]) => {\n    INPUT[k] = normalizeValue(v);\n  }), ObjectEntries(defaultOps).forEach(([k, v]) => {\n    k in INPUT ? normalOps[k] = INPUT[k] : k in dataOps ? normalOps[k] = dataOps[k] : normalOps[k] = k === title ? getAttribute(element, title) : v;\n  }), normalOps;\n}, ObjectHasOwn = (obj, prop) => isObject(obj) && (Object.hasOwn(obj, prop) || prop in obj), ObjectKeys = (obj) => Object.keys(obj), ObjectValues = (obj) => Object.values(obj), ObjectFromEntries = (entries) => Object.fromEntries(entries), createCustomEvent = (eventType, config) => {\n  const OriginalCustomEvent = new CustomEvent(eventType, {\n    cancelable: !0,\n    bubbles: !0\n  });\n  return isObject(config) && ObjectAssign(OriginalCustomEvent, config), OriginalCustomEvent;\n}, passiveHandler = { passive: !0 }, reflow = (element) => element.offsetHeight, setElementStyle = (element, styles) => {\n  ObjectEntries(styles).forEach(([key, value]) => {\n    if (value && isString(key) && key.includes(\"--\"))\n      element.style.setProperty(key, value);\n    else {\n      const propObject = {};\n      propObject[key] = value, ObjectAssign(element.style, propObject);\n    }\n  });\n}, isMap = (obj) => isObject(obj) && obj.constructor.name === \"Map\" || !1, isNumber = (num) => typeof num == \"number\" || !1, TimeCache = /* @__PURE__ */ new Map(), Timer = {\n  /**\n   * Sets a new timeout timer for an element, or element -> key association.\n   *\n   * @param element target element\n   * @param callback the callback\n   * @param delay the execution delay\n   * @param key a unique key\n   */\n  set: (element, callback, delay, key) => {\n    isHTMLElement(element) && (key && key.length ? (TimeCache.has(element) || TimeCache.set(element, /* @__PURE__ */ new Map()), TimeCache.get(element).set(key, setTimeout(callback, delay))) : TimeCache.set(element, setTimeout(callback, delay)));\n  },\n  /**\n   * Returns the timer associated with the target.\n   *\n   * @param element target element\n   * @param key a unique\n   * @returns the timer\n   */\n  get: (element, key) => {\n    if (!isHTMLElement(element)) return null;\n    const keyTimers = TimeCache.get(element);\n    return key && keyTimers && isMap(keyTimers) ? keyTimers.get(key) || /* istanbul ignore next @preserve */\n    null : isNumber(keyTimers) ? keyTimers : null;\n  },\n  /**\n   * Clears the element's timer.\n   *\n   * @param element target element\n   * @param key a unique key\n   */\n  clear: (element, key) => {\n    if (!isHTMLElement(element)) return;\n    const keyTimers = TimeCache.get(element);\n    key && key.length && isMap(keyTimers) ? (clearTimeout(keyTimers.get(key)), keyTimers.delete(key), keyTimers.size === 0 && TimeCache.delete(element)) : (clearTimeout(keyTimers), TimeCache.delete(element));\n  }\n}, toUpperCase = (source) => source.toUpperCase(), querySelectorAll = (selector, parent) => (isNode(parent) ? parent : getDocument()).querySelectorAll(selector), focusTrapMap = /* @__PURE__ */ new Map();\nfunction handleKeyboardNavigation(event) {\n  const { shiftKey, code } = event, doc = getDocument(this), focusableElements = [\n    ...querySelectorAll(focusableSelector, this)\n  ].filter(\n    (el) => !hasAttribute(el, \"disabled\") && !getAttribute(el, ariaHidden)\n  );\n  if (!focusableElements.length) return;\n  const firstFocusable = focusableElements[0], lastFocusable = focusableElements[focusableElements.length - 1];\n  code === \"Tab\" && (shiftKey && doc.activeElement === firstFocusable ? (lastFocusable.focus(), event.preventDefault()) : !shiftKey && doc.activeElement === lastFocusable && (firstFocusable.focus(), event.preventDefault()));\n}\nconst hasFocusTrap = (target) => focusTrapMap.has(target) === !0, toggleFocusTrap = (target) => {\n  const isCurrentlyTrapped = hasFocusTrap(target);\n  (isCurrentlyTrapped ? off : on)(target, \"keydown\", handleKeyboardNavigation), isCurrentlyTrapped ? focusTrapMap.delete(target) : focusTrapMap.set(target, !0);\n}, getBoundingClientRect = (element, includeScale) => {\n  const { width, height, top, right, bottom, left } = element.getBoundingClientRect();\n  let scaleX = 1, scaleY = 1;\n  if (includeScale && isHTMLElement(element)) {\n    const { offsetWidth: offsetWidth2, offsetHeight: offsetHeight2 } = element;\n    scaleX = offsetWidth2 > 0 ? Math.round(width) / offsetWidth2 : (\n      /* istanbul ignore next @preserve */\n      1\n    ), scaleY = offsetHeight2 > 0 ? Math.round(height) / offsetHeight2 : (\n      /* istanbul ignore next @preserve */\n      1\n    );\n  }\n  return {\n    width: width / scaleX,\n    height: height / scaleY,\n    top: top / scaleY,\n    right: right / scaleX,\n    bottom: bottom / scaleY,\n    left: left / scaleX,\n    x: left / scaleX,\n    y: top / scaleY\n  };\n}, getDocumentBody = (node) => getDocument(node).body, getDocumentElement = (node) => getDocument(node).documentElement, getDocumentHead = (node) => getDocument(node).head, getNodeScroll = (element) => {\n  const isWin = isWindow(element), x = isWin ? element.scrollX : element.scrollLeft, y = isWin ? element.scrollY : element.scrollTop;\n  return { x, y };\n}, isShadowRoot = (element) => isNode(element) && element.constructor.name === \"ShadowRoot\" || !1, getParentNode = (node) => node.nodeName === \"HTML\" ? node : isHTMLElement(node) && node.assignedSlot || // step into the shadow DOM of the parent of a slotted node\nisNode(node) && node.parentNode || // DOM Element detected\nisShadowRoot(node) && node.host || // ShadowRoot detected\ngetDocumentElement(node), isScaledElement = (element) => {\n  if (!isHTMLElement(element)) return !1;\n  const { width, height } = getBoundingClientRect(element), { offsetWidth: offsetWidth2, offsetHeight: offsetHeight2 } = element;\n  return Math.round(width) !== offsetWidth2 || Math.round(height) !== offsetHeight2;\n}, getRectRelativeToOffsetParent = (element, offsetParent, scroll) => {\n  const isParentAnElement = isHTMLElement(offsetParent), rect = getBoundingClientRect(\n    element,\n    isParentAnElement && isScaledElement(offsetParent)\n  ), offsets = { x: 0, y: 0 };\n  if (isParentAnElement) {\n    const offsetRect = getBoundingClientRect(offsetParent, !0);\n    offsets.x = offsetRect.x + offsetParent.clientLeft, offsets.y = offsetRect.y + offsetParent.clientTop;\n  }\n  return {\n    x: rect.left + scroll.x - offsets.x,\n    y: rect.top + scroll.y - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n};\nlet elementUID = 0, elementMapUID = 0;\nconst elementIDMap = /* @__PURE__ */ new Map(), getUID = (element, key) => {\n  let result = key ? elementUID : elementMapUID;\n  if (key) {\n    const elID = getUID(element), elMap = elementIDMap.get(elID) || /* @__PURE__ */ new Map();\n    elementIDMap.has(elID) || elementIDMap.set(elID, elMap), isMap(elMap) && !elMap.has(key) ? (elMap.set(key, result), elementUID += 1) : result = elMap.get(key);\n  } else {\n    const elkey = element.id || element;\n    elementIDMap.has(elkey) ? result = elementIDMap.get(elkey) : (elementIDMap.set(elkey, result), elementMapUID += 1);\n  }\n  return result;\n}, getWindow = (node) => node ? isDocument(node) ? node.defaultView : isNode(node) ? node?.ownerDocument?.defaultView : node : window, isArray = (obj) => Array.isArray(obj) || !1, isCanvas = (element) => isNode(element) && element.nodeName === \"CANVAS\" || !1, isCustomElement = (element) => isHTMLElement(element) && !!element.shadowRoot || !1, isElement = (element) => isNode(element) && [1, 2, 3, 4, 5, 6, 7, 8].some((x) => element.nodeType === x) || !1, isElementInScrollRange = (element) => {\n  if (!isNode(element)) return !1;\n  const { top, bottom } = getBoundingClientRect(element), { clientHeight } = getDocumentElement(element);\n  return top <= clientHeight && bottom >= 0;\n}, isElementInViewport = (element) => {\n  if (!isNode(element)) return !1;\n  const { clientWidth, clientHeight } = getDocumentElement(element), { top, left, bottom, right } = getBoundingClientRect(element, !0);\n  return top >= 0 && left >= 0 && bottom <= clientHeight && right <= clientWidth;\n}, isElementsArray = (obj) => isArray(obj) && obj.every(isHTMLElement) || !1, isFunction = (fn) => typeof fn == \"function\" || !1, isHTMLCollection = (obj) => isObject(obj) && obj.constructor.name === \"HTMLCollection\" || !1, isHTMLImageElement = (element) => isHTMLElement(element) && element.tagName === \"IMG\" || !1, isJSON = (str) => {\n  if (!isString(str)) return !1;\n  try {\n    JSON.parse(str);\n  } catch {\n    return !1;\n  }\n  return !0;\n}, isWeakMap = (obj) => isObject(obj) && obj.constructor.name === \"WeakMap\" || !1, isMedia = (element) => isNode(element) && [\"SVG\", \"Image\", \"Video\", \"Canvas\"].some(\n  (s) => element.constructor.name.includes(s)\n) || !1, isNodeList = (obj) => isObject(obj) && obj.constructor.name === \"NodeList\" || !1, isRTL = (node) => getDocumentElement(node).dir === \"rtl\", isSVGElement = (element) => isNode(element) && element.constructor.name.includes(\"SVG\") || !1, isTableElement = (element) => isNode(element) && [\"TABLE\", \"TD\", \"TH\"].includes(element.nodeName) || !1, closest = (element, selector) => element ? element.closest(selector) || // break out of `ShadowRoot`\nclosest(element.getRootNode().host, selector) : null, querySelector = (selector, parent) => isHTMLElement(selector) ? selector : (isNode(parent) ? parent : getDocument()).querySelector(selector), getElementsByTagName = (selector, parent) => (isNode(parent) ? parent : getDocument()).getElementsByTagName(\n  selector\n), getCustomElements = (parent) => [...getElementsByTagName(\"*\", parent)].filter(isCustomElement), getElementById = (id, context) => getDocument(context).getElementById(id) || null, getElementsByClassName = (selector, parent) => (parent && isNode(parent) ? parent : getDocument()).getElementsByClassName(\n  selector\n), matches = (target, selector) => target.matches(selector), version = \"2.0.7\";\nexport {\n  ArrayFrom,\n  DOMContentLoadedEvent,\n  DOMMouseScrollEvent,\n  Data,\n  Float32ArrayFrom,\n  Float64ArrayFrom,\n  ObjectAssign,\n  ObjectEntries,\n  ObjectFromEntries,\n  ObjectHasOwn,\n  ObjectKeys,\n  ObjectValues,\n  Timer,\n  abortEvent,\n  addClass,\n  addEventListener,\n  animationDelay,\n  animationDuration,\n  animationEndEvent,\n  animationName,\n  ariaChecked,\n  ariaDescribedBy,\n  ariaDescription,\n  ariaExpanded,\n  ariaHasPopup,\n  ariaHidden,\n  ariaLabel,\n  ariaLabelledBy,\n  ariaModal,\n  ariaPressed,\n  ariaSelected,\n  ariaValueMax,\n  ariaValueMin,\n  ariaValueNow,\n  ariaValueText,\n  beforeunloadEvent,\n  bezierEasings,\n  blurEvent,\n  changeEvent,\n  closest,\n  contextmenuEvent,\n  createCustomEvent,\n  createElement,\n  createElementNS,\n  dispatchEvent,\n  distinct,\n  documentBody,\n  documentElement,\n  documentHead,\n  dragEvent,\n  dragendEvent,\n  dragenterEvent,\n  dragleaveEvent,\n  dragoverEvent,\n  dragstartEvent,\n  emulateAnimationEnd,\n  emulateTransitionEnd,\n  errorEvent,\n  focus,\n  focusEvent,\n  focusEvents,\n  focusableSelector,\n  focusinEvent,\n  focusoutEvent,\n  gesturechangeEvent,\n  gestureendEvent,\n  gesturestartEvent,\n  getAttribute,\n  getAttributeNS,\n  getBoundingClientRect,\n  getCustomElements,\n  getDocument,\n  getDocumentBody,\n  getDocumentElement,\n  getDocumentHead,\n  getElementAnimationDelay,\n  getElementAnimationDuration,\n  getElementById,\n  getElementStyle,\n  getElementTransitionDelay,\n  getElementTransitionDuration,\n  getElementsByClassName,\n  getElementsByTagName,\n  getInstance,\n  getNodeScroll,\n  getParentNode,\n  getRectRelativeToOffsetParent,\n  getUID,\n  getWindow,\n  hasAttribute,\n  hasAttributeNS,\n  hasClass,\n  hasFocusTrap,\n  isApple,\n  isArray,\n  isCanvas,\n  isCustomElement,\n  isDocument,\n  isElement,\n  isElementInScrollRange,\n  isElementInViewport,\n  isElementsArray,\n  isFirefox,\n  isFunction,\n  isHTMLCollection,\n  isHTMLElement,\n  isHTMLImageElement,\n  isJSON,\n  isMap,\n  isMedia,\n  isMobile,\n  isNode,\n  isNodeList,\n  isNumber,\n  isObject,\n  isRTL,\n  isSVGElement,\n  isScaledElement,\n  isShadowRoot,\n  isString,\n  isTableElement,\n  isWeakMap,\n  isWindow,\n  keyAlt,\n  keyArrowDown,\n  keyArrowLeft,\n  keyArrowRight,\n  keyArrowUp,\n  keyBackspace,\n  keyCapsLock,\n  keyControl,\n  keyDelete,\n  keyEnter,\n  keyEscape,\n  keyInsert,\n  keyMeta,\n  keyNumpadEnter,\n  keyPause,\n  keyScrollLock,\n  keyShift,\n  keySpace,\n  keyTab,\n  keyboardEventKeys,\n  keydownEvent,\n  keypressEvent,\n  keyupEvent,\n  loadEvent,\n  loadstartEvent,\n  matches,\n  mouseClickEvents,\n  mouseHoverEvents,\n  mouseSwipeEvents,\n  mouseclickEvent,\n  mousedblclickEvent,\n  mousedownEvent,\n  mouseenterEvent,\n  mousehoverEvent,\n  mouseinEvent,\n  mouseleaveEvent,\n  mousemoveEvent,\n  mouseoutEvent,\n  mouseoverEvent,\n  mouseupEvent,\n  mousewheelEvent,\n  moveEvent,\n  nativeEvents,\n  noop,\n  normalizeOptions,\n  normalizeValue,\n  off,\n  offsetHeight,\n  offsetWidth,\n  on,\n  one,\n  orientationchangeEvent,\n  passiveHandler,\n  pointercancelEvent,\n  pointerdownEvent,\n  pointerleaveEvent,\n  pointermoveEvent,\n  pointerupEvent,\n  querySelector,\n  querySelectorAll,\n  readystatechangeEvent,\n  reflow,\n  removeAttribute,\n  removeAttributeNS,\n  removeClass,\n  removeEventListener,\n  resetEvent,\n  resizeEvent,\n  scrollEvent,\n  scrollHeight,\n  scrollWidth,\n  selectEvent,\n  selectendEvent,\n  selectstartEvent,\n  setAttribute,\n  setAttributeNS,\n  setElementStyle,\n  submitEvent,\n  support3DTransform,\n  supportAnimation,\n  supportPassive,\n  supportTouch,\n  supportTransform,\n  supportTransition,\n  tabindex,\n  toLowerCase,\n  toUpperCase,\n  toggleFocusTrap,\n  touchEvents,\n  touchcancelEvent,\n  touchendEvent,\n  touchmoveEvent,\n  touchstartEvent,\n  transitionDelay,\n  transitionDuration,\n  transitionEndEvent,\n  transitionProperty,\n  unloadEvent,\n  userAgent,\n  userAgentData,\n  version\n};\n//# sourceMappingURL=shorty.mjs.map\n","const e = {}, f = (t) => {\n  const { type: c, currentTarget: i } = t;\n  [...e[c]].forEach(([n, s]) => {\n    /* istanbul ignore else @preserve */\n    i === n && [...s].forEach(([o, a]) => {\n      o.apply(n, [t]), typeof a == \"object\" && a.once && r(n, c, o, a);\n    });\n  });\n}, E = (t, c, i, n) => {\n  /* istanbul ignore else @preserve */\n  e[c] || (e[c] = /* @__PURE__ */ new Map());\n  const s = e[c];\n  /* istanbul ignore else @preserve */\n  s.has(t) || s.set(t, /* @__PURE__ */ new Map());\n  const o = s.get(t), { size: a } = o;\n  o.set(i, n);\n  /* istanbul ignore else @preserve */\n  a || t.addEventListener(c, f, n);\n}, r = (t, c, i, n) => {\n  const s = e[c], o = s && s.get(t), a = o && o.get(i), d = a !== void 0 ? a : n;\n  /* istanbul ignore else @preserve */\n  o && o.has(i) && o.delete(i);\n  /* istanbul ignore else @preserve */\n  s && (!o || !o.size) && s.delete(t);\n  /* istanbul ignore else @preserve */\n  (!s || !s.size) && delete e[c];\n  /* istanbul ignore else @preserve */\n  (!o || !o.size) && t.removeEventListener(\n    c,\n    f,\n    d\n  );\n}, g = E, M = r;\nexport {\n  E as addListener,\n  f as globalListener,\n  M as off,\n  g as on,\n  e as registry,\n  r as removeListener\n};\n//# sourceMappingURL=event-listener.mjs.map\n","/**\n * Global namespace for most components `fade` class.\n */\nconst fadeClass = \"fade\";\nexport default fadeClass;\n","/**\n * Global namespace for most components `show` class.\n */\nconst showClass = \"show\";\nexport default showClass;\n","/**\n * Global namespace for most components `dismiss` option.\n */\nconst dataBsDismiss = \"data-bs-dismiss\";\nexport default dataBsDismiss;\n","/** @type {string} */\nconst alertString = \"alert\";\nexport default alertString;\n","/** @type {string} */\nconst alertComponent = \"Alert\";\nexport default alertComponent;\n","import { version } from \"../package.json\";\n\nconst Version = version;\n\nexport default Version;\n","/* Native JavaScript for Bootstrap 5 | Base Component\n----------------------------------------------------- */\nimport {\n  Data,\n  isHTMLElement,\n  isString,\n  normalizeOptions,\n  ObjectKeys,\n  querySelector,\n} from \"@thednp/shorty\";\n\nimport type { BaseOptions } from \"../interface/baseComponent\";\nimport Version from \"../version\";\n\n/** Returns a new `BaseComponent` instance. */\nexport default class BaseComponent {\n  declare element: HTMLElement;\n  declare options?: BaseOptions;\n\n  /**\n   * @param target `HTMLElement` or selector string\n   * @param config component instance options\n   */\n  constructor(target: HTMLElement | string, config?: BaseOptions) {\n    let element: HTMLElement | null;\n\n    try {\n      if (isHTMLElement(target)) {\n        element = target;\n      } else if (isString(target)) {\n        element = querySelector<HTMLElement>(target);\n        // istanbul ignore else @preserve\n        if (!element) throw Error(`\"${target}\" is not a valid selector.`);\n      } else {\n        throw Error(`your target is not an instance of HTMLElement.`);\n      }\n    } catch (e) {\n      throw Error(`${this.name} Error: ${(e as Error).message}`);\n    }\n\n    const prevInstance = Data.get<typeof this>(element, this.name);\n    // istanbul ignore else @preserve\n    if (prevInstance) {\n      // remove previously attached event listeners\n      // to avoid memory leaks\n      prevInstance._toggleEventListeners();\n    }\n\n    this.element = element;\n    this.options = this.defaults && ObjectKeys(this.defaults).length\n      ? normalizeOptions(element, this.defaults, config || {}, \"bs\")\n      // istanbul ignore next @preserve\n      : {};\n\n    Data.set(element, this.name, this);\n  }\n\n  // istanbul ignore next @preserve\n  get version() {\n    return Version;\n  }\n\n  // istanbul ignore next @preserve\n  get name() {\n    return \"BaseComponent\";\n  }\n\n  // istanbul ignore next @preserve\n  get defaults() {\n    return {};\n  }\n\n  /** just to have something to extend from */\n  // istanbul ignore next @preserve coverage wise this isn't important\n  _toggleEventListeners = () => {\n    // do something to please linters\n  };\n\n  /** Removes component from target element. */\n  dispose() {\n    Data.remove<typeof this>(this.element, this.name);\n    ObjectKeys(this).forEach((prop) => {\n      delete this[prop];\n    });\n  }\n}\n","/* Native JavaScript for Bootstrap 5 | Alert\n-------------------------------------------- */\nimport {\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  getInstance,\n  hasClass,\n  mouseclickEvent,\n  querySelector,\n  removeClass,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport dataBsDismiss from \"../strings/dataBsDismiss\";\nimport alertString from \"../strings/alertString\";\nimport alertComponent from \"../strings/alertComponent\";\nimport type { AlertEvent } from \"../interface/alert\";\n\nimport BaseComponent from \"./base-component\";\n\n// ALERT PRIVATE GC\n// ================\nconst alertSelector = `.${alertString}`;\nconst alertDismissSelector = `[${dataBsDismiss}=\"${alertString}\"]`;\n\n/**\n * Static method which returns an existing `Alert` instance associated\n * to a target `Element`.\n */\nconst getAlertInstance = (element: HTMLElement) =>\n  getInstance<Alert>(element, alertComponent);\n\n/**\n * An `Alert` initialization callback.\n */\nconst alertInitCallback = (element: HTMLElement) => new Alert(element);\n\n// ALERT CUSTOM EVENTS\n// ===================\nconst closeAlertEvent = createCustomEvent<Record<string, never>, AlertEvent>(\n  `close.bs.${alertString}`,\n);\nconst closedAlertEvent = createCustomEvent<Record<string, never>, AlertEvent>(\n  `closed.bs.${alertString}`,\n);\n\n// ALERT EVENT HANDLER\n// ===================\n/**\n * Alert `transitionend` callback.\n *\n * @param that target Alert instance\n */\nconst alertTransitionEnd = (self: Alert) => {\n  const { element } = self;\n  dispatchEvent(element, closedAlertEvent);\n\n  self._toggleEventListeners();\n  self.dispose();\n  element.remove();\n};\n\n// ALERT DEFINITION\n// ================\n/** Creates a new Alert instance. */\nexport default class Alert extends BaseComponent {\n  static selector = alertSelector;\n  static init = alertInitCallback;\n  static getInstance = getAlertInstance;\n  dismiss: HTMLElement | null;\n\n  constructor(target: HTMLElement | string) {\n    super(target);\n\n    // the dismiss button\n    this.dismiss = querySelector(alertDismissSelector, this.element);\n\n    // add event listener\n    this._toggleEventListeners(true);\n  }\n\n  /** Returns component name string. */\n  get name() {\n    return alertComponent;\n  }\n\n  // ALERT PUBLIC METHODS\n  // ====================\n  /**\n   * Public method that hides the `.alert` element from the user,\n   * disposes the instance once animation is complete, then\n   * removes the element from the DOM.\n   */\n  close = () => {\n    const { element } = this;\n\n    // istanbul ignore else @preserve\n    if (element && hasClass(element, showClass)) {\n      dispatchEvent(element, closeAlertEvent);\n\n      if (!closeAlertEvent.defaultPrevented) {\n        removeClass(element, showClass);\n\n        if (hasClass(element, fadeClass)) {\n          emulateTransitionEnd(element, () => alertTransitionEnd(this));\n        } else alertTransitionEnd(this);\n      }\n    }\n  };\n  /**\n   * Toggle on / off the `click` event listener.\n   *\n   * @param add when `true`, event listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { dismiss, close } = this;\n    // istanbul ignore else @preserve\n    if (dismiss) action(dismiss, mouseclickEvent, close);\n  };\n\n  /** Remove the component from target element. */\n  dispose() {\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n","/**\n * Global namespace for most components active class.\n */\nconst activeClass = \"active\";\nexport default activeClass;\n","/**\n * Global namespace for most components `toggle` option.\n */\nconst dataBsToggle = \"data-bs-toggle\";\nexport default dataBsToggle;\n","/** @type {string} */\nconst buttonString = \"button\";\nexport default buttonString;\n","/** @type {string} */\nconst buttonComponent = \"Button\";\nexport default buttonComponent;\n","/* Native JavaScript for Bootstrap 5 | Button\n---------------------------------------------*/\nimport {\n  addClass,\n  ariaPressed,\n  getAttribute,\n  getInstance,\n  hasClass,\n  mouseclickEvent,\n  removeClass,\n  setAttribute,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport activeClass from \"../strings/activeClass\";\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport buttonString from \"../strings/buttonString\";\nimport buttonComponent from \"../strings/buttonComponent\";\n\nimport BaseComponent from \"./base-component\";\n\n// BUTTON PRIVATE GC\n// =================\nconst buttonSelector = `[${dataBsToggle}=\"${buttonString}\"]`;\n\n/**\n * Static method which returns an existing `Button` instance associated\n * to a target `Element`.\n */\nconst getButtonInstance = (element: HTMLElement) =>\n  getInstance<Button>(element, buttonComponent);\n\n/** A `Button` initialization callback. */\nconst buttonInitCallback = (element: HTMLElement) => new Button(element);\n\n// BUTTON DEFINITION\n// =================\n/** Creates a new `Button` instance. */\nexport default class Button extends BaseComponent {\n  static selector = buttonSelector;\n  static init = buttonInitCallback;\n  static getInstance = getButtonInstance;\n\n  isActive = false;\n\n  /**\n   * @param target usually a `.btn` element\n   */\n  constructor(target: HTMLElement | string) {\n    super(target);\n\n    // initialization element\n    const { element } = this;\n\n    // set initial state\n    this.isActive = hasClass(element, activeClass);\n    setAttribute(element, ariaPressed, String(!!this.isActive));\n\n    // add event listener\n    this._toggleEventListeners(true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return buttonComponent;\n  }\n\n  // BUTTON PUBLIC METHODS\n  // =====================\n  /**\n   * Toggles the state of the target button.\n   *\n   * @param e usually `click` Event object\n   */\n  toggle = (e?: Event) => {\n    if (e) e.preventDefault();\n\n    const { element, isActive } = this;\n    if (!hasClass(element, \"disabled\") && !getAttribute(element, \"disabled\")) {\n      const action = isActive ? removeClass : addClass;\n      action(element, activeClass);\n      setAttribute(element, ariaPressed, isActive ? \"false\" : \"true\");\n      this.isActive = hasClass(element, activeClass);\n    }\n  };\n\n  // BUTTON PRIVATE METHOD\n  // =====================\n  /**\n   * Toggles on/off the `click` event listener.\n   *\n   * @param add when `true`, event listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    action(this.element, mouseclickEvent, this.toggle);\n  };\n\n  /** Removes the `Button` component from the target element. */\n  dispose() {\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n","/**\n * Global namespace for most components `target` option.\n */\nconst dataBsTarget = \"data-bs-target\";\nexport default dataBsTarget;\n","/** @type {string} */\nconst carouselString = \"carousel\";\nexport default carouselString;\n","/** @type {string} */\nconst carouselComponent = \"Carousel\";\nexport default carouselComponent;\n","/**\n * Global namespace for most components `parent` option.\n */\nconst dataBsParent = \"data-bs-parent\";\nexport default dataBsParent;\n","/**\n * Global namespace for most components `container` option.\n */\nconst dataBsContainer = \"data-bs-container\";\nexport default dataBsContainer;\n","import {\n  closest,\n  getAttribute,\n  getDocument,\n  querySelector,\n} from \"@thednp/shorty\";\n\nimport dataBsTarget from \"../strings/dataBsTarget\";\nimport dataBsParent from \"../strings/dataBsParent\";\nimport dataBsContainer from \"../strings/dataBsContainer\";\n\n/**\n * Returns the `Element` that THIS one targets\n * via `data-bs-target`, `href`, `data-bs-parent` or `data-bs-container`.\n *\n * @param element the target element\n * @returns the query result\n */\nconst getTargetElement = (element: HTMLElement) => {\n  const targetAttr = [dataBsTarget, dataBsParent, dataBsContainer, \"href\"];\n  const doc = getDocument(element);\n\n  return targetAttr\n    .map((att) => {\n      const attValue = getAttribute(element, att);\n      if (attValue) {\n        return att === dataBsParent\n          ? closest(element, attValue)\n          : querySelector(attValue, doc);\n      }\n      return null;\n    })\n    .filter((x) => x)[0];\n};\n\nexport default getTargetElement;\n","/* Native JavaScript for Bootstrap 5 | Carousel\n----------------------------------------------- */\nimport {\n  addClass,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  dragstartEvent,\n  emulateTransitionEnd,\n  getAttribute,\n  getDocument,\n  getElementsByClassName,\n  getElementTransitionDuration,\n  getInstance,\n  hasClass,\n  isElementInScrollRange,\n  isHTMLElement,\n  isRTL,\n  keyArrowLeft,\n  keyArrowRight,\n  keydownEvent,\n  matches,\n  mouseclickEvent,\n  mouseenterEvent,\n  mouseleaveEvent,\n  ObjectAssign,\n  passiveHandler,\n  pointerdownEvent,\n  pointermoveEvent,\n  pointerupEvent,\n  querySelector,\n  querySelectorAll,\n  reflow,\n  removeClass,\n  Timer,\n  touchstartEvent,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport activeClass from \"../strings/activeClass\";\nimport dataBsTarget from \"../strings/dataBsTarget\";\nimport carouselString from \"../strings/carouselString\";\nimport carouselComponent from \"../strings/carouselComponent\";\nimport getTargetElement from \"../util/getTargetElement\";\nimport BaseComponent from \"./base-component\";\nimport type { CarouselEvent, CarouselOptions } from \"../interface/carousel\";\n\ntype CarouselEventProperties = {\n  relatedTarget: HTMLElement;\n  from: number;\n  to: number;\n  direction: \"left\" | \"right\";\n};\n\n// CAROUSEL PRIVATE GC\n// ===================\nconst carouselSelector = `[data-bs-ride=\"${carouselString}\"]`;\nconst carouselItem = `${carouselString}-item`;\nconst dataBsSlideTo = \"data-bs-slide-to\";\nconst dataBsSlide = \"data-bs-slide\";\nconst pausedClass = \"paused\";\n\nconst carouselDefaults: CarouselOptions = {\n  pause: \"hover\",\n  keyboard: false,\n  touch: true,\n  interval: 5000,\n};\n\n/**\n * Static method which returns an existing `Carousel` instance associated\n * to a target `Element`.\n */\nconst getCarouselInstance = (element: HTMLElement) =>\n  getInstance<Carousel>(element, carouselComponent);\n\n/**\n * A `Carousel` initialization callback.\n */\nconst carouselInitCallback = (element: HTMLElement) => new Carousel(element);\n\nlet startX = 0;\nlet currentX = 0;\nlet endX = 0;\n\n// CAROUSEL CUSTOM EVENTS\n// ======================\nconst carouselSlideEvent = createCustomEvent<\n  CarouselEventProperties,\n  CarouselEvent\n>(`slide.bs.${carouselString}`);\nconst carouselSlidEvent = createCustomEvent<\n  CarouselEventProperties,\n  CarouselEvent\n>(`slid.bs.${carouselString}`);\n\n// CAROUSEL EVENT HANDLERS\n// =======================\n/**\n * The `transitionend` event listener of the `Carousel`.\n *\n * @param self the `Carousel` instance\n */\nconst carouselTransitionEndHandler = (self: Carousel) => {\n  const { index, direction, element, slides, options } = self;\n\n  // istanbul ignore else @preserve\n  if (self.isAnimating) {\n    const activeItem = getActiveIndex(self);\n    const orientation = direction === \"left\" ? \"next\" : \"prev\";\n    const directionClass = direction === \"left\" ? \"start\" : \"end\";\n\n    addClass(slides[index], activeClass);\n    removeClass(slides[index], `${carouselItem}-${orientation}`);\n    removeClass(slides[index], `${carouselItem}-${directionClass}`);\n\n    removeClass(slides[activeItem], activeClass);\n    removeClass(slides[activeItem], `${carouselItem}-${directionClass}`);\n\n    dispatchEvent(element, carouselSlidEvent);\n    Timer.clear(element, dataBsSlide);\n\n    // must check if a previous instance is disposed\n    if (\n      self.cycle && !getDocument(element).hidden && options.interval &&\n      !self.isPaused\n    ) {\n      self.cycle();\n    }\n  }\n};\n\n/**\n * Handles the `mouseenter` events when *options.pause*\n * is set to `hover`.\n */\nfunction carouselPauseHandler(this: HTMLElement) {\n  const self = getCarouselInstance(this);\n  // istanbul ignore else @preserve\n  if (self && !self.isPaused && !Timer.get(this, pausedClass)) {\n    addClass(this, pausedClass);\n  }\n}\n\n/**\n * Handles the `mouseleave` events when *options.pause*\n * is set to `hover`.\n */\nfunction carouselResumeHandler(this: HTMLElement) {\n  const self = getCarouselInstance(this);\n  // istanbul ignore else @preserve\n  if (self && self.isPaused && !Timer.get(this, pausedClass)) {\n    self.cycle();\n  }\n}\n\n/**\n * Handles the `click` event for the `Carousel` indicators.\n *\n * @param e the `Event` object\n */\nfunction carouselIndicatorHandler(this: HTMLElement, e: MouseEvent) {\n  e.preventDefault();\n  const element =\n    (closest(this, carouselSelector) || getTargetElement(this)) as HTMLElement;\n  const self = getCarouselInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self && !self.isAnimating) {\n    const newIndex = +(\n      getAttribute(this, dataBsSlideTo) ||\n      // istanbul ignore next @preserve\n      0\n    );\n\n    // istanbul ignore else @preserve\n    if (\n      this &&\n      !hasClass(this, activeClass) && // event target is not active\n      !Number.isNaN(newIndex)\n    ) {\n      // AND has the specific attribute\n      self.to(newIndex); // do the slide\n    }\n  }\n}\n\n/**\n * Handles the `click` event for the `Carousel` arrows.\n *\n * @param e the `Event` object\n */\nfunction carouselControlsHandler(this: HTMLElement, e: MouseEvent) {\n  e.preventDefault();\n  const element = closest(this, carouselSelector) ||\n    (getTargetElement(this) as HTMLElement);\n  const self = getCarouselInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self && !self.isAnimating) {\n    const orientation = getAttribute(this, dataBsSlide);\n\n    // istanbul ignore else @preserve\n    if (orientation === \"next\") {\n      self.next();\n    } else if (orientation === \"prev\") {\n      self.prev();\n    }\n  }\n}\n\n/**\n * Handles the keyboard `keydown` event for the visible `Carousel` elements.\n *\n * @param e the `Event` object\n */\nconst carouselKeyHandler = (\n  { code, target }: KeyboardEvent & { target: Node },\n) => {\n  const doc = getDocument(target);\n  const [element] = [...querySelectorAll(carouselSelector, doc)].filter((x) =>\n    isElementInScrollRange(x)\n  );\n  const self = getCarouselInstance(element);\n\n  // istanbul ignore next @preserve\n  if (self && !self.isAnimating && !/textarea|input/i.test(target.nodeName)) {\n    const RTL = isRTL(element);\n    const arrowKeyNext = !RTL ? keyArrowRight : keyArrowLeft;\n    const arrowKeyPrev = !RTL ? keyArrowLeft : keyArrowRight;\n\n    // istanbul ignore else @preserve\n    if (code === arrowKeyPrev) self.prev();\n    else if (code === arrowKeyNext) self.next();\n  }\n};\n\n// CAROUSEL TOUCH HANDLERS\n// =======================\n/**\n * Prevents the `touchstart` and `dragstart` events for the `Carousel` element.\n *\n * @param e the `Event` object\n */\nfunction carouselDragHandler(this: HTMLElement, e: DragEvent | TouchEvent) {\n  const { target } = e;\n  const self = getCarouselInstance(this);\n\n  // istanbul ignore next @preserve\n  if (\n    self &&\n    self.isTouch &&\n    ((self.indicator && !self.indicator.contains(target as Node)) ||\n      !self.controls.includes(target as HTMLElement))\n  ) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    e.preventDefault();\n  }\n}\n\n// CAROUSEL POINTER HANDLERS\n// =========================\n/**\n * Handles the `pointerdown` event for the `Carousel` element.\n *\n * @param e the `Event` object\n */\nfunction carouselPointerDownHandler(this: HTMLElement, e: PointerEvent) {\n  const { target } = e;\n  const self = getCarouselInstance(this);\n\n  // istanbul ignore else @preserve\n  if (self && !self.isAnimating && !self.isTouch) {\n    // filter pointer event on controls & indicators\n    const { controls, indicators } = self;\n    // istanbul ignore else @preserve\n    if (\n      ![...controls, ...indicators].every((el) =>\n        el === target || el.contains(target as Node)\n      )\n    ) {\n      startX = e.pageX;\n\n      // istanbul ignore else @preserve\n      if (this.contains(target as Node)) {\n        self.isTouch = true;\n        toggleCarouselTouchHandlers(self, true);\n      }\n    }\n  }\n}\n\n/**\n * Handles the `pointermove` event for the `Carousel` element.\n *\n * @param e\n */\nconst carouselPointerMoveHandler = (e: PointerEvent) => {\n  currentX = e.pageX;\n};\n\n/**\n * Handles the `pointerup` event for the `Carousel` element.\n *\n * @param e\n */\nconst carouselPointerUpHandler = (e: PointerEvent) => {\n  const { target } = e;\n  const doc = getDocument(target as Node);\n  const self = [...querySelectorAll(carouselSelector, doc)]\n    .map((c) => getCarouselInstance(c) as Carousel)\n    .find((i) => i.isTouch) as Carousel;\n\n  // impossible to satisfy\n  // istanbul ignore else @preserve\n  if (self) {\n    const { element, index } = self;\n    const RTL = isRTL(element);\n    endX = e.pageX;\n\n    self.isTouch = false;\n    toggleCarouselTouchHandlers(self);\n\n    if (\n      !doc.getSelection()?.toString().length &&\n      element.contains(target as HTMLElement) &&\n      Math.abs(startX - endX) > 120\n    ) {\n      // determine next index to slide to\n      // istanbul ignore else @preserve\n      if (currentX < startX) {\n        self.to(index + (RTL ? -1 : 1));\n      } else if (currentX > startX) {\n        self.to(index + (RTL ? 1 : -1));\n      }\n    }\n\n    // reset pointer position\n    startX = 0;\n    currentX = 0;\n    endX = 0;\n  }\n};\n\n// CAROUSEL PRIVATE METHODS\n// ========================\n/**\n * Sets active indicator for the `Carousel` instance.\n *\n * @param self the `Carousel` instance\n * @param index the index of the new active indicator\n */\nconst activateCarouselIndicator = (self: Carousel, index: number) => {\n  const { indicators } = self;\n  [...indicators].forEach((x) => removeClass(x, activeClass));\n\n  // istanbul ignore else @preserve\n  if (self.indicators[index]) addClass(indicators[index], activeClass);\n};\n\n/**\n * Toggles the pointer event listeners for a given `Carousel` instance.\n *\n * @param self the `Carousel` instance\n * @param add when `TRUE` event listeners are added\n */\nconst toggleCarouselTouchHandlers = (self: Carousel, add?: boolean) => {\n  const { element } = self;\n  const action = add ? addListener : removeListener;\n  action(\n    getDocument(element),\n    pointermoveEvent,\n    carouselPointerMoveHandler,\n    passiveHandler,\n  );\n  action(\n    getDocument(element),\n    pointerupEvent,\n    carouselPointerUpHandler,\n    passiveHandler,\n  );\n};\n\n/**\n * Returns the index of the current active item.\n *\n * @param self the `Carousel` instance\n * @returns the query result\n */\nconst getActiveIndex = (self: Carousel) => {\n  const { slides, element } = self;\n  const activeItem = querySelector(`.${carouselItem}.${activeClass}`, element);\n  return isHTMLElement(activeItem) ? [...slides].indexOf(activeItem) : -1;\n};\n\n// CAROUSEL DEFINITION\n// ===================\n/** Creates a new `Carousel` instance. */\nexport default class Carousel extends BaseComponent {\n  static selector = carouselSelector;\n  static init = carouselInitCallback;\n  static getInstance = getCarouselInstance;\n  declare options: CarouselOptions;\n  declare direction: \"right\" | \"left\";\n  declare index: number;\n  declare isTouch: boolean;\n  declare slides: HTMLCollectionOf<HTMLElement>;\n  declare controls: HTMLElement[];\n  declare indicator: HTMLElement | null;\n  declare indicators: HTMLElement[];\n\n  /**\n   * @param target mostly a `.carousel` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<CarouselOptions>) {\n    super(target, config);\n\n    // initialization element\n    const { element } = this;\n\n    // additional properties\n    this.direction = isRTL(element) ? \"right\" : \"left\";\n    this.isTouch = false;\n\n    // carousel elements\n    // a LIVE collection is prefferable\n    this.slides = getElementsByClassName(carouselItem, element);\n    const { slides } = this;\n\n    // invalidate when not enough items\n    // no need to go further\n    if (slides.length >= 2) {\n      const activeIndex = getActiveIndex(this);\n      // recover item from disposed instance\n      const transitionItem = [...slides].find((s) =>\n        matches(s, `.${carouselItem}-next,.${carouselItem}-next`)\n      );\n      this.index = activeIndex;\n\n      // external controls must be within same document context\n      const doc = getDocument(element);\n\n      this.controls = [\n        ...querySelectorAll(`[${dataBsSlide}]`, element),\n        ...querySelectorAll(\n          `[${dataBsSlide}][${dataBsTarget}=\"#${element.id}\"]`,\n          doc,\n        ),\n      ].filter((c, i, ar) => i === ar.indexOf(c));\n\n      this.indicator = querySelector(`.${carouselString}-indicators`, element);\n\n      // a LIVE collection is prefferable\n      this.indicators = [\n        ...(this.indicator\n          ? querySelectorAll(`[${dataBsSlideTo}]`, this.indicator)\n          // istanbul ignore next @preserve\n          : []),\n        ...querySelectorAll(\n          `[${dataBsSlideTo}][${dataBsTarget}=\"#${element.id}\"]`,\n          doc,\n        ),\n      ].filter((c, i, ar) => i === ar.indexOf(c));\n\n      // set JavaScript and DATA API options\n      const { options } = this;\n\n      // don't use TRUE as interval, it's actually 0, use the default 5000ms better\n      this.options.interval = options.interval === true\n        ? carouselDefaults.interval\n        : options.interval;\n\n      // set first slide active if none\n      // istanbul ignore next @preserve - impossible to test\n      if (transitionItem) {\n        this.index = [...slides].indexOf(transitionItem);\n      } else if (activeIndex < 0) {\n        this.index = 0;\n        addClass(slides[0], activeClass);\n        if (this.indicators.length) activateCarouselIndicator(this, 0);\n      }\n\n      // istanbul ignore else @preserve\n      if (this.indicators.length) activateCarouselIndicator(this, this.index);\n\n      // attach event handlers\n      this._toggleEventListeners(true);\n\n      // start to cycle if interval is set\n      if (options.interval) this.cycle();\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return carouselComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return carouselDefaults;\n  }\n\n  /**\n   * Check if instance is paused.\n   */\n  get isPaused() {\n    return hasClass(this.element, pausedClass);\n  }\n\n  /**\n   * Check if instance is animating.\n   */\n  get isAnimating() {\n    return querySelector(\n      `.${carouselItem}-next,.${carouselItem}-prev`,\n      this.element,\n    ) !== null;\n  }\n\n  // CAROUSEL PUBLIC METHODS\n  // =======================\n  /** Slide automatically through items. */\n  cycle() {\n    const { element, options, isPaused, index } = this;\n\n    Timer.clear(element, carouselString);\n    if (isPaused) {\n      Timer.clear(element, pausedClass);\n      removeClass(element, pausedClass);\n    }\n\n    Timer.set(\n      element,\n      () => {\n        // it's very important to check self.element\n        // where instance might have been disposed\n        // istanbul ignore else @preserve\n        if (\n          this.element && !this.isPaused && !this.isTouch &&\n          isElementInScrollRange(element)\n        ) {\n          this.to(index + 1);\n        }\n      },\n      options.interval as number,\n      carouselString,\n    );\n  }\n\n  /** Pause the automatic cycle. */\n  pause() {\n    const { element, options } = this;\n    // istanbul ignore else @preserve\n    if (!this.isPaused && options.interval) {\n      addClass(element, pausedClass);\n      Timer.set(\n        element,\n        () => {\n          /* ESLint is now happy */\n        },\n        1,\n        pausedClass,\n      );\n    }\n  }\n\n  /** Slide to the next item. */\n  next() {\n    // istanbul ignore else @preserve\n    if (!this.isAnimating) {\n      this.to(this.index + 1);\n    }\n  }\n\n  /** Slide to the previous item. */\n  prev() {\n    // istanbul ignore else @preserve\n    if (!this.isAnimating) {\n      this.to(this.index - 1);\n    }\n  }\n\n  /**\n   * Jump to the item with the `idx` index.\n   *\n   * @param idx the index of the item to jump to\n   */\n  to(idx: number) {\n    const { element, slides, options } = this;\n    const activeItem = getActiveIndex(this);\n    const RTL = isRTL(element);\n    let next = idx;\n\n    // when controled via methods, make sure to check again\n    // first return if we're on the same item #227\n    // `to()` must be SPAM protected by Timer\n    if (\n      !this.isAnimating && activeItem !== next &&\n      !Timer.get(element, dataBsSlide)\n    ) {\n      // determine transition direction\n      // istanbul ignore else @preserve\n      if (\n        activeItem < next || (activeItem === 0 && next === slides.length - 1)\n      ) {\n        this.direction = RTL ? \"right\" : \"left\"; // next\n      } else if (\n        activeItem > next || (activeItem === slides.length - 1 && next === 0)\n      ) {\n        this.direction = RTL ? \"left\" : \"right\"; // prev\n      }\n      const { direction } = this;\n\n      // find the right next index\n      if (next < 0) {\n        next = slides.length - 1;\n      } else if (next >= slides.length) {\n        next = 0;\n      }\n\n      // orientation, class name, eventProperties\n      const orientation = direction === \"left\" ? \"next\" : \"prev\";\n      const directionClass = direction === \"left\" ? \"start\" : \"end\";\n\n      const eventProperties = {\n        relatedTarget: slides[next],\n        from: activeItem,\n        to: next,\n        direction,\n      };\n\n      // update event properties\n      ObjectAssign(carouselSlideEvent, eventProperties);\n      ObjectAssign(carouselSlidEvent, eventProperties);\n\n      // discontinue when prevented\n      dispatchEvent(element, carouselSlideEvent);\n      if (!carouselSlideEvent.defaultPrevented) {\n        // update index\n        this.index = next;\n        activateCarouselIndicator(this, next);\n\n        if (\n          getElementTransitionDuration(slides[next]) &&\n          hasClass(element, \"slide\")\n        ) {\n          Timer.set(\n            element,\n            () => {\n              addClass(slides[next], `${carouselItem}-${orientation}`);\n              reflow(slides[next]);\n              addClass(slides[next], `${carouselItem}-${directionClass}`);\n              addClass(slides[activeItem], `${carouselItem}-${directionClass}`);\n\n              // the instance might get diposed mid-animation\n              emulateTransitionEnd(\n                slides[next],\n                () =>\n                  this.slides && this.slides.length &&\n                  carouselTransitionEndHandler(this),\n              );\n            },\n            0,\n            dataBsSlide,\n          );\n        } else {\n          addClass(slides[next], activeClass);\n          removeClass(slides[activeItem], activeClass);\n\n          Timer.set(\n            element,\n            () => {\n              Timer.clear(element, dataBsSlide);\n              // check for element, might have been disposed\n              // istanbul ignore else @preserve\n              if (element && options.interval && !this.isPaused) {\n                this.cycle();\n              }\n\n              dispatchEvent(element, carouselSlidEvent);\n            },\n            0,\n            dataBsSlide,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Toggles all event listeners for the `Carousel` instance.\n   *\n   * @param add when `TRUE` event listeners are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const { element, options, slides, controls, indicators } = this;\n    const { touch, pause, interval, keyboard } = options;\n    const action = add ? addListener : removeListener;\n\n    if (pause && interval) {\n      action(element, mouseenterEvent, carouselPauseHandler);\n      action(element, mouseleaveEvent, carouselResumeHandler);\n    }\n\n    if (touch && slides.length > 2) {\n      action(\n        element,\n        pointerdownEvent,\n        carouselPointerDownHandler,\n        passiveHandler,\n      );\n      action(element, touchstartEvent, carouselDragHandler, { passive: false });\n      action(element, dragstartEvent, carouselDragHandler, { passive: false });\n    }\n\n    // istanbul ignore else @preserve\n    if (controls.length) {\n      controls.forEach((arrow) => {\n        // istanbul ignore else @preserve\n        if (arrow) action(arrow, mouseclickEvent, carouselControlsHandler);\n      });\n    }\n\n    // istanbul ignore else @preserve\n    if (indicators.length) {\n      indicators.forEach((indicator) => {\n        action(indicator, mouseclickEvent, carouselIndicatorHandler);\n      });\n    }\n\n    if (keyboard) {\n      action(getDocument(element), keydownEvent, carouselKeyHandler);\n    }\n  };\n\n  /** Remove `Carousel` component from target. */\n  dispose() {\n    const { isAnimating } = this;\n\n    const clone = {\n      ...this,\n      isAnimating,\n    };\n    this._toggleEventListeners();\n    super.dispose();\n\n    // istanbul ignore next @preserve - impossible to test in playwright\n    if (clone.isAnimating) {\n      emulateTransitionEnd(clone.slides[clone.index], () => {\n        carouselTransitionEndHandler(clone);\n      });\n    }\n  }\n}\n","/**\n * Global namespace for most components `collapsing` class.\n * As used by `Collapse` / `Tab`.\n */\nconst collapsingClass = \"collapsing\";\nexport default collapsingClass;\n","/** @type {string} */\nconst collapseString = \"collapse\";\nexport default collapseString;\n","/** @type {string} */\nconst collapseComponent = \"Collapse\";\nexport default collapseComponent;\n","/* Native JavaScript for Bootstrap 5 | Collapse\n----------------------------------------------- */\nimport {\n  addClass,\n  ariaExpanded,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  getDocument,\n  getInstance,\n  hasClass,\n  isHTMLElement,\n  isString,\n  mouseclickEvent,\n  noop,\n  querySelector,\n  querySelectorAll,\n  reflow,\n  removeClass,\n  setAttribute,\n  setElementStyle,\n  Timer,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport collapsingClass from \"../strings/collapsingClass\";\nimport showClass from \"../strings/showClass\";\nimport collapseString from \"../strings/collapseString\";\nimport collapseComponent from \"../strings/collapseComponent\";\n\nimport getTargetElement from \"../util/getTargetElement\";\nimport BaseComponent from \"./base-component\";\nimport type { CollapseEvent, CollapseOptions } from \"../interface/collapse\";\n\n// COLLAPSE GC\n// ===========\nconst collapseSelector = `.${collapseString}`;\nconst collapseToggleSelector = `[${dataBsToggle}=\"${collapseString}\"]`;\nconst collapseDefaults = { parent: null };\n\n/**\n * Static method which returns an existing `Collapse` instance associated\n * to a target `Element`.\n */\nconst getCollapseInstance = (element: HTMLElement) =>\n  getInstance<Collapse>(element, collapseComponent);\n\n/**\n * A `Collapse` initialization callback.\n */\nconst collapseInitCallback = (element: HTMLElement) => new Collapse(element);\n\n// COLLAPSE CUSTOM EVENTS\n// ======================\nconst showCollapseEvent = createCustomEvent<\n  Record<string, never>,\n  CollapseEvent\n>(`show.bs.${collapseString}`);\nconst shownCollapseEvent = createCustomEvent<\n  Record<string, never>,\n  CollapseEvent\n>(`shown.bs.${collapseString}`);\nconst hideCollapseEvent = createCustomEvent<\n  Record<string, never>,\n  CollapseEvent\n>(`hide.bs.${collapseString}`);\nconst hiddenCollapseEvent = createCustomEvent<\n  Record<string, never>,\n  CollapseEvent\n>(`hidden.bs.${collapseString}`);\n\n// COLLAPSE PRIVATE METHODS\n// ========================\n/**\n * Expand the designated `Element`.\n *\n * @param self the `Collapse` instance\n */\nconst expandCollapse = (self: Collapse) => {\n  const { element, parent, triggers } = self;\n\n  dispatchEvent(element, showCollapseEvent);\n  if (!showCollapseEvent.defaultPrevented) {\n    Timer.set(element, noop, 17);\n    if (parent) Timer.set(parent, noop, 17);\n\n    addClass(element, collapsingClass);\n    removeClass(element, collapseString);\n\n    setElementStyle(element, { height: `${element.scrollHeight}px` });\n\n    emulateTransitionEnd(element, () => {\n      Timer.clear(element);\n      if (parent) Timer.clear(parent);\n\n      triggers.forEach((btn) => setAttribute(btn, ariaExpanded, \"true\"));\n\n      removeClass(element, collapsingClass);\n      addClass(element, collapseString);\n      addClass(element, showClass);\n\n      setElementStyle(element, { height: \"\" });\n\n      dispatchEvent(element, shownCollapseEvent);\n    });\n  }\n};\n\n/**\n * Collapse the designated `Element`.\n *\n * @param self the `Collapse` instance\n */\nconst collapseContent = (self: Collapse) => {\n  const { element, parent, triggers } = self;\n\n  dispatchEvent(element, hideCollapseEvent);\n\n  if (!hideCollapseEvent.defaultPrevented) {\n    Timer.set(element, noop, 17);\n    if (parent) Timer.set(parent, noop, 17);\n\n    setElementStyle(element, { height: `${element.scrollHeight}px` });\n\n    removeClass(element, collapseString);\n    removeClass(element, showClass);\n    addClass(element, collapsingClass);\n\n    reflow(element);\n    setElementStyle(element, { height: \"0px\" });\n\n    emulateTransitionEnd(element, () => {\n      Timer.clear(element);\n      // istanbul ignore else @preserve\n      if (parent) Timer.clear(parent);\n\n      triggers.forEach((btn) => setAttribute(btn, ariaExpanded, \"false\"));\n\n      removeClass(element, collapsingClass);\n      addClass(element, collapseString);\n\n      setElementStyle(element, { height: \"\" });\n\n      dispatchEvent(element, hiddenCollapseEvent);\n    });\n  }\n};\n\n// COLLAPSE EVENT HANDLER\n// ======================\n/**\n * Handles the `click` event for the `Collapse` instance.\n *\n * @param e the `Event` object\n */\nconst collapseClickHandler = (e: MouseEvent) => {\n  const { target } = e; // our target is `HTMLElement`\n  const trigger = target &&\n    closest(target as HTMLElement, collapseToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getCollapseInstance(element);\n  // istanbul ignore else @preserve\n  if (self) self.toggle();\n\n  // event target is anchor link #398\n  if (trigger && trigger.tagName === \"A\") e.preventDefault();\n};\n\n// COLLAPSE DEFINITION\n// ===================\n\n/** Returns a new `Colapse` instance. */\nexport default class Collapse extends BaseComponent {\n  static selector = collapseSelector;\n  static init = collapseInitCallback;\n  static getInstance = getCollapseInstance;\n  declare options: CollapseOptions;\n  declare parent: HTMLElement | null;\n  declare triggers: HTMLElement[];\n\n  /**\n   * @param target and `Element` that matches the selector\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<CollapseOptions>) {\n    super(target, config);\n\n    // initialization element\n    const { element, options } = this;\n    const doc = getDocument(element);\n\n    // set triggering elements\n    this.triggers = [...querySelectorAll(collapseToggleSelector, doc)].filter(\n      (btn) => getTargetElement(btn) === element,\n    );\n\n    // set parent accordion\n    this.parent = isHTMLElement(options.parent)\n      ? options.parent\n      : isString(options.parent)\n      ? getTargetElement(element) || querySelector(options.parent, doc)\n      : null;\n\n    // add event listeners\n    this._toggleEventListeners(true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return collapseComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return collapseDefaults;\n  }\n\n  // COLLAPSE PUBLIC METHODS\n  // =======================\n  /** Hides the collapse. */\n  hide() {\n    const { triggers, element } = this;\n    // istanbul ignore else @preserve\n    if (!Timer.get(element)) {\n      collapseContent(this);\n      // istanbul ignore else @preserve\n      if (triggers.length) {\n        triggers.forEach((btn) => addClass(btn, `${collapseString}d`));\n      }\n    }\n  }\n\n  /** Shows the collapse. */\n  show() {\n    const { element, parent, triggers } = this;\n    let activeCollapse;\n    let activeCollapseInstance;\n\n    if (parent) {\n      activeCollapse = [\n        ...querySelectorAll(`.${collapseString}.${showClass}`, parent),\n      ].find((i) => getCollapseInstance(i));\n      activeCollapseInstance = activeCollapse &&\n        getCollapseInstance(activeCollapse);\n    }\n\n    if ((!parent || !Timer.get(parent)) && !Timer.get(element)) {\n      if (activeCollapseInstance && activeCollapse !== element) {\n        collapseContent(activeCollapseInstance);\n        activeCollapseInstance.triggers.forEach((btn) => {\n          addClass(btn, `${collapseString}d`);\n        });\n      }\n\n      expandCollapse(this);\n      // istanbul ignore else @preserve\n      if (triggers.length) {\n        triggers.forEach((btn) => removeClass(btn, `${collapseString}d`));\n      }\n    }\n  }\n\n  /** Toggles the visibility of the collapse. */\n  toggle() {\n    if (!hasClass(this.element, showClass)) this.show();\n    else this.hide();\n  }\n\n  /**\n   * Toggles on/off the event listener(s) of the `Collapse` instance.\n   *\n   * @param add when `true`, the event listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { triggers } = this;\n\n    // istanbul ignore else @preserve\n    if (triggers.length) {\n      triggers.forEach((btn) =>\n        action(btn, mouseclickEvent, collapseClickHandler)\n      );\n    }\n  };\n\n  /** Remove the `Collapse` component from the target `Element`. */\n  dispose() {\n    this._toggleEventListeners();\n\n    super.dispose();\n  }\n}\n","/**\n * Global namespace for `Dropdown` types / classes.\n */\nconst dropdownMenuClasses = [\"dropdown\", \"dropup\", \"dropstart\", \"dropend\"];\nexport default dropdownMenuClasses;\n","/** @type {string} */\nconst dropdownComponent = \"Dropdown\";\nexport default dropdownComponent;\n","/**\n * Global namespace for `.dropdown-menu`.\n */\nconst dropdownMenuClass = \"dropdown-menu\";\nexport default dropdownMenuClass;\n","import { closest, getAttribute, hasAttribute } from \"@thednp/shorty\";\n\n/**\n * Checks if an *event.target* or its parent has an `href=\"#\"` value.\n * We need to prevent jumping around onclick, don't we?\n *\n * @param element the target element\n * @returns the query result\n */\nconst isEmptyAnchor = (element: HTMLElement) => {\n  // `EventTarget` must be `HTMLElement`\n  const parentAnchor = closest(element, \"A\");\n  return (\n    (element.tagName === \"A\" &&\n      // anchor href starts with #\n      hasAttribute(element, \"href\") &&\n      (getAttribute(element, \"href\") as string).slice(-1) === \"#\") ||\n    // OR a child of an anchor with href starts with #\n    (parentAnchor &&\n      hasAttribute(parentAnchor, \"href\") &&\n      (getAttribute(parentAnchor, \"href\") as string).slice(-1) === \"#\")\n  );\n};\nexport default isEmptyAnchor;\n","/* Native JavaScript for Bootstrap 5 | Dropdown\n----------------------------------------------- */\nimport {\n  addClass,\n  ariaExpanded,\n  closest,\n  createCustomEvent,\n  CSS4Declaration,\n  dispatchEvent,\n  focus,\n  focusEvent,\n  getAttribute,\n  getBoundingClientRect,\n  getDocument,\n  getDocumentElement,\n  getElementsByClassName,\n  getElementStyle,\n  getInstance,\n  hasClass,\n  isHTMLElement,\n  isRTL,\n  keyArrowDown,\n  keyArrowUp,\n  keydownEvent,\n  keyEscape,\n  keyupEvent,\n  mouseclickEvent,\n  mousedownEvent,\n  ObjectAssign,\n  removeClass,\n  setAttribute,\n  setElementStyle,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport showClass from \"../strings/showClass\";\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport dropdownClasses from \"../strings/dropdownClasses\";\nimport dropdownComponent from \"../strings/dropdownComponent\";\nimport dropdownMenuClass from \"../strings/dropdownMenuClass\";\n\nimport isEmptyAnchor from \"../util/isEmptyAnchor\";\nimport BaseComponent from \"./base-component\";\nimport type { DropdownEvent, DropdownOptions } from \"../interface/dropdown\";\n\n// DROPDOWN PRIVATE GC\n// ===================\nconst [dropdownString, dropupString, dropstartString, dropendString] =\n  dropdownClasses;\nconst dropdownSelector = `[${dataBsToggle}=\"${dropdownString}\"]`;\n\n/**\n * Static method which returns an existing `Dropdown` instance associated\n * to a target `Element`.\n */\nconst getDropdownInstance = (element: HTMLElement) =>\n  getInstance<Dropdown>(element, dropdownComponent);\n\n/**\n * A `Dropdown` initialization callback.\n */\nconst dropdownInitCallback = (element: HTMLElement) => new Dropdown(element);\n\n// DROPDOWN PRIVATE GC\n// ===================\n// const dropdownMenuStartClass = `${dropdownMenuClass}-start`;\nconst dropdownMenuEndClass = `${dropdownMenuClass}-end`;\nconst verticalClass = [dropdownString, dropupString];\nconst horizontalClass = [dropstartString, dropendString];\nconst menuFocusTags = [\"A\", \"BUTTON\"];\n\nconst dropdownDefaults = {\n  offset: 5, // [number] 5(px)\n  display: \"dynamic\", // [dynamic|static]\n};\n\ntype DropdownEventProps = { relatedTarget: HTMLElement };\n\n// DROPDOWN CUSTOM EVENTS\n// ======================\nconst showDropdownEvent = createCustomEvent<DropdownEventProps, DropdownEvent>(\n  `show.bs.${dropdownString}`,\n);\nconst shownDropdownEvent = createCustomEvent<DropdownEventProps, DropdownEvent>(\n  `shown.bs.${dropdownString}`,\n);\nconst hideDropdownEvent = createCustomEvent<DropdownEventProps, DropdownEvent>(\n  `hide.bs.${dropdownString}`,\n);\nconst hiddenDropdownEvent = createCustomEvent<\n  DropdownEventProps,\n  DropdownEvent\n>(`hidden.bs.${dropdownString}`);\nconst updatedDropdownEvent = createCustomEvent<\n  DropdownEventProps,\n  DropdownEvent\n>(`updated.bs.${dropdownString}`);\n\n// DROPDOWN PRIVATE METHODS\n// ========================\n/**\n * Apply specific style or class names to a `.dropdown-menu` to automatically\n * accomodate the layout and the page scroll.\n *\n * @param self the `Dropdown` instance\n */\nconst styleDropdown = (self: Dropdown) => {\n  const { element, menu, parentElement, options } = self;\n  const { offset } = options;\n\n  // don't apply any style on mobile view\n  // istanbul ignore else @preserve: this test requires a navbar\n  if (getElementStyle(menu, \"position\") !== \"static\") {\n    const RTL = isRTL(element);\n    // const menuStart = hasClass(menu, dropdownMenuStartClass);\n    const menuEnd = hasClass(menu, dropdownMenuEndClass);\n\n    // reset menu offset and position\n    const resetProps = [\"margin\", \"top\", \"bottom\", \"left\", \"right\"];\n    resetProps.forEach((p) => {\n      // menu.style[p] = '';\n      const style: { [key: string]: string } = {};\n      style[p] = \"\";\n      setElementStyle(menu, style);\n    });\n\n    // set initial position class\n    // take into account .btn-group parent as .dropdown\n    // this requires navbar/btn-group/input-group\n    let positionClass = dropdownClasses.find((c) =>\n      hasClass(parentElement, c)\n    ) ||\n      // istanbul ignore next @preserve: fallback position\n      dropdownString;\n\n    const dropdownMargin: { [key: string]: number[] } = {\n      dropdown: [offset, 0, 0],\n      dropup: [0, 0, offset],\n      dropstart: RTL ? [-1, 0, 0, offset] : [-1, offset, 0],\n      dropend: RTL ? [-1, offset, 0] : [-1, 0, 0, offset],\n    };\n\n    const dropdownPosition: { [key: string]: Partial<CSS4Declaration> } = {\n      dropdown: { top: \"100%\" },\n      dropup: { top: \"auto\", bottom: \"100%\" },\n      dropstart: RTL\n        ? { left: \"100%\", right: \"auto\" }\n        : { left: \"auto\", right: \"100%\" },\n      dropend: RTL\n        ? { left: \"auto\", right: \"100%\" }\n        : { left: \"100%\", right: \"auto\" },\n      menuStart: RTL\n        ? { right: \"0\", left: \"auto\" }\n        : { right: \"auto\", left: \"0\" },\n      menuEnd: RTL\n        ? { right: \"auto\", left: \"0\" }\n        : { right: \"0\", left: \"auto\" },\n    };\n\n    const { offsetWidth: menuWidth, offsetHeight: menuHeight } = menu;\n\n    const { clientWidth, clientHeight } = getDocumentElement(element);\n    const {\n      left: targetLeft,\n      top: targetTop,\n      width: targetWidth,\n      height: targetHeight,\n    } = getBoundingClientRect(element);\n\n    // dropstart | dropend\n    const leftFullExceed = targetLeft - menuWidth - offset < 0;\n    // dropend\n    const rightFullExceed =\n      targetLeft + menuWidth + targetWidth + offset >= clientWidth;\n    // dropstart | dropend\n    const bottomExceed = targetTop + menuHeight + offset >= clientHeight;\n    // dropdown\n    const bottomFullExceed =\n      targetTop + menuHeight + targetHeight + offset >= clientHeight;\n    // dropup\n    const topExceed = targetTop - menuHeight - offset < 0;\n    // dropdown / dropup\n    const leftExceed = ((!RTL && menuEnd) || (RTL && !menuEnd)) &&\n      targetLeft + targetWidth - menuWidth < 0;\n    const rightExceed = ((RTL && menuEnd) || (!RTL && !menuEnd)) &&\n      targetLeft + menuWidth >= clientWidth;\n\n    // recompute position\n    // handle RTL as well\n    if (\n      horizontalClass.includes(positionClass) && leftFullExceed &&\n      rightFullExceed\n    ) {\n      positionClass = dropdownString;\n    }\n    if (\n      positionClass === dropstartString &&\n      (!RTL ? leftFullExceed : rightFullExceed)\n    ) {\n      positionClass = dropendString;\n    }\n    if (\n      positionClass === dropendString &&\n      (RTL ? leftFullExceed : rightFullExceed)\n    ) {\n      positionClass = dropstartString;\n    }\n    if (positionClass === dropupString && topExceed && !bottomFullExceed) {\n      positionClass = dropdownString;\n    }\n    if (positionClass === dropdownString && bottomFullExceed && !topExceed) {\n      positionClass = dropupString;\n    }\n\n    // override position for horizontal classes\n    if (horizontalClass.includes(positionClass) && bottomExceed) {\n      ObjectAssign(dropdownPosition[positionClass], {\n        top: \"auto\",\n        bottom: 0,\n      });\n    }\n\n    // override position for vertical classes\n    if (verticalClass.includes(positionClass) && (leftExceed || rightExceed)) {\n      // don't realign when menu is wider than window\n      // in both RTL and non-RTL readability is KING\n      let posAjust:\n        | { left: \"auto\" | number; right: \"auto\" | number }\n        | undefined = { left: \"auto\", right: \"auto\" };\n      // istanbul ignore else @preserve\n      if (!leftExceed && rightExceed && !RTL) {\n        posAjust = { left: \"auto\", right: 0 };\n      }\n      // istanbul ignore else @preserve\n      if (leftExceed && !rightExceed && RTL) {\n        posAjust = { left: 0, right: \"auto\" };\n      }\n      // istanbul ignore else @preserve\n      if (posAjust) {\n        ObjectAssign(dropdownPosition[positionClass], posAjust);\n      }\n    }\n\n    const margins: number[] = dropdownMargin[positionClass];\n    setElementStyle(menu, {\n      ...dropdownPosition[positionClass],\n      margin: `${margins.map((x) => (x ? `${x}px` : x)).join(\" \")}`,\n    });\n\n    // override dropdown-menu-start | dropdown-menu-end\n    if (verticalClass.includes(positionClass) && menuEnd) {\n      // istanbul ignore else @preserve\n      if (menuEnd) {\n        const endAdjust = (!RTL && leftExceed) || (RTL && rightExceed)\n          ? \"menuStart\"\n          // istanbul ignore next @preserve\n          : \"menuEnd\";\n        setElementStyle(menu, dropdownPosition[endAdjust]);\n      }\n    }\n    // trigger updated event\n    dispatchEvent(parentElement, updatedDropdownEvent);\n  }\n};\n\n/**\n * Returns an `Array` of focusable items in the given dropdown-menu.\n *\n * @param menu the target menu\n * @returns all children of the dropdown menu\n */\nconst getMenuItems = (menu: HTMLElement) => {\n  return [...menu.children]\n    .map((c) => {\n      if (c && menuFocusTags.includes(c.tagName)) return c;\n      const { firstElementChild } = c;\n      if (\n        firstElementChild && menuFocusTags.includes(firstElementChild.tagName)\n      ) {\n        return firstElementChild;\n      }\n      return null;\n    })\n    .filter((c) => c);\n};\n\n/**\n * Toggles on/off the listeners for the events that close the dropdown\n * as well as event that request a new position for the dropdown.\n *\n * @param {Dropdown} self the `Dropdown` instance\n */\nconst toggleDropdownDismiss = (self: Dropdown) => {\n  const { element, options, menu } = self;\n  const action = self.open ? addListener : removeListener;\n  const doc = getDocument(element);\n\n  action(doc, mouseclickEvent, dropdownDismissHandler);\n  action(doc, focusEvent, dropdownDismissHandler);\n  action(doc, keydownEvent, dropdownPreventScroll);\n  action(doc, keyupEvent, dropdownKeyHandler);\n\n  // istanbul ignore else @preserve\n  if (options.display === \"dynamic\") {\n    if (self.open) self._observer.observe(menu);\n    else self._observer.disconnect();\n  }\n};\n\n/**\n * Returns the currently open `.dropdown` element.\n *\n * @param element target\n * @returns the query result\n */\nconst getCurrentOpenDropdown = (\n  element: HTMLElement,\n): HTMLElement | undefined => {\n  const currentParent = [...dropdownClasses, \"btn-group\", \"input-group\"]\n    .map((c) =>\n      getElementsByClassName(`${c} ${showClass}`, getDocument(element))\n    )\n    .find((x) => x.length);\n\n  if (currentParent && currentParent.length) {\n    return [...(currentParent[0].children as HTMLCollectionOf<HTMLElement>)]\n      .find((x) =>\n        dropdownClasses.some((c) => c === getAttribute(x, dataBsToggle))\n      );\n  }\n  return undefined;\n};\n\n// DROPDOWN EVENT HANDLERS\n// =======================\n/**\n * Handles the `click` event for the `Dropdown` instance.\n *\n * @param e event object\n */\nconst dropdownDismissHandler = (e: MouseEvent) => {\n  const { target, type } = e;\n\n  // istanbul ignore else @preserve\n  if (target && isHTMLElement(target)) {\n    // some weird FF bug #409\n    const element = getCurrentOpenDropdown(target);\n    const self = element && getDropdownInstance(element);\n\n    // istanbul ignore else @preserve\n    if (self) {\n      const { parentElement, menu } = self;\n\n      const isForm = parentElement &&\n        parentElement.contains(target) &&\n        (target.tagName === \"form\" || closest(target, \"form\") !== null);\n\n      if (\n        [mouseclickEvent, mousedownEvent].includes(type) &&\n        isEmptyAnchor(target)\n      ) {\n        e.preventDefault();\n      }\n\n      // istanbul ignore else @preserve\n      if (\n        !isForm && type !== focusEvent && target !== element && target !== menu\n      ) {\n        self.hide();\n      }\n    }\n  }\n};\n\n/**\n * Handles `click` event listener for `Dropdown`.\n *\n * @param e event object\n */\nconst dropdownClickHandler = (e: MouseEvent) => {\n  const { target } = e;\n  const element = target && closest(target as HTMLElement, dropdownSelector);\n  const self = element && getDropdownInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    e.stopPropagation();\n    self.toggle();\n    // istanbul ignore else @preserve\n    if (element && isEmptyAnchor(element)) e.preventDefault();\n  }\n};\n\n/**\n * Prevents scroll when dropdown-menu is visible.\n *\n * @param e event object\n */\nconst dropdownPreventScroll = (e: KeyboardEvent) => {\n  // istanbul ignore else @preserve\n  if ([keyArrowDown, keyArrowUp].includes(e.code)) e.preventDefault();\n};\n\n/**\n * Handles keyboard `keydown` events for `Dropdown`.\n *\n * @param e keyboard key\n */\nfunction dropdownKeyHandler(this: HTMLElement, e: KeyboardEvent) {\n  const { code } = e;\n  const element = getCurrentOpenDropdown(this);\n  const self = element && getDropdownInstance(element);\n  const { activeElement } = (element && getDocument(element)) as Document;\n\n  // istanbul ignore else @preserve\n  if (self && activeElement) {\n    const { menu, open } = self;\n    const menuItems = getMenuItems(menu);\n\n    // arrow up & down\n    if (\n      menuItems && menuItems.length && [keyArrowDown, keyArrowUp].includes(code)\n    ) {\n      let idx = menuItems.indexOf(activeElement);\n      // istanbul ignore else @preserve\n      if (activeElement === element) {\n        idx = 0;\n      } else if (code === keyArrowUp) {\n        idx = idx > 1 ? idx - 1 : 0;\n      } else if (code === keyArrowDown) {\n        idx = idx < menuItems.length - 1 ? idx + 1 : idx;\n      }\n      // istanbul ignore else @preserve\n      if (menuItems[idx]) focus(menuItems[idx] as HTMLElement);\n    }\n\n    if (keyEscape === code && open) {\n      self.toggle();\n      focus(element);\n    }\n  }\n}\n\n/** Handles dropdown layout changes during resize / scroll. */\nfunction dropdownIntersectionHandler(target: HTMLElement) {\n  const element = getCurrentOpenDropdown(target);\n  const self = element && getDropdownInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self && self.open) styleDropdown(self);\n}\n\n// DROPDOWN DEFINITION\n// ===================\n/** Returns a new Dropdown instance. */\nexport default class Dropdown extends BaseComponent {\n  static selector = dropdownSelector;\n  static init = dropdownInitCallback;\n  static getInstance = getDropdownInstance;\n  declare options: DropdownOptions;\n  declare open: boolean;\n  declare parentElement: HTMLElement;\n  declare menu: HTMLElement;\n  declare _observer: IntersectionObserver;\n\n  /**\n   * @param target Element or string selector\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<DropdownOptions>) {\n    super(target, config);\n\n    // initialization element\n    const { parentElement } = this.element;\n    const [menu] = getElementsByClassName(\n      dropdownMenuClass,\n      parentElement as ParentNode,\n    );\n\n    // invalidate when dropdown-menu is missing\n    if (menu) {\n      // set targets\n      this.parentElement = parentElement as HTMLElement;\n      this.menu = menu;\n      this._observer = new IntersectionObserver(\n        ([entry]) => dropdownIntersectionHandler(entry.target as HTMLElement),\n        { threshold: 1 },\n      );\n\n      // add event listener\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return dropdownComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return dropdownDefaults;\n  }\n\n  // DROPDOWN PUBLIC METHODS\n  // =======================\n  /** Shows/hides the dropdown menu to the user. */\n  toggle() {\n    if (this.open) this.hide();\n    else this.show();\n  }\n\n  /** Shows the dropdown menu to the user. */\n  show() {\n    const { element, open, menu, parentElement } = this;\n\n    // istanbul ignore else @preserve\n    if (!open) {\n      const currentElement = getCurrentOpenDropdown(element);\n      const currentInstance = currentElement &&\n        getDropdownInstance(currentElement);\n      if (currentInstance) currentInstance.hide();\n\n      // dispatch event\n      [showDropdownEvent, shownDropdownEvent, updatedDropdownEvent].forEach(\n        (e) => {\n          e.relatedTarget = element;\n        },\n      );\n\n      dispatchEvent(parentElement, showDropdownEvent);\n      if (!showDropdownEvent.defaultPrevented) {\n        addClass(menu, showClass);\n        addClass(parentElement, showClass);\n        setAttribute(element, ariaExpanded, \"true\");\n\n        // change menu position\n        styleDropdown(this);\n\n        this.open = !open;\n\n        focus(element); // focus the element\n        toggleDropdownDismiss(this);\n        dispatchEvent(parentElement, shownDropdownEvent);\n      }\n    }\n  }\n\n  /** Hides the dropdown menu from the user. */\n  hide() {\n    const { element, open, menu, parentElement } = this;\n\n    // istanbul ignore else @preserve\n    if (open) {\n      [hideDropdownEvent, hiddenDropdownEvent].forEach((e) => {\n        e.relatedTarget = element;\n      });\n\n      dispatchEvent(parentElement, hideDropdownEvent);\n      if (!hideDropdownEvent.defaultPrevented) {\n        removeClass(menu, showClass);\n        removeClass(parentElement, showClass);\n        setAttribute(element, ariaExpanded, \"false\");\n\n        this.open = !open;\n        // only re-attach handler if the instance is not disposed\n        toggleDropdownDismiss(this);\n        dispatchEvent(parentElement, hiddenDropdownEvent);\n      }\n    }\n  }\n\n  /**\n   * Toggles on/off the `click` event listener of the `Dropdown`.\n   *\n   * @param add when `true`, it will add the event listener\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    action(this.element, mouseclickEvent, dropdownClickHandler);\n  };\n\n  /** Removes the `Dropdown` component from the target element. */\n  dispose() {\n    if (this.open) this.hide();\n\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n","/** @type {string} */\nconst modalString = \"modal\";\nexport default modalString;\n","/** @type {string} */\nconst modalComponent = \"Modal\";\nexport default modalComponent;\n","/** @type {string} */\nconst offcanvasComponent = \"Offcanvas\";\nexport default offcanvasComponent;\n","/**\n * Global namespace for components `fixed-top` class.\n */\nconst fixedTopClass = \"fixed-top\";\nexport default fixedTopClass;\n","/**\n * Global namespace for components `fixed-bottom` class.\n */\nconst fixedBottomClass = \"fixed-bottom\";\nexport default fixedBottomClass;\n","/**\n * Global namespace for components `sticky-top` class.\n */\nconst stickyTopClass = \"sticky-top\";\nexport default stickyTopClass;\n","/**\n * Global namespace for components `position-sticky` class.\n */\nconst positionStickyClass = \"position-sticky\";\nexport default positionStickyClass;\n","import {\n  getDocumentBody,\n  getDocumentElement,\n  getElementsByClassName,\n  getElementStyle,\n  getWindow,\n  hasClass,\n  setElementStyle,\n} from \"@thednp/shorty\";\n\nimport fixedTopClass from \"../strings/fixedTopClass\";\nimport fixedBottomClass from \"../strings/fixedBottomClass\";\nimport stickyTopClass from \"../strings/stickyTopClass\";\nimport positionStickyClass from \"../strings/positionStickyClass\";\n\nconst getFixedItems = (parent?: ParentNode) => [\n  ...getElementsByClassName(fixedTopClass, parent),\n  ...getElementsByClassName(fixedBottomClass, parent),\n  ...getElementsByClassName(stickyTopClass, parent),\n  ...getElementsByClassName(positionStickyClass, parent),\n  ...getElementsByClassName(\"is-fixed\", parent),\n];\n\n/**\n * Removes *padding* and *overflow* from the `<body>`\n * and all spacing from fixed items.\n *\n * @param element the target modal/offcanvas\n */\nexport const resetScrollbar = (element?: HTMLElement) => {\n  const bd = getDocumentBody(element);\n  setElementStyle(bd, {\n    paddingRight: \"\",\n    overflow: \"\",\n  });\n\n  const fixedItems = getFixedItems(bd);\n\n  // istanbul ignore else @preserve\n  if (fixedItems.length) {\n    fixedItems.forEach((fixed) => {\n      setElementStyle(fixed, {\n        paddingRight: \"\",\n        marginRight: \"\",\n      });\n    });\n  }\n};\n\n/**\n * Returns the scrollbar width if the body does overflow\n * the window.\n *\n * @param element target element\n * @returns the scrollbar width value\n */\nexport const measureScrollbar = (element: HTMLElement) => {\n  const { clientWidth } = getDocumentElement(element);\n  const { innerWidth } = getWindow(element);\n  return Math.abs(innerWidth - clientWidth);\n};\n\n/**\n * Sets the `<body>` and fixed items style when modal / offcanvas\n * is shown to the user.\n *\n * @param element the target modal/offcanvas\n * @param overflow body does overflow or not\n */\nexport const setScrollbar = (element: HTMLElement, overflow?: boolean) => {\n  const bd = getDocumentBody(element);\n  const bodyPad = parseInt(getElementStyle(bd, \"paddingRight\"), 10);\n  const isOpen = getElementStyle(bd, \"overflow\") === \"hidden\";\n  const sbWidth = isOpen && bodyPad ? 0 : measureScrollbar(element);\n  const fixedItems = getFixedItems(bd);\n\n  // istanbul ignore else @preserve\n  if (overflow) {\n    setElementStyle(bd, {\n      overflow: \"hidden\",\n      paddingRight: `${bodyPad + sbWidth}px`,\n    });\n\n    // istanbul ignore else @preserve\n    if (fixedItems.length) {\n      fixedItems.forEach((fixed) => {\n        const itemPadValue = getElementStyle(fixed, \"paddingRight\");\n        fixed.style.paddingRight = `${parseInt(itemPadValue, 10) + sbWidth}px`;\n        // istanbul ignore else @preserve\n        if (\n          [stickyTopClass, positionStickyClass].some((c) => hasClass(fixed, c))\n        ) {\n          const itemMValue = getElementStyle(fixed, \"marginRight\");\n          fixed.style.marginRight = `${parseInt(itemMValue, 10) - sbWidth}px`;\n        }\n      });\n    }\n  }\n};\n","/** @type {string} */\nconst offcanvasString = \"offcanvas\";\nexport default offcanvasString;\n","import { createElement, getDocumentBody, isNode } from \"@thednp/shorty\";\n\n// the default container for Modal, Offcanvas, Popover and Tooltip\nconst popupContainer = createElement({\n  tagName: \"div\",\n  className: \"popup-container\",\n}) as HTMLElement;\n\nconst appendPopup = (target: HTMLElement, customContainer?: ParentNode) => {\n  const containerIsBody = isNode(customContainer) &&\n    customContainer.nodeName === \"BODY\";\n  const lookup = isNode(customContainer) && !containerIsBody\n    ? customContainer\n    : popupContainer;\n  const BODY = containerIsBody ? customContainer : getDocumentBody(target);\n\n  // istanbul ignore else @preserve\n  if (isNode(target)) {\n    if (lookup === popupContainer) {\n      BODY.append(popupContainer);\n    }\n    lookup.append(target);\n  }\n};\n\nconst removePopup = (target: HTMLElement, customContainer?: ParentNode) => {\n  const containerIsBody = isNode(customContainer) &&\n    customContainer.nodeName === \"BODY\";\n  const lookup = isNode(customContainer) && !containerIsBody\n    ? customContainer\n    : popupContainer;\n\n  // istanbul ignore else @preserve\n  if (isNode(target)) {\n    target.remove();\n\n    if (lookup === popupContainer && !popupContainer.children.length) {\n      popupContainer.remove();\n    }\n  }\n};\n\nconst hasPopup = (target: HTMLElement, customContainer?: ParentNode) => {\n  const lookup = isNode(customContainer) && customContainer.nodeName !== \"BODY\"\n    ? customContainer\n    : popupContainer;\n  return isNode(target) && lookup.contains(target);\n};\n\nexport { appendPopup, hasPopup, popupContainer, removePopup };\n","import {\n  addClass,\n  createElement,\n  getDocument,\n  getDocumentBody,\n  hasClass,\n  querySelector,\n  reflow,\n  removeClass,\n} from \"@thednp/shorty\";\n\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport modalString from \"../strings/modalString\";\nimport offcanvasString from \"../strings/offcanvasString\";\nimport { resetScrollbar } from \"./scrollbar\";\nimport { appendPopup, removePopup } from \"./popupContainer\";\n\nconst backdropString = \"backdrop\";\nconst modalBackdropClass = `${modalString}-${backdropString}`;\nconst offcanvasBackdropClass = `${offcanvasString}-${backdropString}`;\nconst modalActiveSelector = `.${modalString}.${showClass}`;\nconst offcanvasActiveSelector = `.${offcanvasString}.${showClass}`;\n\n// any document would suffice\nconst overlay = createElement(\"div\") as HTMLElement;\n\n/**\n * Returns the current active modal / offcancas element.\n *\n * @param element the context element\n * @returns the requested element\n */\nconst getCurrentOpen = (element?: HTMLElement): HTMLElement | null => {\n  return querySelector(\n    `${modalActiveSelector},${offcanvasActiveSelector}`,\n    getDocument(element),\n  );\n};\n\n/**\n * Toogles from a Modal overlay to an Offcanvas, or vice-versa.\n *\n * @param isModal\n */\nconst toggleOverlayType = (isModal?: boolean) => {\n  const targetClass = isModal ? modalBackdropClass : offcanvasBackdropClass;\n  [modalBackdropClass, offcanvasBackdropClass].forEach((c) => {\n    removeClass(overlay, c);\n  });\n  addClass(overlay, targetClass);\n};\n\n/**\n * Append the overlay to DOM.\n *\n * @param element\n * @param hasFade\n * @param isModal\n */\nconst appendOverlay = (\n  element: HTMLElement,\n  hasFade: boolean,\n  isModal?: boolean,\n) => {\n  toggleOverlayType(isModal);\n  appendPopup(overlay, getDocumentBody(element));\n  if (hasFade) addClass(overlay, fadeClass);\n};\n\n/**\n * Shows the overlay to the user.\n */\nconst showOverlay = () => {\n  if (!hasClass(overlay, showClass)) {\n    addClass(overlay, showClass);\n    reflow(overlay);\n  }\n};\n\n/**\n * Hides the overlay from the user.\n */\nconst hideOverlay = () => {\n  removeClass(overlay, showClass);\n};\n\n/**\n * Removes the overlay from DOM.\n *\n * @param element\n */\nconst removeOverlay = (element?: HTMLElement): void => {\n  if (!getCurrentOpen(element)) {\n    removeClass(overlay, fadeClass);\n    removePopup(overlay, getDocumentBody(element));\n    resetScrollbar(element);\n  }\n};\n\nexport {\n  appendOverlay,\n  getCurrentOpen,\n  hideOverlay,\n  modalActiveSelector,\n  modalBackdropClass,\n  offcanvasActiveSelector,\n  offcanvasBackdropClass,\n  overlay,\n  removeOverlay,\n  showOverlay,\n  toggleOverlayType,\n};\n","import { getElementStyle, isHTMLElement } from \"@thednp/shorty\";\n\n/**\n * @param element target\n * @returns the check result\n */\nconst isVisible = (element: HTMLElement) => {\n  return isHTMLElement(element) &&\n    getElementStyle(element, \"visibility\") !== \"hidden\" &&\n    element.offsetParent !== null;\n};\nexport default isVisible;\n","/* Native JavaScript for Bootstrap 5 | Modal\n-------------------------------------------- */\nimport {\n  addClass,\n  ariaHidden,\n  ariaModal,\n  closest,\n  createCustomEvent,\n  CSS4Declaration,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focus,\n  getDocument,\n  getDocumentBody,\n  getDocumentElement,\n  getElementTransitionDuration,\n  getInstance,\n  hasClass,\n  isRTL,\n  KeyboardEvent,\n  keydownEvent,\n  keyEscape,\n  mouseclickEvent,\n  MouseEvent,\n  querySelector,\n  querySelectorAll,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n  setElementStyle,\n  Timer,\n  toggleFocusTrap,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport dataBsDismiss from \"../strings/dataBsDismiss\";\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport modalString from \"../strings/modalString\";\nimport modalComponent from \"../strings/modalComponent\";\nimport offcanvasComponent from \"../strings/offcanvasComponent\";\nimport getTargetElement from \"../util/getTargetElement\";\nimport { measureScrollbar, setScrollbar } from \"../util/scrollbar\";\nimport {\n  appendOverlay,\n  getCurrentOpen,\n  hideOverlay,\n  modalActiveSelector,\n  overlay,\n  removeOverlay,\n  showOverlay,\n  toggleOverlayType,\n} from \"../util/backdrop\";\nimport isVisible from \"../util/isVisible\";\nimport BaseComponent from \"./base-component\";\nimport { ModalEvent, ModalOptions } from \"../interface/modal\";\nimport { hasPopup } from \"../util/popupContainer\";\n\n// MODAL PRIVATE GC\n// ================\nconst modalSelector = `.${modalString}`;\nconst modalToggleSelector = `[${dataBsToggle}=\"${modalString}\"]`;\nconst modalDismissSelector = `[${dataBsDismiss}=\"${modalString}\"]`;\nconst modalStaticClass = `${modalString}-static`;\n\nconst modalDefaults = {\n  backdrop: true,\n  keyboard: true,\n};\n\ntype ModalEventProps = {\n  relatedTarget: HTMLElement | undefined;\n};\n\n/**\n * Static method which returns an existing `Modal` instance associated\n * to a target `Element`.\n */\nconst getModalInstance = (element: HTMLElement) =>\n  getInstance<Modal>(element, modalComponent);\n\n/**\n * A `Modal` initialization callback.\n */\nconst modalInitCallback = (element: HTMLElement) => new Modal(element);\n\n// MODAL CUSTOM EVENTS\n// ===================\nconst showModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `show.bs.${modalString}`,\n);\nconst shownModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `shown.bs.${modalString}`,\n);\nconst hideModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `hide.bs.${modalString}`,\n);\nconst hiddenModalEvent = createCustomEvent<ModalEventProps, ModalEvent>(\n  `hidden.bs.${modalString}`,\n);\n\n// MODAL PRIVATE METHODS\n// =====================\n/**\n * Applies special style for the `<body>` and fixed elements\n * when a modal instance is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst setModalScrollbar = (self: Modal) => {\n  const { element } = self;\n  const scrollbarWidth = measureScrollbar(element);\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  const { clientHeight: modalHeight, scrollHeight: modalScrollHeight } =\n    element;\n  const modalOverflow = modalHeight !== modalScrollHeight;\n\n  // istanbul ignore next @preserve: impossible to test?\n  if (!modalOverflow && scrollbarWidth) {\n    const pad = !isRTL(element)\n      ? \"paddingRight\"\n      // istanbul ignore next @preserve\n      : \"paddingLeft\";\n    const padStyle = { [pad]: `${scrollbarWidth}px` } as Partial<\n      CSS4Declaration\n    >;\n    setElementStyle(element, padStyle);\n  }\n  setScrollbar(element, modalOverflow || clientHeight !== scrollHeight);\n};\n\n/**\n * Toggles on/off the listeners of events that close the modal.\n *\n * @param self the `Modal` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleModalDismiss = (self: Modal, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n  action(element, mouseclickEvent, modalDismissHandler);\n  action(getDocument(element), keydownEvent, modalKeyHandler);\n\n  if (add) self._observer.observe(element);\n  else self._observer.disconnect();\n};\n\n/**\n * Executes after a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalHide = (self: Modal) => {\n  const { triggers, element, relatedTarget } = self;\n  removeOverlay(element);\n  setElementStyle(element, { paddingRight: \"\", display: \"\" });\n  toggleModalDismiss(self);\n\n  const focusElement = showModalEvent.relatedTarget || triggers.find(isVisible);\n  // istanbul ignore else @preserve\n  if (focusElement) focus(focusElement as HTMLElement);\n\n  hiddenModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, hiddenModalEvent);\n  toggleFocusTrap(element);\n};\n\n/**\n * Executes after a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst afterModalShow = (self: Modal) => {\n  const { element, relatedTarget } = self;\n  focus(element);\n  toggleModalDismiss(self, true);\n\n  shownModalEvent.relatedTarget = relatedTarget as HTMLElement | undefined;\n  dispatchEvent(element, shownModalEvent);\n  toggleFocusTrap(element);\n};\n\n/**\n * Executes before a modal is shown to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalShow = (self: Modal) => {\n  const { element, hasFade } = self;\n  setElementStyle(element, { display: \"block\" });\n  setModalScrollbar(self);\n  // istanbul ignore else @preserve\n  if (!getCurrentOpen(element)) {\n    setElementStyle(getDocumentBody(element), { overflow: \"hidden\" });\n  }\n\n  addClass(element, showClass);\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, \"true\");\n\n  if (hasFade) emulateTransitionEnd(element, () => afterModalShow(self));\n  else afterModalShow(self);\n};\n\n/**\n * Executes before a modal is hidden to the user.\n *\n * @param self the `Modal` instance\n */\nconst beforeModalHide = (self: Modal) => {\n  const { element, options, hasFade } = self;\n\n  // callback can also be the transitionEvent object, we wanna make sure it's not\n  // call is not forced and overlay is visible\n  if (\n    options.backdrop && hasFade && hasClass(overlay, showClass) &&\n    !getCurrentOpen(element)\n  ) {\n    // AND no modal is visible\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => afterModalHide(self));\n  } else {\n    afterModalHide(self);\n  }\n};\n\n// MODAL EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for modal.\n *\n * @param e the `Event` object\n */\nconst modalClickHandler = (e: MouseEvent<HTMLElement>) => {\n  const { target } = e;\n\n  const trigger = target && closest(target, modalToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getModalInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    // istanbul ignore else @preserve\n    if (trigger && trigger.tagName === \"A\") e.preventDefault();\n    self.relatedTarget = trigger;\n    self.toggle();\n  }\n};\n\n/**\n * Handles the `keydown` event listener for modal\n * to hide the modal when user type the `ESC` key.\n *\n * @param e the `Event` object\n */\nconst modalKeyHandler = ({ code, target }: KeyboardEvent<HTMLElement>) => {\n  const element = querySelector(modalActiveSelector, getDocument(target));\n  const self = element && getModalInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    const { options } = self;\n    // istanbul ignore else @preserve\n    if (\n      options.keyboard &&\n      code === keyEscape && // the keyboard option is enabled and the key is 27\n      hasClass(element, showClass)\n    ) {\n      // the modal is not visible\n      self.relatedTarget = null;\n      self.hide();\n    }\n  }\n};\n\n/**\n * Handles the `click` event listeners that hide the modal.\n *\n * @param e the `Event` object\n */\nconst modalDismissHandler = (e: MouseEvent<HTMLElement>) => {\n  const { currentTarget } = e;\n  const self = currentTarget && getModalInstance(currentTarget);\n\n  // this timer is needed\n  // istanbul ignore else @preserve\n  if (self && currentTarget && !Timer.get(currentTarget)) {\n    const { options, isStatic, modalDialog } = self;\n    const { backdrop } = options;\n    const { target } = e;\n\n    const selectedText = getDocument(currentTarget)?.getSelection()?.toString()\n      .length;\n    const targetInsideDialog = modalDialog.contains(target);\n    const dismiss = target && closest(target, modalDismissSelector);\n\n    // istanbul ignore else @preserve\n    if (isStatic && !targetInsideDialog) {\n      Timer.set(\n        currentTarget,\n        () => {\n          addClass(currentTarget, modalStaticClass);\n          emulateTransitionEnd(modalDialog, () => staticTransitionEnd(self));\n        },\n        17,\n      );\n    } else if (\n      dismiss || (!selectedText && !isStatic && !targetInsideDialog && backdrop)\n    ) {\n      self.relatedTarget = dismiss || null;\n      self.hide();\n      e.preventDefault();\n    }\n  }\n};\n\n/**\n * Handles the `transitionend` event listeners for `Modal`.\n *\n * @param self the `Modal` instance\n */\nconst staticTransitionEnd = (self: Modal) => {\n  const { element, modalDialog } = self;\n  const duration = (getElementTransitionDuration(modalDialog) || 0) + 17;\n  removeClass(element, modalStaticClass);\n  // user must wait for zoom out transition\n  Timer.set(element, () => Timer.clear(element), duration);\n};\n\n// MODAL DEFINITION\n// ================\n/** Returns a new `Modal` instance. */\nexport default class Modal extends BaseComponent {\n  static selector = modalSelector;\n  static init = modalInitCallback;\n  static getInstance = getModalInstance;\n  declare options: ModalOptions;\n  declare modalDialog: HTMLElement;\n  declare triggers: HTMLElement[];\n  declare isStatic: boolean;\n  declare hasFade: boolean;\n  declare relatedTarget: HTMLElement | null;\n  declare _observer: ResizeObserver;\n\n  /**\n   * @param target usually the `.modal` element\n   * @param config instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ModalOptions>) {\n    super(target, config);\n\n    // the modal\n    const { element } = this;\n\n    // the modal-dialog\n    const modalDialog = querySelector(`.${modalString}-dialog`, element);\n\n    // istanbul ignore else @preserve\n    if (modalDialog) {\n      this.modalDialog = modalDialog;\n      // modal can have multiple triggering elements\n      this.triggers = [\n        ...querySelectorAll(modalToggleSelector, getDocument(element)),\n      ].filter(\n        (btn) => getTargetElement(btn) === element,\n      );\n\n      // additional internals\n      this.isStatic = this.options.backdrop === \"static\";\n      this.hasFade = hasClass(element, fadeClass);\n      this.relatedTarget = null;\n      this._observer = new ResizeObserver(() => this.update());\n\n      // attach event listeners\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return modalComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return modalDefaults;\n  }\n\n  // MODAL PUBLIC METHODS\n  // ====================\n  /** Toggles the visibility of the modal. */\n  toggle() {\n    if (hasClass(this.element, showClass)) this.hide();\n    else this.show();\n  }\n\n  /** Shows the modal to the user. */\n  show() {\n    const { element, options, hasFade, relatedTarget } = this;\n    const { backdrop } = options;\n    let overlayDelay = 0;\n\n    // istanbul ignore else @preserve\n    if (!hasClass(element, showClass)) {\n      showModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, showModalEvent);\n      if (!showModalEvent.defaultPrevented) {\n        // we elegantly hide any opened modal/offcanvas\n        const currentOpen = getCurrentOpen(element);\n\n        // istanbul ignore else @preserve\n        if (currentOpen && currentOpen !== element) {\n          const that = getModalInstance(currentOpen) ||\n            // istanbul ignore next @preserve\n            getInstance<typeof BaseComponent & { hide: () => void }>(\n              currentOpen,\n              offcanvasComponent,\n            );\n          // istanbul ignore else @preserve\n          if (that) that.hide();\n        }\n        if (backdrop) {\n          if (!hasPopup(overlay)) {\n            appendOverlay(element, hasFade, true);\n          } else {\n            toggleOverlayType(true);\n          }\n\n          overlayDelay = getElementTransitionDuration(overlay);\n          showOverlay();\n\n          setTimeout(() => beforeModalShow(this), overlayDelay);\n        } else {\n          beforeModalShow(this);\n          // istanbul ignore else @preserve\n          if (currentOpen && hasClass(overlay, showClass)) {\n            hideOverlay();\n          }\n        }\n      }\n    }\n  }\n\n  /** Hide the modal from the user. */\n  hide() {\n    const { element, hasFade, relatedTarget } = this;\n\n    // istanbul ignore else @preserve\n    if (hasClass(element, showClass)) {\n      hideModalEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, hideModalEvent);\n\n      // istanbul ignore else @preserve\n      if (!hideModalEvent.defaultPrevented) {\n        removeClass(element, showClass);\n        setAttribute(element, ariaHidden, \"true\");\n        removeAttribute(element, ariaModal);\n\n        if (hasFade) {\n          emulateTransitionEnd(element, () => beforeModalHide(this));\n        } else {\n          beforeModalHide(this);\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates the modal layout.\n   */\n  update = () => {\n    // istanbul ignore else @preserve\n    if (hasClass(this.element, showClass)) setModalScrollbar(this);\n  };\n\n  /**\n   * Toggles on/off the `click` event listener of the `Modal` instance.\n   *\n   * @param add when `true`, event listener(s) is/are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { triggers } = this;\n\n    // istanbul ignore else @preserve\n    if (triggers.length) {\n      triggers.forEach((btn) =>\n        action(btn, mouseclickEvent, modalClickHandler)\n      );\n    }\n  };\n\n  /** Removes the `Modal` component from target element. */\n  dispose() {\n    const clone = { ...this };\n    const { modalDialog, hasFade } = clone;\n    const callback = () => setTimeout(() => super.dispose(), 17);\n\n    this.hide();\n    this._toggleEventListeners();\n\n    if (hasFade) {\n      // use transitionend callback\n      emulateTransitionEnd(modalDialog, callback);\n    } else {\n      callback();\n    }\n  }\n}\n","/* Native JavaScript for Bootstrap 5 | OffCanvas\n------------------------------------------------ */\nimport {\n  addClass,\n  ariaHidden,\n  ariaModal,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focus,\n  getDocument,\n  getDocumentBody,\n  getDocumentElement,\n  getElementTransitionDuration,\n  getInstance,\n  hasClass,\n  keydownEvent,\n  keyEscape,\n  mouseclickEvent,\n  querySelector,\n  querySelectorAll,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n  setElementStyle,\n  toggleFocusTrap,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport dataBsDismiss from \"../strings/dataBsDismiss\";\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport showClass from \"../strings/showClass\";\nimport offcanvasString from \"../strings/offcanvasString\";\nimport offcanvasComponent from \"../strings/offcanvasComponent\";\nimport modalComponent from \"../strings/modalComponent\";\n\nimport getTargetElement from \"../util/getTargetElement\";\nimport isVisible from \"../util/isVisible\";\nimport { setScrollbar } from \"../util/scrollbar\";\nimport { hasPopup } from \"../util/popupContainer\";\nimport {\n  appendOverlay,\n  getCurrentOpen,\n  hideOverlay,\n  offcanvasActiveSelector,\n  overlay,\n  removeOverlay,\n  showOverlay,\n  toggleOverlayType,\n} from \"../util/backdrop\";\nimport BaseComponent from \"./base-component\";\nimport { OffcanvasEvent, OffcanvasOptions } from \"../interface/offcanvas\";\n\n// OFFCANVAS PRIVATE GC\n// ====================\nconst offcanvasSelector = `.${offcanvasString}`;\nconst offcanvasToggleSelector = `[${dataBsToggle}=\"${offcanvasString}\"]`;\nconst offcanvasDismissSelector = `[${dataBsDismiss}=\"${offcanvasString}\"]`;\nconst offcanvasTogglingClass = `${offcanvasString}-toggling`;\n\nconst offcanvasDefaults = {\n  backdrop: true, // boolean\n  keyboard: true, // boolean\n  scroll: false, // boolean\n};\n\ntype OffCanvasEventProps = {\n  relatedTarget: HTMLElement | undefined;\n};\n\n/**\n * Static method which returns an existing `Offcanvas` instance associated\n * to a target `Element`.\n */\nconst getOffcanvasInstance = (element: HTMLElement) =>\n  getInstance<Offcanvas>(element, offcanvasComponent);\n\n/**\n * An `Offcanvas` initialization callback.\n */\nconst offcanvasInitCallback = (element: HTMLElement) => new Offcanvas(element);\n\n// OFFCANVAS CUSTOM EVENTS\n// =======================\nconst showOffcanvasEvent = createCustomEvent<\n  OffCanvasEventProps,\n  OffcanvasEvent\n>(`show.bs.${offcanvasString}`);\nconst shownOffcanvasEvent = createCustomEvent<\n  OffCanvasEventProps,\n  OffcanvasEvent\n>(`shown.bs.${offcanvasString}`);\nconst hideOffcanvasEvent = createCustomEvent<\n  OffCanvasEventProps,\n  OffcanvasEvent\n>(`hide.bs.${offcanvasString}`);\nconst hiddenOffcanvasEvent = createCustomEvent<\n  OffCanvasEventProps,\n  OffcanvasEvent\n>(`hidden.bs.${offcanvasString}`);\n\n// OFFCANVAS PRIVATE METHODS\n// =========================\n/**\n * Sets additional style for the `<body>` and other elements\n * when showing an offcanvas to the user.\n *\n * @param self the `Offcanvas` instance\n */\nconst setOffCanvasScrollbar = (self: Offcanvas) => {\n  const { element } = self;\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  setScrollbar(element, clientHeight !== scrollHeight);\n};\n\n/**\n * Toggles on/off the listeners of the events that close the offcanvas.\n *\n * @param self the `Offcanvas` instance\n * @param add when *true* listeners are added\n */\nconst toggleOffCanvasDismiss = (self: Offcanvas, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const doc = getDocument(self.element);\n  action(doc, keydownEvent, offcanvasKeyDismissHandler);\n  action(doc, mouseclickEvent, offcanvasDismissHandler);\n};\n\n/**\n * Executes before showing the offcanvas.\n *\n * @param self the `Offcanvas` instance\n */\nconst beforeOffcanvasShow = (self: Offcanvas) => {\n  const { element, options } = self;\n\n  // istanbul ignore else @preserve\n  if (!options.scroll) {\n    setOffCanvasScrollbar(self);\n    setElementStyle(getDocumentBody(element), { overflow: \"hidden\" });\n  }\n\n  addClass(element, offcanvasTogglingClass);\n  addClass(element, showClass);\n  setElementStyle(element, { visibility: \"visible\" });\n\n  emulateTransitionEnd(element, () => showOffcanvasComplete(self));\n};\n\n/**\n * Executes before hiding the offcanvas.\n *\n * @param self the `Offcanvas` instance\n */\nconst beforeOffcanvasHide = (self: Offcanvas) => {\n  const { element, options } = self;\n  const currentOpen = getCurrentOpen(element);\n\n  element.blur();\n\n  if (!currentOpen && options.backdrop && hasClass(overlay, showClass)) {\n    hideOverlay();\n  }\n  emulateTransitionEnd(element, () => hideOffcanvasComplete(self));\n};\n\n// OFFCANVAS EVENT HANDLERS\n// ========================\n/**\n * Handles the `click` event listeners.\n *\n * @param e the `Event` object\n */\nconst offcanvasTriggerHandler = (e: MouseEvent) => {\n  const trigger = closest(e.target as HTMLElement, offcanvasToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getOffcanvasInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    self.relatedTarget = trigger;\n    self.toggle();\n    // istanbul ignore else @preserve\n    if (trigger && trigger.tagName === \"A\") {\n      e.preventDefault();\n    }\n  }\n};\n\n/**\n * Handles the event listeners that close the offcanvas.\n *\n * @param e the `Event` object\n */\nconst offcanvasDismissHandler = (e: MouseEvent) => {\n  const { target } = e;\n  const element = querySelector(\n    offcanvasActiveSelector,\n    getDocument(target as Node),\n  );\n  const offCanvasDismiss = querySelector(\n    offcanvasDismissSelector,\n    element as HTMLElement | undefined,\n  );\n  const self = element && getOffcanvasInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    const { options, triggers } = self;\n    const { backdrop } = options;\n    const trigger = closest(target as HTMLElement, offcanvasToggleSelector);\n    const selection = getDocument(element).getSelection();\n\n    // istanbul ignore else: a filter is required here @preserve\n    if (!overlay.contains(target as HTMLElement) || backdrop !== \"static\") {\n      // istanbul ignore else @preserve\n      if (\n        !(selection && selection.toString().length) &&\n        ((!element.contains(target as HTMLElement) &&\n          backdrop &&\n          // istanbul ignore next @preserve\n          (!trigger || triggers.includes(target as HTMLElement))) ||\n          (offCanvasDismiss &&\n            offCanvasDismiss.contains(target as HTMLElement)))\n      ) {\n        self.relatedTarget =\n          offCanvasDismiss && offCanvasDismiss.contains(target as HTMLElement)\n            ? offCanvasDismiss\n            : null;\n        self.hide();\n      }\n\n      // istanbul ignore next @preserve\n      if (trigger && trigger.tagName === \"A\") e.preventDefault();\n    }\n  }\n};\n\n/**\n * Handles the `keydown` event listener for offcanvas\n * to hide it when user type the `ESC` key.\n *\n * @param e the `Event` object\n */\nconst offcanvasKeyDismissHandler = ({ code, target }: KeyboardEvent) => {\n  const element = querySelector(\n    offcanvasActiveSelector,\n    getDocument(target as Node),\n  );\n  const self = element && getOffcanvasInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    // istanbul ignore else @preserve\n    if (self.options.keyboard && code === keyEscape) {\n      self.relatedTarget = null;\n      self.hide();\n    }\n  }\n};\n\n/**\n * Handles the `transitionend` when showing the offcanvas.\n *\n * @param self the `Offcanvas` instance\n */\nconst showOffcanvasComplete = (self: Offcanvas) => {\n  const { element } = self;\n  removeClass(element, offcanvasTogglingClass);\n\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, \"true\");\n  setAttribute(element, \"role\", \"dialog\");\n\n  dispatchEvent(element, shownOffcanvasEvent);\n\n  toggleOffCanvasDismiss(self, true);\n  focus(element);\n  toggleFocusTrap(element);\n};\n\n/**\n * Handles the `transitionend` when hiding the offcanvas.\n *\n * @param self the `Offcanvas` instance\n */\nconst hideOffcanvasComplete = (self: Offcanvas) => {\n  const { element, triggers } = self;\n\n  setAttribute(element, ariaHidden, \"true\");\n  removeAttribute(element, ariaModal);\n  removeAttribute(element, \"role\");\n  setElementStyle(element, { visibility: \"\" });\n\n  const visibleTrigger = showOffcanvasEvent.relatedTarget ||\n    triggers.find(isVisible);\n  // istanbul ignore else @preserve\n  if (visibleTrigger) focus(visibleTrigger as HTMLElement);\n\n  removeOverlay(element);\n\n  dispatchEvent(element, hiddenOffcanvasEvent);\n  removeClass(element, offcanvasTogglingClass);\n  toggleFocusTrap(element);\n\n  // must check for open instances\n  if (!getCurrentOpen(element)) {\n    toggleOffCanvasDismiss(self);\n  }\n};\n\n// OFFCANVAS DEFINITION\n// ====================\n/** Returns a new `Offcanvas` instance. */\nexport default class Offcanvas extends BaseComponent {\n  static selector = offcanvasSelector;\n  static init = offcanvasInitCallback;\n  static getInstance = getOffcanvasInstance;\n  declare options: OffcanvasOptions;\n  declare triggers: HTMLElement[];\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target usually an `.offcanvas` element\n   * @param config instance options\n   */\n  constructor(\n    target: HTMLElement | string,\n    config?: Partial<OffcanvasOptions>,\n  ) {\n    super(target, config);\n\n    // instance element\n    const { element } = this;\n\n    // all the triggering buttons\n    this.triggers = [\n      ...querySelectorAll(offcanvasToggleSelector, getDocument(element)),\n    ].filter(\n      (btn) => getTargetElement(btn) === element,\n    );\n\n    // additional instance property\n    this.relatedTarget = null;\n\n    // attach event listeners\n    this._toggleEventListeners(true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return offcanvasComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return offcanvasDefaults;\n  }\n\n  // OFFCANVAS PUBLIC METHODS\n  // ========================\n  /** Shows or hides the offcanvas from the user. */\n  toggle() {\n    if (hasClass(this.element, showClass)) this.hide();\n    else this.show();\n  }\n\n  /** Shows the offcanvas to the user. */\n  show() {\n    const { element, options, relatedTarget } = this;\n    let overlayDelay = 0;\n\n    if (!hasClass(element, showClass)) {\n      showOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n      shownOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, showOffcanvasEvent);\n\n      if (!showOffcanvasEvent.defaultPrevented) {\n        // we elegantly hide any opened modal/offcanvas\n        const currentOpen = getCurrentOpen(element);\n        if (currentOpen && currentOpen !== element) {\n          const that = getOffcanvasInstance(currentOpen) ||\n            // istanbul ignore next @preserve\n            getInstance<typeof BaseComponent & { hide: () => void }>(\n              currentOpen,\n              modalComponent,\n            );\n\n          // istanbul ignore else @preserve\n          if (that) that.hide();\n        }\n\n        if (options.backdrop) {\n          if (!hasPopup(overlay)) {\n            appendOverlay(element, true);\n          } else {\n            toggleOverlayType();\n          }\n\n          overlayDelay = getElementTransitionDuration(overlay);\n          showOverlay();\n\n          setTimeout(() => beforeOffcanvasShow(this), overlayDelay);\n        } else {\n          beforeOffcanvasShow(this);\n          // istanbul ignore next @preserve - this test was done on Modal\n          if (currentOpen && hasClass(overlay, showClass)) {\n            hideOverlay();\n          }\n        }\n      }\n    }\n  }\n\n  /** Hides the offcanvas from the user. */\n  hide() {\n    const { element, relatedTarget } = this;\n\n    if (hasClass(element, showClass)) {\n      hideOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n      hiddenOffcanvasEvent.relatedTarget = relatedTarget || undefined;\n      dispatchEvent(element, hideOffcanvasEvent);\n      if (!hideOffcanvasEvent.defaultPrevented) {\n        addClass(element, offcanvasTogglingClass);\n        removeClass(element, showClass);\n        beforeOffcanvasHide(this);\n      }\n    }\n  }\n\n  /**\n   * Toggles on/off the `click` event listeners.\n   *\n   * @param self the `Offcanvas` instance\n   * @param add when *true*, listeners are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    this.triggers.forEach((btn) =>\n      action(btn, mouseclickEvent, offcanvasTriggerHandler)\n    );\n  };\n\n  /** Removes the `Offcanvas` from the target element. */\n  dispose() {\n    const { element } = this;\n    const isOpen = hasClass(element, showClass);\n    const callback = () => setTimeout(() => super.dispose(), 1);\n\n    this.hide();\n    this._toggleEventListeners();\n\n    if (isOpen) {\n      emulateTransitionEnd(element, callback);\n      // istanbul ignore next @preserve\n    } else {\n      callback();\n    }\n  }\n}\n","/** @type {string} */\nconst popoverString = \"popover\";\nexport default popoverString;\n","/** @type {string} */\nconst popoverComponent = \"Popover\";\nexport default popoverComponent;\n","/** @type {string} */\nconst tooltipString = \"tooltip\";\nexport default tooltipString;\n","import tooltipString from \"../strings/tooltipString\";\n\n/**\n * Returns a template for Popover / Tooltip.\n *\n * @param tipType the expected markup type\n * @returns the template markup\n */\nconst getTipTemplate = (tipType: string) => {\n  const isTooltip = tipType === tooltipString;\n  const bodyClass = isTooltip ? `${tipType}-inner` : `${tipType}-body`;\n  const header = !isTooltip ? `<h3 class=\"${tipType}-header\"></h3>` : \"\";\n  const arrow = `<div class=\"${tipType}-arrow\"></div>`;\n  const body = `<div class=\"${bodyClass}\"></div>`;\n  return `<div class=\"${tipType}\" role=\"${tooltipString}\">${\n    header + arrow + body\n  }</div>`;\n};\n\nexport default getTipTemplate;\n","const tipClassPositions = {\n  top: \"top\",\n  bottom: \"bottom\",\n  left: \"start\",\n  right: \"end\",\n};\n\nexport default tipClassPositions;\n","import {\n  createCustomEvent,\n  dispatchEvent,\n  getBoundingClientRect,\n  getDocumentElement,\n  getElementStyle,\n  isHTMLElement,\n  isRTL,\n  setElementStyle,\n  toLowerCase,\n} from \"@thednp/shorty\";\n\nimport popoverComponent from \"../strings/popoverComponent\";\nimport tipClassPositions from \"./tipClassPositions\";\nimport Tooltip from \"../components/tooltip\";\nimport type { TooltipEvent } from \"../interface/tooltip\";\nimport type { PopoverEvent } from \"../interface/popover\";\n\n/**\n * Style popovers and tooltips.\n *\n * @param self the `Popover` / `Tooltip` instance\n */\nconst styleTip = <T extends Tooltip>(self: T) => {\n  const tipClasses = /\\b(top|bottom|start|end)+/;\n  const { element, tooltip, container, options, arrow } = self;\n\n  // istanbul ignore else @preserve\n  if (tooltip) {\n    const tipPositions = { ...tipClassPositions };\n    const RTL = isRTL(element);\n\n    // reset tooltip style (top: 0, left: 0 works best)\n    setElementStyle(tooltip, {\n      // top: '0px', left: '0px', right: '', bottom: '',\n      top: \"\",\n      left: \"\",\n      right: \"\",\n      bottom: \"\",\n    });\n    const isPopover = self.name === popoverComponent;\n    const { offsetWidth: tipWidth, offsetHeight: tipHeight } = tooltip;\n    const { clientWidth: htmlcw, clientHeight: htmlch, offsetWidth: htmlow } =\n      getDocumentElement(element);\n    let { placement } = options;\n    const { clientWidth: parentCWidth, offsetWidth: parentOWidth } =\n      container as HTMLElement;\n    const parentPosition = getElementStyle(\n      container as HTMLElement,\n      \"position\",\n    );\n    const fixedParent = parentPosition === \"fixed\";\n    const scrollbarWidth = fixedParent\n      ? Math.abs(parentCWidth - parentOWidth)\n      : Math.abs(htmlcw - htmlow);\n    const leftBoundry = RTL && fixedParent\n      // istanbul ignore next @preserve\n      ? scrollbarWidth\n      : 0;\n    const rightBoundry = htmlcw - (!RTL ? scrollbarWidth : 0) - 1;\n    const {\n      width: elemWidth,\n      height: elemHeight,\n      left: elemRectLeft,\n      right: elemRectRight,\n      top: elemRectTop,\n    } = getBoundingClientRect(element, true);\n    const { x, y } = {\n      x: elemRectLeft,\n      y: elemRectTop,\n    };\n    // reset arrow style\n    setElementStyle(arrow as HTMLElement, {\n      top: \"\",\n      left: \"\",\n      right: \"\",\n      bottom: \"\",\n    });\n    let topPosition: number | string = 0;\n    let bottomPosition: number | string = \"\";\n    let leftPosition: number | string = 0;\n    let rightPosition: number | string = \"\";\n    let arrowTop: number | string = \"\";\n    let arrowLeft: number | string = \"\";\n    let arrowRight: number | string = \"\";\n\n    const arrowWidth = (arrow as HTMLElement).offsetWidth || 0;\n    const arrowHeight = (arrow as HTMLElement).offsetHeight || 0;\n    const arrowAdjust = arrowWidth / 2;\n\n    // check placement\n    let topExceed = elemRectTop - tipHeight - arrowHeight < 0;\n    let bottomExceed =\n      elemRectTop + tipHeight + elemHeight + arrowHeight >= htmlch;\n    let leftExceed = elemRectLeft - tipWidth - arrowWidth < leftBoundry;\n    let rightExceed =\n      elemRectLeft + tipWidth + elemWidth + arrowWidth >= rightBoundry;\n\n    const horizontals = [\"left\", \"right\"];\n    const verticals = [\"top\", \"bottom\"];\n\n    topExceed = horizontals.includes(placement)\n      ? elemRectTop + elemHeight / 2 - tipHeight / 2 - arrowHeight < 0\n      : topExceed;\n    bottomExceed = horizontals.includes(placement)\n      ? elemRectTop + tipHeight / 2 + elemHeight / 2 + arrowHeight >= htmlch\n      : bottomExceed;\n    leftExceed = verticals.includes(placement)\n      ? elemRectLeft + elemWidth / 2 - tipWidth / 2 < leftBoundry\n      : leftExceed;\n    rightExceed = verticals.includes(placement)\n      ? elemRectLeft + tipWidth / 2 + elemWidth / 2 >= rightBoundry\n      : rightExceed;\n\n    // first remove side positions if both left and right limits are exceeded\n    // we usually fall back to top|bottom\n    placement = horizontals.includes(placement) && leftExceed && rightExceed\n      ? \"top\"\n      : placement;\n    // recompute placement\n    placement = placement === \"top\" && topExceed ? \"bottom\" : placement;\n    placement = placement === \"bottom\" && bottomExceed ? \"top\" : placement;\n    placement = placement === \"left\" && leftExceed ? \"right\" : placement;\n    placement = placement === \"right\" && rightExceed\n      ? \"left\"\n      // istanbul ignore next @preserve\n      : placement;\n\n    // update tooltip/popover class\n    if (!tooltip.className.includes(placement)) {\n      tooltip.className = tooltip.className.replace(\n        tipClasses,\n        tipPositions[placement],\n      );\n    }\n\n    // compute tooltip / popover coordinates\n    // istanbul ignore else @preserve\n    if (horizontals.includes(placement)) {\n      // secondary|side positions\n      if (placement === \"left\") {\n        // LEFT\n        leftPosition = x - tipWidth - (isPopover ? arrowWidth : 0);\n      } else {\n        // RIGHT\n        leftPosition = x + elemWidth + (isPopover ? arrowWidth : 0);\n      }\n\n      // adjust top and arrow\n      if (topExceed && bottomExceed) {\n        topPosition = 0;\n        bottomPosition = 0;\n        arrowTop = elemRectTop + elemHeight / 2 - arrowHeight / 2;\n      } else if (topExceed) {\n        topPosition = y;\n        bottomPosition = \"\";\n        arrowTop = elemHeight / 2 - arrowWidth;\n      } else if (bottomExceed) {\n        topPosition = y - tipHeight + elemHeight;\n        bottomPosition = \"\";\n        arrowTop = tipHeight - elemHeight / 2 - arrowWidth;\n      } else {\n        topPosition = y - tipHeight / 2 + elemHeight / 2;\n        arrowTop = tipHeight / 2 - arrowHeight / 2;\n      }\n    } else if (verticals.includes(placement)) {\n      if (placement === \"top\") {\n        topPosition = y - tipHeight - (isPopover ? arrowHeight : 0);\n      } else {\n        // BOTTOM\n        topPosition = y + elemHeight + (isPopover ? arrowHeight : 0);\n      }\n\n      // adjust left | right and also the arrow\n      if (leftExceed) {\n        leftPosition = 0;\n        arrowLeft = x + elemWidth / 2 - arrowAdjust;\n      } else if (rightExceed) {\n        leftPosition = \"auto\";\n        rightPosition = 0;\n        arrowRight = elemWidth / 2 + rightBoundry - elemRectRight - arrowAdjust;\n      } else {\n        leftPosition = x - tipWidth / 2 + elemWidth / 2;\n        arrowLeft = tipWidth / 2 - arrowAdjust;\n      }\n    }\n\n    // apply style to tooltip/popover\n    setElementStyle(tooltip, {\n      top: `${topPosition}px`,\n      bottom: bottomPosition === \"\" ? \"\" : `${bottomPosition}px`,\n      left: leftPosition === \"auto\" ? leftPosition : `${leftPosition}px`,\n      right: rightPosition !== \"\" ? `${rightPosition}px` : \"\",\n    });\n\n    // update arrow placement\n    // istanbul ignore else @preserve\n    if (isHTMLElement(arrow)) {\n      if (arrowTop !== \"\") {\n        arrow.style.top = `${arrowTop}px`;\n      }\n      if (arrowLeft !== \"\") {\n        arrow.style.left = `${arrowLeft}px`;\n      } else if (arrowRight !== \"\") {\n        arrow.style.right = `${arrowRight}px`;\n      }\n    }\n    const updatedTooltipEvent = createCustomEvent<\n      Record<string, unknown>,\n      TooltipEvent | PopoverEvent\n    >(\n      `updated.bs.${toLowerCase(self.name)}`,\n    );\n    dispatchEvent(element, updatedTooltipEvent);\n  }\n};\n\nexport default styleTip;\n","import getTipTemplate from \"./getTipTemplate\";\nimport tooltipString from \"../strings/tooltipString\";\nimport { TooltipOptions } from \"../interface/tooltip\";\n\nconst tooltipDefaults: TooltipOptions = {\n  template: getTipTemplate(tooltipString),\n  title: \"\",\n  customClass: \"\",\n  trigger: \"hover focus\",\n  placement: \"top\",\n  sanitizeFn: undefined,\n  animation: true,\n  delay: 200,\n  container: document.body,\n  content: \"\",\n  dismissible: false,\n  btnClose: \"\",\n};\nexport default tooltipDefaults;\n","const p = (i) => i != null && typeof i == \"object\" || !1, k = (i) => p(i) && typeof i.nodeType == \"number\" && [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].some(\n  (t) => i.nodeType === t\n) || !1, _ = (i) => k(i) && i.nodeType === 1 || !1, B = (i) => typeof i == \"function\" || !1, m = \"PositionObserver Error\";\nclass x {\n  entries;\n  _tick;\n  _root;\n  _callback;\n  /**\n   * The constructor takes two arguments, a `callback`, which is called\n   * whenever the position of an observed element changes and an `options` object.\n   * The callback function should take an array of `PositionObserverEntry` objects\n   * as its only argument, but it's not required.\n   *\n   * @param callback the callback that applies to all targets of this observer\n   * @param options the options of this observer\n   */\n  constructor(t, n) {\n    if (!B(t))\n      throw new Error(`${m}: ${t} is not a function.`);\n    this.entries = [], this._callback = t, this._root = _(n?.root) ? n.root : document?.documentElement, this._tick = 0;\n  }\n  /**\n   * Start observing the position of the specified element.\n   * If the element is not currently attached to the DOM,\n   * it will NOT be added to the entries.\n   * @param target\n   */\n  observe = (t) => {\n    if (!_(t))\n      throw new Error(\n        `${m}: ${t} is not an instance of HTMLElement.`\n      );\n    if (!this._root.contains(t)) return;\n    const { clientWidth: n, clientHeight: o } = this._root, h = t.getBoundingClientRect(), { left: l, top: u, bottom: e, right: s, width: r, height: c } = h, a = u > 1 - c && l > 1 - r && e <= o + c - 1 && s <= n + r - 1;\n    this.entries.push({ target: t, boundingBox: h, isVisible: a }), this._tick || (this._tick = requestAnimationFrame(this._runCallback));\n  };\n  /**\n   * Stop observing the position of the specified element.\n   * @param target\n   */\n  unobserve = (t) => {\n    const n = this.entries.findIndex((o) => o.target === t);\n    this.entries.splice(n, 1);\n  };\n  /**\n   * Private method responsible for all the heavy duty.\n   */\n  _runCallback = () => {\n    if (!this.entries.length) return;\n    const t = [], { clientWidth: n, clientHeight: o } = this._root;\n    this.entries.forEach((h, l) => {\n      const { target: u, boundingBox: e } = h, s = u.getBoundingClientRect(), { left: r, top: c, bottom: a, right: d, width: b, height: f } = s;\n      if (e.left !== r || e.top !== c || e.right !== d || e.bottom !== a) {\n        const g = c > 1 - f && r > 1 - b && a <= o + f - 1 && d <= n + b - 1;\n        this.entries[l].boundingBox = s, this.entries[l].isVisible = g, t.push({ target: u, boundingBox: s, isVisible: g });\n      }\n    }), t.length && this._callback(t), requestAnimationFrame(this._runCallback);\n  };\n  /**\n   * Immediately stop observing all elements.\n   */\n  disconnect = () => {\n    cancelAnimationFrame(this._tick), this.entries.length = 0, this._tick = 0;\n  };\n}\nexport {\n  x as default\n};\n//# sourceMappingURL=index.mjs.map\n","/**\n * Global namespace for `data-bs-title` attribute.\n */\nconst dataOriginalTitle = \"data-original-title\";\nexport default dataOriginalTitle;\n","/** @type {string} */\nconst tooltipComponent = \"Tooltip\";\nexport default tooltipComponent;\n","import {\n  isArray,\n  isFunction,\n  isHTMLElement,\n  isNode,\n  isNodeList,\n  isString,\n} from \"@thednp/shorty\";\n\n/**\n * Append an existing `Element` to Popover / Tooltip component or HTML\n * markup string to be parsed & sanitized to be used as popover / tooltip content.\n *\n * @param element target\n * @param content the `Element` to append / string\n * @param sanitizeFn a function to sanitize string content\n */\nconst setHtml = (\n  element: HTMLElement,\n  content: Node[] | Node | string,\n  sanitizeFn?: (s: string) => string,\n) => {\n  // istanbul ignore else @preserve\n  if (isString(content) && content.length) {\n    let dirty = content.trim(); // fixing #233\n    if (isFunction(sanitizeFn)) dirty = sanitizeFn(dirty);\n\n    const domParser = new DOMParser();\n    const tempDocument = domParser.parseFromString(dirty, \"text/html\");\n    element.append(...[...tempDocument.body.childNodes]);\n  } else if (isHTMLElement(content)) {\n    element.append(content);\n  } else if (\n    isNodeList(content) || (isArray(content) && content.every(isNode))\n  ) {\n    element.append(...[...content]);\n  }\n};\nexport default setHtml;\n","import {\n  addClass,\n  createElement,\n  hasClass,\n  isHTMLElement,\n  isRTL,\n  querySelector,\n  setAttribute,\n} from \"@thednp/shorty\";\n\nimport tooltipComponent from \"../strings/tooltipComponent\";\nimport tooltipString from \"../strings/tooltipString\";\nimport popoverString from \"../strings/popoverString\";\nimport fadeClass from \"../strings/fadeClass\";\nimport tipClassPositions from \"./tipClassPositions\";\nimport setHtml from \"./setHtml\";\nimport Tooltip from \"../components/tooltip\";\nimport Popover from \"../components/popover\";\n\n/**\n * Creates a new tooltip / popover.\n *\n * @param self the `Tooltip` / `Popover` instance\n */\nconst createTip = (self: Tooltip | Popover) => {\n  const isTooltip = self.name === tooltipComponent;\n\n  const { id, element, options } = self;\n  const {\n    title,\n    placement,\n    template,\n    animation,\n    customClass,\n    sanitizeFn,\n    dismissible,\n    content,\n    btnClose,\n  } = options;\n  const tipString = isTooltip ? tooltipString : popoverString;\n  const tipPositions = { ...tipClassPositions };\n  let titleParts: Node[] = [];\n  let contentParts: Node[] = [];\n\n  if (isRTL(element)) {\n    tipPositions.left = \"end\";\n    tipPositions.right = \"start\";\n  }\n\n  // set initial popover class\n  const placementClass = `bs-${tipString}-${tipPositions[placement]}`;\n\n  // load template\n  let tooltipTemplate: Node | string;\n  if (isHTMLElement(template)) {\n    tooltipTemplate = template;\n  } else {\n    const htmlMarkup = createElement(\"div\") as HTMLElement;\n    setHtml(htmlMarkup, template, sanitizeFn);\n    tooltipTemplate = htmlMarkup.firstChild as HTMLElement;\n  }\n\n  // set popover markup\n  self.tooltip = isHTMLElement(tooltipTemplate)\n    ? (tooltipTemplate.cloneNode(true) as HTMLElement)\n    // istanbul ignore next @preserve\n    : undefined;\n\n  const { tooltip } = self;\n  // istanbul ignore else @preserve\n  if (tooltip) {\n    // set id and role attributes\n    setAttribute(tooltip, \"id\", id);\n    setAttribute(tooltip, \"role\", tooltipString);\n\n    const bodyClass = isTooltip\n      ? `${tooltipString}-inner`\n      : `${popoverString}-body`;\n    const tooltipHeader = isTooltip\n      ? null\n      : querySelector(`.${popoverString}-header`, tooltip);\n    const tooltipBody = querySelector(`.${bodyClass}`, tooltip);\n\n    // set arrow and enable access for styleTip\n    self.arrow = querySelector(`.${tipString}-arrow`, tooltip) as HTMLElement;\n    const { arrow } = self;\n\n    if (isHTMLElement(title)) titleParts = [title.cloneNode(true)];\n    else {\n      const tempTitle = createElement(\"div\") as HTMLElement;\n      setHtml(tempTitle, title, sanitizeFn);\n      titleParts = [...[...tempTitle.childNodes]];\n    }\n\n    if (isHTMLElement(content)) contentParts = [content.cloneNode(true)];\n    else {\n      const tempContent = createElement(\"div\") as HTMLElement;\n      setHtml(tempContent, content, sanitizeFn);\n      contentParts = [...[...tempContent.childNodes]];\n    }\n\n    // set dismissible button\n    if (dismissible) {\n      if (title) {\n        if (isHTMLElement(btnClose)) {\n          titleParts = [...titleParts, btnClose.cloneNode(true)];\n        } else {\n          const tempBtn = createElement(\"div\") as HTMLElement;\n          setHtml(tempBtn, btnClose, sanitizeFn);\n          titleParts = [...titleParts, tempBtn.firstChild as Node];\n        }\n      } else {\n        // istanbul ignore else @preserve\n        if (tooltipHeader) tooltipHeader.remove();\n        if (isHTMLElement(btnClose)) {\n          contentParts = [...contentParts, btnClose.cloneNode(true)];\n        } else {\n          const tempBtn = createElement(\"div\") as HTMLElement;\n          setHtml(tempBtn, btnClose, sanitizeFn);\n          contentParts = [...contentParts, tempBtn.firstChild as Node];\n        }\n      }\n    }\n\n    // fill the template with content from options / data attributes\n    // also sanitize title && content\n    // istanbul ignore else @preserve\n    if (!isTooltip) {\n      // istanbul ignore else @preserve\n      if (title && tooltipHeader) {\n        setHtml(tooltipHeader, titleParts, sanitizeFn);\n      }\n      // istanbul ignore else @preserve\n      if (content && tooltipBody) {\n        setHtml(tooltipBody, contentParts, sanitizeFn);\n      }\n      // set btn\n      self.btn = querySelector(\".btn-close\", tooltip) || undefined;\n    } else if (title && tooltipBody) setHtml(tooltipBody, title, sanitizeFn);\n\n    // Bootstrap 5.2.x\n    // addClass(tooltip, 'position-absolute');\n    addClass(tooltip, \"position-fixed\");\n    addClass(arrow, \"position-absolute\");\n\n    // set popover animation and placement\n    // istanbul ignore else @preserve\n    if (!hasClass(tooltip, tipString)) addClass(tooltip, tipString);\n    // istanbul ignore else @preserve\n    if (animation && !hasClass(tooltip, fadeClass)) {\n      addClass(tooltip, fadeClass);\n    }\n    // istanbul ignore else @preserve\n    if (customClass && !hasClass(tooltip, customClass)) {\n      addClass(tooltip, customClass);\n    }\n    // istanbul ignore else @preserve\n    if (!hasClass(tooltip, placementClass)) addClass(tooltip, placementClass);\n  }\n};\n\nexport default createTip;\n","import {\n  getDocument,\n  getElementStyle,\n  getParentNode,\n  isShadowRoot,\n  isTableElement,\n} from \"@thednp/shorty\";\n\n/**\n * Returns an `HTMLElement` to be used as default value for *options.container*\n * for `Tooltip` / `Popover` components.\n *\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param element the target\n * @returns the query result\n */\nconst getElementContainer = (element: HTMLElement): ParentNode => {\n  const majorBlockTags = [\"HTML\", \"BODY\"];\n  const containers: ParentNode[] = [];\n  let { parentNode } = element as Node;\n\n  while (parentNode && !majorBlockTags.includes(parentNode.nodeName)) {\n    parentNode = getParentNode(parentNode) as ParentNode;\n    // istanbul ignore else @preserve\n    if (!(isShadowRoot(parentNode) || isTableElement(parentNode))) {\n      containers.push(parentNode);\n    }\n  }\n\n  return (\n    containers.find((c, i) => {\n      if (\n        getElementStyle(c as HTMLElement, \"position\") !== \"relative\" &&\n        containers.slice(i + 1).every((r) =>\n          getElementStyle(r as HTMLElement, \"position\") === \"static\"\n        )\n      ) {\n        return c;\n      }\n      return null;\n    }) ||\n    // istanbul ignore next: optional guard\n    getDocument(element).body\n  );\n};\n\nexport default getElementContainer;\n","/* Native JavaScript for Bootstrap 5 | Tooltip\n---------------------------------------------- */\nimport {\n  addClass,\n  ariaDescribedBy,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focus,\n  focusEvent,\n  focusinEvent,\n  focusoutEvent,\n  getAttribute,\n  getDocument,\n  getElementStyle,\n  getInstance,\n  getUID,\n  hasAttribute,\n  hasClass,\n  isApple,\n  mouseclickEvent,\n  mousedownEvent,\n  mouseenterEvent,\n  mousehoverEvent,\n  mouseleaveEvent,\n  ObjectAssign,\n  passiveHandler,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n  Timer,\n  toLowerCase,\n  touchstartEvent,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\nimport PositionObserver from \"@thednp/position-observer\";\n\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport dataOriginalTitle from \"../strings/dataOriginalTitle\";\nimport showClass from \"../strings/showClass\";\nimport tooltipString from \"../strings/tooltipString\";\nimport tooltipComponent from \"../strings/tooltipComponent\";\nimport popoverString from \"../strings/popoverString\";\nimport popoverComponent from \"../strings/popoverComponent\";\nimport modalString from \"../strings/modalString\";\nimport offcanvasString from \"../strings/offcanvasString\";\n\nimport styleTip from \"../util/styleTip\";\nimport createTip from \"../util/createTip\";\nimport { appendPopup, hasPopup, removePopup } from \"../util/popupContainer\";\nimport getElementContainer from \"../util/getElementContainer\";\nimport tooltipDefaults from \"../util/tooltipDefaults\";\nimport BaseComponent from \"./base-component\";\nimport type { TooltipEvent, TooltipOptions } from \"../interface/tooltip\";\nimport type { PopoverEvent, PopoverOptions } from \"../interface/popover\";\n\n// TOOLTIP PRIVATE GC\n// ==================\nconst tooltipSelector =\n  `[${dataBsToggle}=\"${tooltipString}\"],[data-tip=\"${tooltipString}\"]`;\nconst titleAttr = \"title\";\n\n/**\n * Static method which returns an existing `Tooltip` instance associated\n * to a target `Element`.\n */\nlet getTooltipInstance = (element: HTMLElement) =>\n  getInstance<Tooltip>(element, tooltipComponent);\n\n/**\n * A `Tooltip` initialization callback.\n */\nconst tooltipInitCallback = (element: HTMLElement) => new Tooltip(element);\n\n// TOOLTIP PRIVATE METHODS\n// =======================\n/**\n * Removes the tooltip from the DOM.\n *\n * @param self the `Tooltip` instance\n */\nconst removeTooltip = (self: Tooltip) => {\n  const { element, tooltip, container, offsetParent } = self;\n  removeAttribute(element, ariaDescribedBy);\n  removePopup(\n    tooltip as HTMLElement,\n    container === offsetParent ? container : offsetParent,\n  );\n};\n\n/**\n * Check if container contains the tooltip.\n *\n * @param self Tooltip\n */\nconst hasTip = (self: Tooltip): boolean | undefined => {\n  const { tooltip, container, offsetParent } = self;\n\n  return tooltip &&\n    hasPopup(tooltip, container === offsetParent ? container : offsetParent);\n};\n\n/**\n * Executes after the instance has been disposed.\n *\n * @param self the `Tooltip` instance\n * @param callback the parent dispose callback\n */\nconst disposeTooltipComplete = (self: Tooltip, callback?: () => void) => {\n  const { element } = self;\n  self._toggleEventListeners();\n\n  // istanbul ignore else @preserve\n  if (\n    hasAttribute(element, dataOriginalTitle) && self.name === tooltipComponent\n  ) {\n    toggleTooltipTitle(self);\n  }\n  // istanbul ignore else @preserve\n  if (callback) callback();\n};\n\n/**\n * Toggles on/off the special `Tooltip` event listeners.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipAction = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n\n  action(\n    getDocument(element),\n    touchstartEvent,\n    self.handleTouch,\n    passiveHandler,\n  );\n};\n\n/**\n * Executes after the tooltip was shown to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipShownAction = (self: Tooltip) => {\n  const { element } = self;\n  const shownTooltipEvent = createCustomEvent<\n    Record<string, never>,\n    TooltipEvent | PopoverEvent\n  >(\n    `shown.bs.${toLowerCase(self.name)}`,\n  );\n\n  toggleTooltipAction(self, true);\n  dispatchEvent(element, shownTooltipEvent);\n  Timer.clear(element, \"in\");\n};\n\n/**\n * Executes after the tooltip was hidden to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipHiddenAction = (self: Tooltip) => {\n  const { element } = self;\n  const hiddenTooltipEvent = createCustomEvent<\n    Record<string, never>,\n    TooltipEvent | PopoverEvent\n  >(\n    `hidden.bs.${toLowerCase(self.name)}`,\n  );\n\n  toggleTooltipAction(self);\n  removeTooltip(self);\n  dispatchEvent(element, hiddenTooltipEvent);\n\n  Timer.clear(element, \"out\");\n};\n\n/**\n * Toggles on/off the `Tooltip` event listeners that hide/update the tooltip.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipOpenHandlers = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n  // const { offsetHeight, scrollHeight } = container as HTMLElement;\n  const parentModal = closest(element, `.${modalString}`);\n  const parentOffcanvas = closest(element, `.${offcanvasString}`);\n\n  if (add) self._observer.observe(self.element);\n  else self._observer.disconnect();\n\n  // dismiss tooltips inside modal / offcanvas\n  if (parentModal) {\n    action(parentModal, `hide.bs.${modalString}`, self.handleHide);\n  }\n  if (parentOffcanvas) {\n    action(parentOffcanvas, `hide.bs.${offcanvasString}`, self.handleHide);\n  }\n};\n\n/**\n * Toggles the `title` and `data-original-title` attributes.\n *\n * @param self the `Tooltip` instance\n * @param content when `true`, event listeners are added\n */\nconst toggleTooltipTitle = (self: Tooltip, content?: string) => {\n  // [0 - add, 1 - remove] | [0 - remove, 1 - add]\n  const titleAtt = [dataOriginalTitle, titleAttr];\n  const { element } = self;\n\n  setAttribute(\n    element,\n    titleAtt[content ? 0 : 1],\n    content ||\n      getAttribute(element, titleAtt[0]) ||\n      // istanbul ignore next @preserve\n      \"\",\n  );\n  removeAttribute(element, titleAtt[content ? 1 : 0]);\n};\n\n// TOOLTIP DEFINITION\n// ==================\n/** Creates a new `Tooltip` instance. */\nexport default class Tooltip extends BaseComponent {\n  static selector = tooltipSelector;\n  static init = tooltipInitCallback;\n  static getInstance = getTooltipInstance;\n  static styleTip = styleTip;\n  declare options: TooltipOptions;\n  declare btn?: HTMLElement;\n  declare tooltip?: HTMLElement;\n  declare container: ParentNode;\n  declare arrow?: HTMLElement;\n  declare offsetParent?: HTMLElement;\n  declare enabled: boolean;\n  declare id: string;\n  declare _observer: PositionObserver;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<TooltipOptions>) {\n    super(target, config);\n\n    const { element } = this;\n    const isTooltip = this.name === tooltipComponent;\n    const tipString = isTooltip ? tooltipString : popoverString;\n    const tipComponent = isTooltip ? tooltipComponent : popoverComponent;\n\n    // istanbul ignore next @preserve: this is to set Popover too\n    getTooltipInstance = <T extends Tooltip>(elem: HTMLElement) =>\n      getInstance<T>(elem, tipComponent);\n\n    // additional properties\n    this.enabled = true;\n    /** Set unique ID for `aria-describedby`. */\n    this.id = `${tipString}-${getUID(element, tipString)}`;\n\n    // instance options\n    const { options } = this;\n\n    // invalidate\n    if (!((!options.title && isTooltip) || (!isTooltip && !options.content))) {\n      // reset default options\n      ObjectAssign(tooltipDefaults, { titleAttr: \"\" });\n\n      // set title attributes and add event listeners\n      // istanbul ignore else @preserve\n      if (\n        hasAttribute(element, titleAttr) && isTooltip &&\n        typeof options.title === \"string\"\n      ) {\n        toggleTooltipTitle(this, options.title);\n      }\n\n      // set containers\n      this.container = getElementContainer(element);\n      this.offsetParent = [\"sticky\", \"fixed\"].some(\n          (position) =>\n            getElementStyle(this.container as HTMLElement, \"position\") ===\n              position,\n        )\n        ? (this.container as HTMLElement)\n        : getDocument(this.element).body;\n\n      // create tooltip here\n      createTip(this);\n\n      // create observer\n      this._observer = new PositionObserver(() => this.update());\n\n      // attach events\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return tooltipComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return tooltipDefaults;\n  }\n\n  // TOOLTIP PUBLIC METHODS\n  // ======================\n  /** Handles the focus event on iOS. */\n  // istanbul ignore next @preserve - impossible to test without Apple device\n  handleFocus = () => focus(this.element);\n  /** Shows the tooltip. */\n  handleShow = () => this.show();\n  show() {\n    const { options, tooltip, element, container, offsetParent, id } = this;\n    const { animation } = options;\n    const outTimer = Timer.get(element, \"out\");\n    const tipContainer = container === offsetParent ? container : offsetParent;\n\n    Timer.clear(element, \"out\");\n\n    if (tooltip && !outTimer && !hasTip(this)) {\n      Timer.set(\n        element,\n        () => {\n          const showTooltipEvent = createCustomEvent<\n            Record<string, never>,\n            TooltipEvent | PopoverEvent\n          >(\n            `show.bs.${toLowerCase(this.name)}`,\n          );\n          dispatchEvent(element, showTooltipEvent);\n\n          // istanbul ignore else @preserve\n          if (!showTooltipEvent.defaultPrevented) {\n            // append to container\n            appendPopup(tooltip, tipContainer);\n\n            setAttribute(element, ariaDescribedBy, `#${id}`);\n\n            this.update();\n            toggleTooltipOpenHandlers(this, true);\n\n            // istanbul ignore else @preserve\n            if (!hasClass(tooltip, showClass)) addClass(tooltip, showClass);\n            // istanbul ignore else @preserve\n            if (animation) {\n              emulateTransitionEnd(tooltip, () => tooltipShownAction(this));\n            } else tooltipShownAction(this);\n          }\n        },\n        17,\n        \"in\",\n      );\n    }\n  }\n\n  /** Hides the tooltip. */\n  handleHide = () => this.hide();\n  hide() {\n    const { options, tooltip, element } = this;\n    const { animation, delay } = options;\n\n    Timer.clear(element, \"in\");\n\n    // istanbul ignore else @preserve\n    if (tooltip && hasTip(this)) {\n      Timer.set(\n        element,\n        () => {\n          const hideTooltipEvent = createCustomEvent<\n            Record<string, never>,\n            TooltipEvent | PopoverEvent\n          >(\n            `hide.bs.${toLowerCase(this.name)}`,\n          );\n          dispatchEvent(element, hideTooltipEvent);\n\n          // istanbul ignore else @preserve\n          if (!hideTooltipEvent.defaultPrevented) {\n            this.update();\n            removeClass(tooltip, showClass);\n            toggleTooltipOpenHandlers(this);\n\n            // istanbul ignore else @preserve\n            if (animation) {\n              emulateTransitionEnd(tooltip, () => tooltipHiddenAction(this));\n            } else tooltipHiddenAction(this);\n          }\n        },\n        delay + 17,\n        \"out\",\n      );\n    }\n  }\n\n  /** Updates the tooltip position. */\n  update = () => {\n    styleTip<Tooltip>(this);\n  };\n\n  /** Toggles the tooltip visibility. */\n  toggle = () => {\n    const { tooltip } = this;\n\n    if (tooltip && !hasTip(this)) this.show();\n    else this.hide();\n  };\n\n  /** Enables the tooltip. */\n  enable() {\n    const { enabled } = this;\n    // istanbul ignore else @preserve\n    if (!enabled) {\n      this._toggleEventListeners(true);\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Disables the tooltip. */\n  disable() {\n    const { tooltip, enabled } = this;\n    // istanbul ignore else @preserve\n    if (enabled) {\n      if (tooltip && hasTip(this)) this.hide();\n      this._toggleEventListeners();\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Toggles the `disabled` property. */\n  toggleEnabled() {\n    if (!this.enabled) this.enable();\n    else this.disable();\n  }\n\n  /**\n   * Handles the `touchstart` event listener for `Tooltip`\n   *\n   * @this {Tooltip}\n   * @param {TouchEvent} e the `Event` object\n   */\n  handleTouch = ({ target }: TouchEvent) => {\n    const { tooltip, element } = this;\n\n    // istanbul ignore if @preserve\n    if (\n      (tooltip && tooltip.contains(target as HTMLElement)) ||\n      target === element ||\n      (target && element.contains(target as HTMLElement))\n    ) {\n      // smile for ESLint\n    } else {\n      this.hide();\n    }\n  };\n\n  /**\n   * Toggles on/off the `Tooltip` event listeners.\n   *\n   * @param add when `true`, event listeners are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    // btn is only for dismissible popover\n    const { element, options, btn } = this;\n    const { trigger } = options;\n    const isPopover = this.name !== tooltipComponent;\n    const dismissible = isPopover && (options as PopoverOptions).dismissible\n      ? true\n      : false;\n\n    // istanbul ignore else @preserve\n    if (!trigger.includes(\"manual\")) {\n      this.enabled = !!add;\n\n      const triggerOptions = trigger.split(\" \");\n\n      triggerOptions.forEach((tr) => {\n        // istanbul ignore else @preserve\n        if (tr === mousehoverEvent) {\n          action(element, mousedownEvent, this.handleShow);\n          action(element, mouseenterEvent, this.handleShow);\n\n          // istanbul ignore else @preserve\n          if (!dismissible) {\n            action(element, mouseleaveEvent, this.handleHide);\n            action(\n              getDocument(element),\n              touchstartEvent,\n              this.handleTouch,\n              passiveHandler,\n            );\n          }\n        } else if (tr === mouseclickEvent) {\n          action(element, tr, !dismissible ? this.toggle : this.handleShow);\n        } else if (tr === focusEvent) {\n          action(element, focusinEvent, this.handleShow);\n          // istanbul ignore else @preserve\n          if (!dismissible) action(element, focusoutEvent, this.handleHide);\n          // istanbul ignore else @preserve\n          if (isApple()) {\n            action(element, mouseclickEvent, this.handleFocus);\n          }\n        }\n        // istanbul ignore else @preserve\n        if (dismissible && btn) {\n          action(btn, mouseclickEvent, this.handleHide);\n        }\n      });\n    }\n  };\n\n  /** Removes the `Tooltip` from the target element. */\n  dispose() {\n    const { tooltip, options } = this;\n    const clone = { ...this, name: this.name };\n    const callback = () =>\n      setTimeout(\n        () => disposeTooltipComplete(clone, () => super.dispose()),\n        17,\n      );\n\n    if (options.animation && hasTip(clone)) {\n      this.options.delay = 0; // reset delay\n      this.hide();\n      emulateTransitionEnd(tooltip as HTMLElement, callback);\n    } else {\n      callback();\n    }\n  }\n}\n","/* Native JavaScript for Bootstrap 5 | Popover\n---------------------------------------------- */\nimport { focus, getInstance, ObjectAssign } from \"@thednp/shorty\";\n\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport popoverString from \"../strings/popoverString\";\nimport popoverComponent from \"../strings/popoverComponent\";\n\nimport getTipTemplate from \"../util/getTipTemplate\";\nimport styleTip from \"../util/styleTip\";\nimport tooltipDefaults from \"../util/tooltipDefaults\";\nimport Tooltip from \"./tooltip\";\n\nimport type { PopoverOptions /* , PopoverEvent */ } from \"../interface/popover\";\n\n// POPOVER PRIVATE GC\n// ==================\nconst popoverSelector =\n  `[${dataBsToggle}=\"${popoverString}\"],[data-tip=\"${popoverString}\"]`;\n\nconst popoverDefaults: PopoverOptions = ObjectAssign({}, tooltipDefaults, {\n  template: getTipTemplate(popoverString),\n  content: \"\",\n  dismissible: false,\n  btnClose: '<button class=\"btn-close\" aria-label=\"Close\"></button>',\n});\n\n/**\n * Static method which returns an existing `Popover` instance associated\n * to a target `Element`.\n */\nconst getPopoverInstance = (element: HTMLElement) =>\n  getInstance<Popover>(element, popoverComponent);\n\n/**\n * A `Popover` initialization callback.\n */\nconst popoverInitCallback = (element: HTMLElement) => new Popover(element);\n\n// POPOVER DEFINITION\n// ==================\n/** Returns a new `Popover` instance. */\nexport default class Popover extends Tooltip {\n  static selector = popoverSelector;\n  static init = popoverInitCallback;\n  static getInstance = getPopoverInstance;\n  static styleTip = styleTip;\n  declare options: PopoverOptions;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<PopoverOptions>) {\n    super(target, config);\n  }\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return popoverComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return popoverDefaults;\n  }\n\n  /* extend original `show()` */\n  show = () => {\n    super.show();\n    // btn only exists within dismissible popover\n    const { options, btn } = this;\n    // istanbul ignore else @preserve\n    if (options.dismissible && btn) setTimeout(() => focus(btn), 17);\n  };\n}\n","/** @type {string} */\nconst scrollspyString = \"scrollspy\";\nexport default scrollspyString;\n","/** @type {string} */\nconst scrollspyComponent = \"ScrollSpy\";\nexport default scrollspyComponent;\n","/* Native JavaScript for Bootstrap 5 | ScrollSpy\n------------------------------------------------ */\nimport {\n  addClass,\n  createCustomEvent,\n  dispatchEvent,\n  getAttribute,\n  getBoundingClientRect,\n  getDocument,\n  getDocumentBody,\n  getDocumentElement,\n  getElementsByTagName,\n  getInstance,\n  hasClass,\n  isHTMLElement,\n  querySelector,\n  removeClass,\n} from \"@thednp/shorty\";\n\nimport PositionObserver from \"@thednp/position-observer\";\n\nimport activeClass from \"../strings/activeClass\";\nimport scrollspyString from \"../strings/scrollspyString\";\nimport scrollspyComponent from \"../strings/scrollspyComponent\";\n\nimport BaseComponent from \"./base-component\";\nimport { ScrollSpyEvent, ScrollSpyOptions } from \"../interface/scrollspy\";\n\n// SCROLLSPY PRIVATE GC\n// ====================\nconst scrollspySelector = '[data-bs-spy=\"scroll\"]';\n\nconst scrollspyDefaults: ScrollSpyOptions = {\n  offset: 10,\n  target: null,\n};\n\ntype ScrollSpyEventProps = {\n  relatedTarget: HTMLElement;\n};\n\n/**\n * Static method which returns an existing `ScrollSpy` instance associated\n * to a target `Element`.\n */\nconst getScrollSpyInstance = (element: HTMLElement) =>\n  getInstance<ScrollSpy>(element, scrollspyComponent);\n\n/**\n * A `ScrollSpy` initialization callback.\n */\nconst scrollspyInitCallback = (element: HTMLElement) => new ScrollSpy(element);\n\n// SCROLLSPY CUSTOM EVENT\n// ======================\nconst activateScrollSpy = createCustomEvent<\n  ScrollSpyEventProps,\n  ScrollSpyEvent\n>(`activate.bs.${scrollspyString}`);\n\n// SCROLLSPY PRIVATE METHODS\n// =========================\n/**\n * Update the state of all items.\n *\n * @param self the `ScrollSpy` instance\n */\nconst updateSpyTargets = (self: ScrollSpy) => {\n  const { target, scrollTarget, options, itemsLength, scrollHeight, element } =\n    self;\n  const { offset } = options;\n  const isRoot = scrollTarget !== element;\n\n  const links = target && getElementsByTagName(\"A\", target);\n  const doc = getDocument(element);\n  const scrollHEIGHT = scrollTarget.scrollHeight;\n\n  self.scrollTop = scrollTarget.scrollTop;\n\n  // only update items/offsets once or with each mutation\n  // istanbul ignore else @preserve\n  if (\n    links && (scrollHEIGHT !== scrollHeight || itemsLength !== links.length)\n  ) {\n    let href;\n    let targetItem;\n    let rect;\n\n    // reset arrays & update\n    self.items = [];\n    self.targets = [];\n    self.offsets = [];\n    self.scrollHeight = scrollHEIGHT;\n    self.maxScroll = self.scrollHeight - getOffsetHeight(self);\n\n    Array.from(links).forEach((link) => {\n      href = getAttribute(link, \"href\");\n      targetItem = href && href.charAt(0) === \"#\" && href.slice(-1) !== \"#\" &&\n        querySelector(href, doc);\n\n      if (targetItem) {\n        self.items.push(link);\n        self.targets.push(targetItem);\n        rect = getBoundingClientRect(targetItem);\n        self.offsets.push(\n          (isRoot ? rect.top + self.scrollTop : targetItem.offsetTop) - offset,\n        );\n      }\n    });\n    self.itemsLength = self.items.length;\n  }\n};\n\n/**\n * Toggles on/off the component observer.\n *\n * @param self the ScrollSpy instance\n * @param add when `true`, listener is added\n */\nconst toggleObservers = (\n  { targets, scrollTarget, element, _observer }: ScrollSpy,\n  add?: boolean,\n) => {\n  if (add) {\n    if (scrollTarget === element) {\n      targets.forEach((targetItem) => _observer.observe(targetItem));\n    } else {\n      _observer.observe(element);\n    }\n  } else _observer.disconnect();\n};\n\n/**\n * Returns the `scrollHeight` property of the scrolling element.\n *\n * @param scrollTarget the `ScrollSpy` instance\n * @return `scrollTarget` height\n */\nconst getScrollHeight = (scrollTarget: HTMLElement) => {\n  return scrollTarget.scrollHeight;\n};\n\n/**\n * Returns the height property of the scrolling element.\n *\n * @param params the `ScrollSpy` instance\n */\nconst getOffsetHeight = ({ element, scrollTarget }: ScrollSpy) => {\n  return scrollTarget !== element\n    ? scrollTarget.clientHeight\n    : getBoundingClientRect(element).height;\n};\n\n/**\n * Clear all items of the target.\n *\n * @param target a single item\n */\nconst clear = (target: HTMLElement) => {\n  [...getElementsByTagName(\"A\", target)].forEach((item) => {\n    if (hasClass(item, activeClass)) removeClass(item, activeClass);\n  });\n};\n\n/**\n * Activates a new item.\n *\n * @param self the `ScrollSpy` instance\n * @param item a single item\n */\nconst activate = (self: ScrollSpy, item: HTMLElement) => {\n  const { target, element } = self;\n\n  // istanbul ignore else @preserve\n  if (isHTMLElement(target)) clear(target);\n\n  self.activeItem = item;\n  addClass(item, activeClass);\n\n  // activate all parents\n  const parents: HTMLElement[] = [];\n  let parentItem = item;\n  while (parentItem !== getDocumentBody(element)) {\n    parentItem = parentItem.parentElement as HTMLElement;\n    if (hasClass(parentItem, \"nav\") || hasClass(parentItem, \"dropdown-menu\")) {\n      parents.push(parentItem);\n    }\n  }\n\n  parents.forEach((menuItem) => {\n    const parentLink = menuItem.previousElementSibling as HTMLElement | null;\n\n    // istanbul ignore else @preserve\n    if (parentLink && !hasClass(parentLink, activeClass)) {\n      addClass(parentLink, activeClass);\n    }\n  });\n\n  // dispatch\n  activateScrollSpy.relatedTarget = item;\n  dispatchEvent(element, activateScrollSpy);\n};\n\n// SCROLLSPY DEFINITION\n// ====================\n/** Returns a new `ScrollSpy` instance. */\nexport default class ScrollSpy extends BaseComponent {\n  static selector = scrollspySelector;\n  static init = scrollspyInitCallback;\n  static getInstance = getScrollSpyInstance;\n  declare options: ScrollSpyOptions;\n  declare target: HTMLElement | null;\n  declare scrollTarget: HTMLElement;\n  declare scrollTop: number;\n  declare maxScroll: number;\n  declare scrollHeight: number;\n  declare activeItem: HTMLElement | null;\n  declare items: HTMLElement[];\n  declare targets: HTMLElement[];\n  declare itemsLength: number;\n  declare offsets: number[];\n  declare _observer: PositionObserver;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(\n    target: HTMLElement | string,\n    config?: Partial<ScrollSpyOptions>,\n  ) {\n    super(target, config);\n\n    // initialization element & options\n    const { element, options } = this;\n\n    // additional properties\n    this.target = querySelector(\n      options.target as HTMLElement | string,\n      getDocument(element),\n    );\n\n    // invalidate\n    if (this.target) {\n      // set initial state\n      this.scrollTarget = element.clientHeight < element.scrollHeight\n        ? element\n        : getDocumentElement(element);\n      this.scrollHeight = getScrollHeight(this.scrollTarget);\n\n      // run an initial burst, we need to know the targets\n      this.refresh();\n\n      // create observer\n      this._observer = new PositionObserver(() => this.refresh(), {\n        root: this.scrollTarget,\n      });\n\n      // add event handlers\n      toggleObservers(this, true);\n    }\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return scrollspyComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return scrollspyDefaults;\n  }\n  /* eslint-enable */\n\n  // SCROLLSPY PUBLIC METHODS\n  // ========================\n  /** Updates all items. */\n  refresh = () => {\n    const { target } = this;\n\n    // check if target is visible and invalidate\n    // istanbul ignore else @preserve\n    if (isHTMLElement(target) && target.offsetHeight > 0) {\n      updateSpyTargets(this);\n\n      const { scrollTop, maxScroll, itemsLength, items, activeItem } = this;\n\n      if (scrollTop >= maxScroll) {\n        const newActiveItem = items[itemsLength - 1];\n\n        // istanbul ignore else @preserve\n        if (activeItem !== newActiveItem) {\n          activate(this, newActiveItem);\n        }\n        return;\n      }\n\n      const { offsets } = this;\n\n      // istanbul ignore else @preserve\n      if (activeItem && scrollTop < offsets[0] && offsets[0] > 0) {\n        this.activeItem = null;\n        // istanbul ignore else @preserve\n        if (target) clear(target);\n        return;\n      }\n\n      items.forEach((item, i) => {\n        if (\n          activeItem !== item &&\n          scrollTop >= offsets[i] &&\n          (typeof offsets[i + 1] === \"undefined\" || scrollTop < offsets[i + 1])\n        ) {\n          activate(this, item);\n        }\n      });\n    }\n  };\n\n  /** Removes `ScrollSpy` from the target element. */\n  dispose() {\n    const clone = { ...this };\n    toggleObservers(clone);\n    super.dispose();\n  }\n}\n","/** @type {string} */\nconst tabString = \"tab\";\nexport default tabString;\n","/** @type {string} */\nconst tabComponent = \"Tab\";\nexport default tabComponent;\n","/* Native JavaScript for Bootstrap 5 | Tab\n------------------------------------------ */\nimport {\n  addClass,\n  ariaSelected,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  getElementsByClassName,\n  getInstance,\n  hasClass,\n  isHTMLElement,\n  mouseclickEvent,\n  querySelector,\n  reflow,\n  removeClass,\n  setAttribute,\n  Timer,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport collapsingClass from \"../strings/collapsingClass\";\nimport activeClass from \"../strings/activeClass\";\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport dropdownClasses from \"../strings/dropdownClasses\";\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport tabString from \"../strings/tabString\";\nimport tabComponent from \"../strings/tabComponent\";\n\nimport getTargetElement from \"../util/getTargetElement\";\nimport BaseComponent from \"./base-component\";\nimport type { /* TabOptions, */ TabEvent } from \"../interface/tab\";\n\n// TAB PRIVATE GC\n// ================\nconst tabSelector = `[${dataBsToggle}=\"${tabString}\"]`;\n\n/**\n * Static method which returns an existing `Tab` instance associated\n * to a target `Element`.\n */\nconst getTabInstance = (element: HTMLElement) =>\n  getInstance<Tab>(element, tabComponent);\n\n/** A `Tab` initialization callback. */\nconst tabInitCallback = (element: HTMLElement) => new Tab(element);\n\ntype TabEventProps = {\n  relatedTarget: HTMLElement | undefined;\n};\n\n// TAB CUSTOM EVENTS\n// =================\nconst showTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `show.bs.${tabString}`,\n);\nconst shownTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `shown.bs.${tabString}`,\n);\nconst hideTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `hide.bs.${tabString}`,\n);\nconst hiddenTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `hidden.bs.${tabString}`,\n);\n\ninterface TabPrivate {\n  tab: HTMLElement | null;\n  content: HTMLElement | null;\n  currentHeight: number;\n  nextHeight: number;\n}\n\n/**\n * Stores the current active tab and its content\n * for a given `.nav` element.\n */\nconst tabPrivate: Map<HTMLElement, TabPrivate> = new Map();\n\n// TAB PRIVATE METHODS\n// ===================\n/**\n * Executes after tab transition has finished.\n *\n * @param self the `Tab` instance\n */\nconst triggerTabEnd = (self: Tab) => {\n  const { tabContent, nav } = self;\n\n  // istanbul ignore else @preserve\n  if (tabContent && hasClass(tabContent, collapsingClass)) {\n    tabContent.style.height = \"\";\n    removeClass(tabContent, collapsingClass);\n  }\n\n  // istanbul ignore else @preserve\n  if (nav) Timer.clear(nav);\n};\n\n/**\n * Executes before showing the tab content.\n *\n * @param self the `Tab` instance\n */\nconst triggerTabShow = (self: Tab) => {\n  const { element, tabContent, content: nextContent, nav } = self;\n  const { tab } = (isHTMLElement(nav) && tabPrivate.get(nav)) ||\n    // istanbul ignore next @preserve\n    { tab: null };\n\n  // istanbul ignore else @preserve\n  if (tabContent && nextContent && hasClass(nextContent, fadeClass)) {\n    const { currentHeight, nextHeight } = tabPrivate.get(element) ||\n      // istanbul ignore next @preserve\n      { currentHeight: 0, nextHeight: 0 };\n    // istanbul ignore else @preserve: vitest won't validate this branch\n    if (currentHeight !== nextHeight) {\n      // enables height animation\n      setTimeout(() => {\n        tabContent.style.height = `${nextHeight}px`;\n        reflow(tabContent);\n        emulateTransitionEnd(tabContent, () => triggerTabEnd(self));\n      }, 50);\n    } else {\n      triggerTabEnd(self);\n    }\n  } else if (nav) Timer.clear(nav);\n\n  shownTabEvent.relatedTarget = tab as HTMLElement | undefined;\n\n  dispatchEvent(element, shownTabEvent);\n};\n\n/**\n * Executes before hiding the tab.\n *\n * @param self the `Tab` instance\n */\nconst triggerTabHide = (self: Tab) => {\n  const { element, content: nextContent, tabContent, nav } = self;\n  const { tab, content } = (nav && tabPrivate.get(nav)) ||\n    // istanbul ignore next @preserve\n    { tab: null, content: null };\n  let currentHeight = 0;\n\n  // istanbul ignore else @preserve\n  if (tabContent && nextContent && hasClass(nextContent, fadeClass)) {\n    [content, nextContent].forEach((c) => {\n      // istanbul ignore else @preserve\n      if (isHTMLElement(c)) addClass(c, \"overflow-hidden\");\n    });\n    currentHeight = isHTMLElement(content)\n      ? content.scrollHeight // istanbul ignore next @preserve\n      : 0;\n  }\n\n  // update relatedTarget and dispatch event\n  showTabEvent.relatedTarget = tab as HTMLElement | undefined;\n  hiddenTabEvent.relatedTarget = element;\n  dispatchEvent(element, showTabEvent);\n\n  // istanbul ignore else @preserve\n  if (!showTabEvent.defaultPrevented) {\n    // istanbul ignore else @preserve\n    if (nextContent) addClass(nextContent, activeClass);\n    // istanbul ignore else @preserve\n    if (content) removeClass(content, activeClass);\n\n    // istanbul ignore else @preserve\n    if (tabContent && nextContent && hasClass(nextContent, fadeClass)) {\n      const nextHeight = nextContent.scrollHeight;\n      tabPrivate.set(element, {\n        currentHeight,\n        nextHeight,\n        tab: null,\n        content: null,\n      });\n\n      addClass(tabContent, collapsingClass);\n      tabContent.style.height = `${currentHeight}px`;\n      reflow(tabContent);\n      [content, nextContent].forEach((c) => {\n        // istanbul ignore else @preserve\n        if (c) removeClass(c, \"overflow-hidden\");\n      });\n    }\n\n    if (nextContent && nextContent && hasClass(nextContent, fadeClass)) {\n      setTimeout(() => {\n        addClass(nextContent, showClass);\n        emulateTransitionEnd(nextContent, () => {\n          triggerTabShow(self);\n        });\n      }, 1);\n    } else {\n      // istanbul ignore else @preserve\n      if (nextContent) addClass(nextContent, showClass);\n      triggerTabShow(self);\n    }\n\n    // istanbul ignore else @preserve\n    if (tab) dispatchEvent(tab, hiddenTabEvent);\n  }\n};\n\n/**\n * Returns the current active tab and its target content.\n *\n * @param self the `Tab` instance\n * @returns the query result\n */\nconst getActiveTab = (\n  self: Tab,\n): { tab: HTMLElement | null; content: HTMLElement | null } => {\n  const { nav } = self;\n  // istanbul ignore next @preserve\n  if (!isHTMLElement(nav as HTMLElement | undefined)) {\n    return { tab: null, content: null };\n  }\n\n  const activeTabs = getElementsByClassName(activeClass, nav as HTMLElement);\n  let tab: HTMLElement | null = null;\n  // istanbul ignore else @preserve\n  if (\n    activeTabs.length === 1 &&\n    !dropdownClasses.some((c) =>\n      hasClass(activeTabs[0].parentElement as HTMLElement, c)\n    )\n  ) {\n    [tab] = activeTabs;\n  } else if (activeTabs.length > 1) {\n    tab = activeTabs[activeTabs.length - 1];\n  }\n  const content = isHTMLElement(tab as HTMLElement)\n    ? getTargetElement(tab as HTMLElement)\n    : null;\n  return { tab, content };\n};\n\n/**\n * Returns a parent dropdown.\n *\n * @param element the `Tab` element\n * @returns the parent dropdown\n */\nconst getParentDropdown = (element?: HTMLElement): HTMLElement | null => {\n  // istanbul ignore next @preserve\n  if (!isHTMLElement(element)) return null;\n  const dropdown = closest(element, `.${dropdownClasses.join(\",.\")}`);\n  return dropdown\n    ? querySelector(`.${dropdownClasses[0]}-toggle`, dropdown)\n    : null;\n};\n\n// TAB EVENT HANDLER\n// =================\n/**\n * Handles the `click` event listener.\n *\n * @param e the `Event` object\n */\nconst tabClickHandler = (e: Event) => {\n  const self = getTabInstance(e.target as HTMLElement);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    e.preventDefault();\n    self.show();\n  }\n};\n\n// TAB DEFINITION\n// ==============\n/** Creates a new `Tab` instance. */\nexport default class Tab extends BaseComponent {\n  static selector = tabSelector;\n  static init = tabInitCallback;\n  static getInstance = getTabInstance;\n  declare nav: HTMLElement | null;\n  declare content: HTMLElement | null;\n  declare tabContent: HTMLElement | null;\n  declare nextContent: HTMLElement | null;\n  declare dropdown: HTMLElement | null;\n\n  /** @param target the target element */\n  constructor(target: HTMLElement | string) {\n    super(target);\n\n    // initialization element\n    const { element } = this;\n    const content = getTargetElement(element);\n\n    // no point initializing a tab without a corresponding content\n    // istanbul ignore else @preserve\n    if (content) {\n      const nav = closest(element, \".nav\");\n      const container = closest(content, \".tab-content\");\n\n      this.nav = nav;\n      this.content = content;\n      this.tabContent = container;\n\n      // event targets\n      this.dropdown = getParentDropdown(element);\n\n      // show first Tab instance of none is shown\n      // suggested on #432\n      const { tab } = getActiveTab(this);\n      if (nav && !tab) {\n        const firstTab = querySelector(tabSelector, nav);\n        const firstTabContent = firstTab && getTargetElement(firstTab);\n\n        // istanbul ignore else @preserve\n        if (firstTabContent) {\n          addClass(firstTab, activeClass);\n          addClass(firstTabContent, showClass);\n          addClass(firstTabContent, activeClass);\n          setAttribute(element, ariaSelected, \"true\");\n        }\n      }\n\n      // add event listener\n      this._toggleEventListeners(true);\n    }\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return tabComponent;\n  }\n\n  // TAB PUBLIC METHODS\n  // ==================\n  /** Shows the tab to the user. */\n  show() {\n    const { element, content: nextContent, nav, dropdown } = this;\n\n    // istanbul ignore else @preserve\n    if (!(nav && Timer.get(nav)) && !hasClass(element, activeClass)) {\n      const { tab, content } = getActiveTab(this);\n\n      // istanbul ignore else @preserve\n      if (nav) {\n        tabPrivate.set(nav, { tab, content, currentHeight: 0, nextHeight: 0 });\n      }\n\n      // update relatedTarget and dispatch\n      hideTabEvent.relatedTarget = element;\n\n      // istanbul ignore else @preserve\n      if (isHTMLElement(tab)) {\n        dispatchEvent(tab as EventTarget, hideTabEvent);\n        // istanbul ignore else @preserve\n        if (!hideTabEvent.defaultPrevented) {\n          addClass(element, activeClass);\n          setAttribute(element, ariaSelected, \"true\");\n\n          const activeDropdown = isHTMLElement(tab) && getParentDropdown(tab);\n          if (activeDropdown && hasClass(activeDropdown, activeClass)) {\n            removeClass(activeDropdown, activeClass);\n          }\n\n          // istanbul ignore else @preserve\n          if (nav) {\n            const toggleTab = () => {\n              // istanbul ignore else @preserve\n              if (tab) {\n                removeClass(tab, activeClass);\n                setAttribute(tab, ariaSelected, \"false\");\n              }\n              if (dropdown && !hasClass(dropdown, activeClass)) {\n                addClass(dropdown, activeClass);\n              }\n            };\n\n            if (\n              content &&\n              (hasClass(content, fadeClass) ||\n                (nextContent && hasClass(nextContent, fadeClass)))\n            ) {\n              Timer.set(nav, toggleTab, 1);\n            } else toggleTab();\n          }\n\n          // istanbul ignore else @preserve\n          if (content) {\n            removeClass(content, showClass);\n            if (hasClass(content, fadeClass)) {\n              emulateTransitionEnd(content, () => triggerTabHide(this));\n            } else {\n              triggerTabHide(this);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Toggles on/off the `click` event listener.\n   *\n   * @param add when `true`, event listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    action(this.element, mouseclickEvent, tabClickHandler);\n  };\n\n  /** Removes the `Tab` component from the target element. */\n  dispose() {\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n","/** @type {string} */\nconst toastString = \"toast\";\nexport default toastString;\n","/** @type {string} */\nconst toastComponent = \"Toast\";\nexport default toastComponent;\n","/* Native JavaScript for Bootstrap 5 | Toast\n-------------------------------------------- */\nimport {\n  addClass,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focusinEvent,\n  focusoutEvent,\n  getDocument,\n  getInstance,\n  hasClass,\n  mouseclickEvent,\n  mouseenterEvent,\n  mouseleaveEvent,\n  querySelector,\n  querySelectorAll,\n  reflow,\n  removeClass,\n  Timer,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport fadeClass from \"../strings/fadeClass\";\nimport showClass from \"../strings/showClass\";\nimport dataBsDismiss from \"../strings/dataBsDismiss\";\nimport dataBsToggle from \"../strings/dataBsToggle\";\nimport toastString from \"../strings/toastString\";\nimport toastComponent from \"../strings/toastComponent\";\nimport getTargetElement from \"../util/getTargetElement\";\nimport BaseComponent from \"./base-component\";\nimport { ToastEvent, ToastOptions } from \"../interface/toast\";\n\n// TOAST PRIVATE GC\n// ================\nconst toastSelector = `.${toastString}`;\nconst toastDismissSelector = `[${dataBsDismiss}=\"${toastString}\"]`;\nconst toastToggleSelector = `[${dataBsToggle}=\"${toastString}\"]`;\nconst showingClass = \"showing\";\n/** @deprecated */\nconst hideClass = \"hide\";\n\nconst toastDefaults = {\n  animation: true,\n  autohide: true,\n  delay: 5000,\n};\n\n/**\n * Static method which returns an existing `Toast` instance associated\n * to a target `Element`.\n */\nconst getToastInstance = (element: HTMLElement) =>\n  getInstance<Toast>(element, toastComponent);\n\n/**\n * A `Toast` initialization callback.\n */\nconst toastInitCallback = (element: HTMLElement) => new Toast(element);\n\n// TOAST CUSTOM EVENTS\n// ===================\nconst showToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `show.bs.${toastString}`,\n);\nconst shownToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `shown.bs.${toastString}`,\n);\nconst hideToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `hide.bs.${toastString}`,\n);\nconst hiddenToastEvent = createCustomEvent<Record<string, never>, ToastEvent>(\n  `hidden.bs.${toastString}`,\n);\n\n// TOAST PRIVATE METHODS\n// =====================\n/**\n * Executes after the toast is shown to the user.\n *\n * @param self the `Toast` instance\n */\nconst showToastComplete = (self: Toast) => {\n  const { element, options } = self;\n  removeClass(element, showingClass);\n  Timer.clear(element, showingClass);\n\n  dispatchEvent(element, shownToastEvent);\n  // istanbul ignore else @preserve\n  if (options.autohide) {\n    Timer.set(element, () => self.hide(), options.delay, toastString);\n  }\n};\n\n/**\n * Executes after the toast is hidden to the user.\n *\n * @param self the `Toast` instance\n */\nconst hideToastComplete = (self: Toast) => {\n  const { element } = self;\n  removeClass(element, showingClass);\n  removeClass(element, showClass);\n  addClass(element, hideClass); // B/C\n  Timer.clear(element, toastString);\n  dispatchEvent(element, hiddenToastEvent);\n};\n\n/**\n * Executes before hiding the toast.\n *\n * @param self the `Toast` instance\n */\nconst hideToast = (self: Toast) => {\n  const { element, options } = self;\n  addClass(element, showingClass);\n\n  if (options.animation) {\n    reflow(element);\n    emulateTransitionEnd(element, () => hideToastComplete(self));\n  } else {\n    hideToastComplete(self);\n  }\n};\n\n/**\n * Executes before showing the toast.\n *\n * @param self the `Toast` instance\n */\nconst showToast = (self: Toast) => {\n  const { element, options } = self;\n  Timer.set(\n    element,\n    () => {\n      removeClass(element, hideClass); // B/C\n      reflow(element);\n      addClass(element, showClass);\n      addClass(element, showingClass);\n\n      if (options.animation) {\n        emulateTransitionEnd(element, () => showToastComplete(self));\n      } else {\n        showToastComplete(self);\n      }\n    },\n    17,\n    showingClass,\n  );\n};\n\n// TOAST EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for toast.\n *\n * @param e the `Event` object\n */\nconst toastClickHandler = (e: Event) => {\n  const { target } = e;\n\n  const trigger = target && closest(target as HTMLElement, toastToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getToastInstance(element);\n\n  // istanbul ignore else @preserve\n  if (self) {\n    // istanbul ignore else @preserve\n    if (trigger && trigger.tagName === \"A\") e.preventDefault();\n    self.relatedTarget = trigger;\n    self.show();\n  }\n};\n\n/**\n * Executes when user interacts with the toast without closing it,\n * usually by hovering or focusing it.\n *\n * @param e the `Toast` instance\n */\nconst interactiveToastHandler = (e: MouseEvent) => {\n  const element = e.target as HTMLElement;\n  const self = getToastInstance(element);\n  const { type, relatedTarget } = e;\n\n  // istanbul ignore else @preserve: a solid filter is required\n  if (\n    self && element !== relatedTarget &&\n    !element.contains(relatedTarget as Node)\n  ) {\n    if ([mouseenterEvent, focusinEvent].includes(type)) {\n      Timer.clear(element, toastString);\n    } else {\n      Timer.set(element, () => self.hide(), self.options.delay, toastString);\n    }\n  }\n};\n\n// TOAST DEFINITION\n// ================\n/** Creates a new `Toast` instance. */\nexport default class Toast extends BaseComponent {\n  static selector = toastSelector;\n  static init = toastInitCallback;\n  static getInstance = getToastInstance;\n  declare options: ToastOptions;\n  declare dismiss: HTMLElement | null;\n  declare triggers: HTMLElement[];\n  declare relatedTarget: HTMLElement | null;\n\n  /**\n   * @param target the target `.toast` element\n   * @param config the instance options\n   */\n  constructor(target: HTMLElement | string, config?: Partial<ToastOptions>) {\n    super(target, config);\n    const { element, options } = this;\n\n    // set fadeClass, the options.animation will override the markup\n    if (options.animation && !hasClass(element, fadeClass)) {\n      addClass(element, fadeClass);\n    } else if (!options.animation && hasClass(element, fadeClass)) {\n      removeClass(element, fadeClass);\n    }\n\n    // dismiss button\n    this.dismiss = querySelector(toastDismissSelector, element);\n\n    // toast can have multiple triggering elements\n    this.triggers = [\n      ...querySelectorAll(toastToggleSelector, getDocument(element)),\n    ].filter(\n      (btn) => getTargetElement(btn) === element,\n    );\n\n    // add event listener\n    this._toggleEventListeners(true);\n  }\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return toastComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return toastDefaults;\n  }\n  /**\n   * Returns *true* when toast is visible.\n   */\n  get isShown() {\n    return hasClass(this.element, showClass);\n  }\n\n  // TOAST PUBLIC METHODS\n  // ====================\n  /** Shows the toast. */\n  show = () => {\n    const { element, isShown } = this;\n\n    // istanbul ignore else @preserve\n    if (element && !isShown) {\n      dispatchEvent(element, showToastEvent);\n      if (!showToastEvent.defaultPrevented) {\n        showToast(this);\n      }\n    }\n  };\n\n  /** Hides the toast. */\n  hide = () => {\n    const { element, isShown } = this;\n\n    // istanbul ignore else @preserve\n    if (element && isShown) {\n      dispatchEvent(element, hideToastEvent);\n      if (!hideToastEvent.defaultPrevented) {\n        hideToast(this);\n      }\n    }\n  };\n\n  /**\n   * Toggles on/off the `click` event listener.\n   *\n   * @param add when `true`, it will add the listener\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    const { element, triggers, dismiss, options, hide } = this;\n\n    // istanbul ignore else @preserve\n    if (dismiss) {\n      action(dismiss, mouseclickEvent, hide);\n    }\n\n    // istanbul ignore else @preserve\n    if (options.autohide) {\n      [focusinEvent, focusoutEvent, mouseenterEvent, mouseleaveEvent].forEach(\n        (e) => action(element, e, interactiveToastHandler),\n      );\n    }\n    // istanbul ignore else @preserve\n    if (triggers.length) {\n      triggers.forEach((btn) =>\n        action(btn, mouseclickEvent, toastClickHandler)\n      );\n    }\n  };\n\n  /** Removes the `Toast` component from the target element. */\n  dispose() {\n    const { element, isShown } = this;\n    this._toggleEventListeners();\n    Timer.clear(element, toastString);\n\n    if (isShown) {\n      removeClass(element, showClass);\n    }\n    super.dispose();\n  }\n}\n","import { Data, getElementsByTagName, matches } from \"@thednp/shorty\";\n\nimport { addListener } from \"@thednp/event-listener\";\n\nimport Alert from \"../components/alert\";\nimport Button from \"../components/button\";\nimport Carousel from \"../components/carousel\";\nimport Collapse from \"../components/collapse\";\nimport Dropdown from \"../components/dropdown\";\nimport Modal from \"../components/modal\";\nimport Offcanvas from \"../components/offcanvas\";\nimport Popover from \"../components/popover\";\nimport ScrollSpy from \"../components/scrollspy\";\nimport Tab from \"../components/tab\";\nimport Toast from \"../components/toast\";\nimport Tooltip from \"../components/tooltip\";\n\nconst componentsList = new Map<\n  string,\n  | typeof Alert\n  | typeof Button\n  | typeof Carousel\n  | typeof Collapse\n  | typeof Dropdown\n  | typeof Modal\n  | typeof Offcanvas\n  | typeof Popover\n  | typeof ScrollSpy\n  | typeof Tab\n  | typeof Toast\n  | typeof Tooltip\n>();\n\ntype Component =\n  | Alert\n  | Button\n  | Carousel\n  | Collapse\n  | Dropdown\n  | Modal\n  | Offcanvas\n  | Popover\n  | ScrollSpy\n  | Tab\n  | Toast\n  | Tooltip;\n\n[\n  Alert,\n  Button,\n  Carousel,\n  Collapse,\n  Dropdown,\n  Modal,\n  Offcanvas,\n  Popover,\n  ScrollSpy,\n  Tab,\n  Toast,\n  Tooltip,\n].forEach((c) => componentsList.set(c.prototype.name, c));\n\n/**\n * Initialize all matched `Element`s for one component.\n *\n * @param callback\n * @param collection\n */\nconst initComponentDataAPI = (\n  callback: (el: HTMLElement) => Component,\n  collection: HTMLCollectionOf<HTMLElement> | HTMLElement[],\n) => {\n  [...collection].forEach((x) => callback(x));\n};\n\n/**\n * Remove one component from a target container element or all in the page.\n *\n * @param component the component name\n * @param context parent `Node`\n */\nconst removeComponentDataAPI = <T>(component: string, context: ParentNode) => {\n  const compData = Data.getAllFor(component) as Map<HTMLElement, T>;\n\n  if (compData) {\n    [...compData].forEach(([element, instance]) => {\n      if (context.contains(element)) {\n        (instance as T & { dispose: () => void }).dispose();\n      }\n    });\n  }\n};\n\n/**\n * Initialize all BSN components for a target container.\n *\n * @param context parent `Node`\n */\nexport const initCallback = (context?: ParentNode) => {\n  const lookUp = context && context.nodeName ? context : document;\n  const elemCollection = [...getElementsByTagName(\"*\", lookUp)];\n\n  componentsList.forEach((cs) => {\n    const { init, selector } = cs;\n    initComponentDataAPI(\n      init,\n      elemCollection.filter((item) => matches(item, selector)),\n    );\n  });\n};\n\n/**\n * Remove all BSN components for a target container.\n *\n * @param context parent `Node`\n */\nexport const removeDataAPI = (context?: ParentNode) => {\n  const lookUp = context && context.nodeName ? context : document;\n\n  componentsList.forEach((comp) => {\n    removeComponentDataAPI(comp.prototype.name, lookUp);\n  });\n};\n\n// Bulk initialize all components\nif (document.body) initCallback();\nelse {\n  addListener(document, \"DOMContentLoaded\", () => initCallback(), {\n    once: true,\n  });\n}\n"],"names":["ariaDescribedBy","ariaExpanded","ariaHidden","ariaModal","ariaPressed","ariaSelected","focusEvent","focusinEvent","focusoutEvent","keydownEvent","keyupEvent","mouseclickEvent","mousedownEvent","mousehoverEvent","mouseenterEvent","mouseleaveEvent","pointerdownEvent","pointermoveEvent","pointerupEvent","touchstartEvent","dragstartEvent","focusableSelector","keyArrowDown","keyArrowUp","keyArrowLeft","keyArrowRight","keyEscape","transitionDuration","transitionDelay","transitionEndEvent","transitionProperty","isApple","appleBrands","x","noop","on","element","eventName","listener","options","ops","off","getAttribute","att","hasAttribute","setAttribute","value","removeAttribute","addClass","classNAME","removeClass","hasClass","isObject","obj","isNode","node","isHTMLElement","componentData","Data","component","instance","instanceMap","getInstance","target","isString","str","isWindow","isDocument","getDocument","ObjectAssign","source","createElement","param","tagName","newElement","attr","dispatchEvent","event","getElementStyle","property","computedStyle","prop","getElementTransitionDelay","propertyValue","delayValue","delayScale","duration","getElementTransitionDuration","durationValue","durationScale","emulateTransitionEnd","handler","called","endEvent","delay","transitionEndWrapper","e","focus","normalizeValue","ObjectEntries","toLowerCase","normalizeOptions","defaultOps","inputOps","ns","INPUT","data","normalOps","dataOps","title","k","v","key","match","ObjectKeys","createCustomEvent","eventType","config","OriginalCustomEvent","passiveHandler","reflow","setElementStyle","styles","propObject","isMap","isNumber","num","TimeCache","Timer","callback","keyTimers","querySelectorAll","selector","parent","focusTrapMap","handleKeyboardNavigation","shiftKey","code","doc","focusableElements","el","firstFocusable","lastFocusable","hasFocusTrap","toggleFocusTrap","isCurrentlyTrapped","getBoundingClientRect","includeScale","width","height","top","right","bottom","left","scaleX","scaleY","offsetWidth2","offsetHeight2","getDocumentBody","getDocumentElement","isShadowRoot","getParentNode","elementUID","elementMapUID","elementIDMap","getUID","result","elID","elMap","elkey","getWindow","isArray","isElementInScrollRange","clientHeight","isFunction","fn","isNodeList","isRTL","isTableElement","closest","querySelector","getElementsByTagName","getElementsByClassName","matches","f","t","c","i","s","o","a","r","E","d","fadeClass","showClass","dataBsDismiss","alertString","alertComponent","Version","version","BaseComponent","prevInstance","alertSelector","alertDismissSelector","getAlertInstance","alertInitCallback","Alert","closeAlertEvent","closedAlertEvent","alertTransitionEnd","self","add","action","addListener","removeListener","dismiss","close","activeClass","dataBsToggle","buttonString","buttonComponent","buttonSelector","getButtonInstance","buttonInitCallback","Button","isActive","dataBsTarget","carouselString","carouselComponent","dataBsParent","dataBsContainer","getTargetElement","targetAttr","attValue","carouselSelector","carouselItem","dataBsSlideTo","dataBsSlide","pausedClass","carouselDefaults","getCarouselInstance","carouselInitCallback","Carousel","startX","currentX","endX","carouselSlideEvent","carouselSlidEvent","carouselTransitionEndHandler","index","direction","slides","activeItem","getActiveIndex","orientation","directionClass","carouselPauseHandler","carouselResumeHandler","carouselIndicatorHandler","newIndex","carouselControlsHandler","carouselKeyHandler","RTL","carouselDragHandler","carouselPointerDownHandler","controls","indicators","toggleCarouselTouchHandlers","carouselPointerMoveHandler","carouselPointerUpHandler","activateCarouselIndicator","activeIndex","transitionItem","ar","isPaused","idx","next","eventProperties","touch","pause","interval","keyboard","arrow","indicator","isAnimating","clone","collapsingClass","collapseString","collapseComponent","collapseSelector","collapseToggleSelector","collapseDefaults","getCollapseInstance","collapseInitCallback","Collapse","showCollapseEvent","shownCollapseEvent","hideCollapseEvent","hiddenCollapseEvent","expandCollapse","triggers","btn","collapseContent","collapseClickHandler","trigger","activeCollapse","activeCollapseInstance","dropdownMenuClasses","dropdownComponent","dropdownMenuClass","isEmptyAnchor","parentAnchor","dropdownString","dropupString","dropstartString","dropendString","dropdownClasses","dropdownSelector","getDropdownInstance","dropdownInitCallback","Dropdown","dropdownMenuEndClass","verticalClass","horizontalClass","menuFocusTags","dropdownDefaults","showDropdownEvent","shownDropdownEvent","hideDropdownEvent","hiddenDropdownEvent","updatedDropdownEvent","styleDropdown","menu","parentElement","offset","menuEnd","p","style","positionClass","dropdownMargin","dropdownPosition","menuWidth","menuHeight","clientWidth","targetLeft","targetTop","targetWidth","targetHeight","leftFullExceed","rightFullExceed","bottomExceed","bottomFullExceed","topExceed","leftExceed","rightExceed","posAjust","margins","getMenuItems","firstElementChild","toggleDropdownDismiss","dropdownDismissHandler","dropdownPreventScroll","dropdownKeyHandler","getCurrentOpenDropdown","currentParent","type","isForm","dropdownClickHandler","activeElement","open","menuItems","dropdownIntersectionHandler","entry","currentElement","currentInstance","modalString","modalComponent","offcanvasComponent","fixedTopClass","fixedBottomClass","stickyTopClass","positionStickyClass","getFixedItems","resetScrollbar","bd","fixedItems","fixed","measureScrollbar","innerWidth","setScrollbar","overflow","bodyPad","sbWidth","itemPadValue","itemMValue","offcanvasString","popupContainer","appendPopup","customContainer","containerIsBody","lookup","BODY","removePopup","hasPopup","backdropString","modalBackdropClass","offcanvasBackdropClass","modalActiveSelector","offcanvasActiveSelector","overlay","getCurrentOpen","toggleOverlayType","isModal","targetClass","appendOverlay","hasFade","showOverlay","hideOverlay","removeOverlay","isVisible","modalSelector","modalToggleSelector","modalDismissSelector","modalStaticClass","modalDefaults","getModalInstance","modalInitCallback","Modal","showModalEvent","shownModalEvent","hideModalEvent","hiddenModalEvent","setModalScrollbar","scrollbarWidth","scrollHeight","modalHeight","modalScrollHeight","modalOverflow","padStyle","toggleModalDismiss","modalDismissHandler","modalKeyHandler","afterModalHide","relatedTarget","focusElement","afterModalShow","beforeModalShow","beforeModalHide","modalClickHandler","currentTarget","isStatic","modalDialog","backdrop","selectedText","targetInsideDialog","staticTransitionEnd","overlayDelay","currentOpen","that","offcanvasSelector","offcanvasToggleSelector","offcanvasDismissSelector","offcanvasTogglingClass","offcanvasDefaults","getOffcanvasInstance","offcanvasInitCallback","Offcanvas","showOffcanvasEvent","shownOffcanvasEvent","hideOffcanvasEvent","hiddenOffcanvasEvent","setOffCanvasScrollbar","toggleOffCanvasDismiss","offcanvasKeyDismissHandler","offcanvasDismissHandler","beforeOffcanvasShow","showOffcanvasComplete","beforeOffcanvasHide","hideOffcanvasComplete","offcanvasTriggerHandler","offCanvasDismiss","selection","visibleTrigger","isOpen","popoverString","popoverComponent","tooltipString","getTipTemplate","tipType","isTooltip","bodyClass","header","body","tipClassPositions","styleTip","tipClasses","tooltip","container","tipPositions","isPopover","tipWidth","tipHeight","htmlcw","htmlch","htmlow","placement","parentCWidth","parentOWidth","fixedParent","leftBoundry","rightBoundry","elemWidth","elemHeight","elemRectLeft","elemRectRight","elemRectTop","y","topPosition","bottomPosition","leftPosition","rightPosition","arrowTop","arrowLeft","arrowRight","arrowWidth","arrowHeight","arrowAdjust","horizontals","verticals","updatedTooltipEvent","tooltipDefaults","_","B","m","n","h","l","u","b","g","dataOriginalTitle","tooltipComponent","setHtml","content","sanitizeFn","dirty","tempDocument","createTip","id","template","animation","customClass","dismissible","btnClose","tipString","titleParts","contentParts","placementClass","tooltipTemplate","htmlMarkup","tooltipHeader","tooltipBody","tempTitle","tempContent","tempBtn","getElementContainer","majorBlockTags","containers","parentNode","tooltipSelector","titleAttr","getTooltipInstance","tooltipInitCallback","Tooltip","removeTooltip","offsetParent","hasTip","disposeTooltipComplete","toggleTooltipTitle","toggleTooltipAction","tooltipShownAction","shownTooltipEvent","tooltipHiddenAction","hiddenTooltipEvent","toggleTooltipOpenHandlers","parentModal","parentOffcanvas","titleAtt","tipComponent","elem","position","PositionObserver","outTimer","tipContainer","showTooltipEvent","hideTooltipEvent","enabled","tr","popoverSelector","popoverDefaults","getPopoverInstance","popoverInitCallback","Popover","scrollspyString","scrollspyComponent","scrollspySelector","scrollspyDefaults","getScrollSpyInstance","scrollspyInitCallback","ScrollSpy","activateScrollSpy","updateSpyTargets","scrollTarget","itemsLength","isRoot","links","scrollHEIGHT","href","targetItem","rect","getOffsetHeight","link","toggleObservers","targets","_observer","getScrollHeight","clear","item","activate","parents","parentItem","menuItem","parentLink","scrollTop","maxScroll","items","newActiveItem","offsets","tabString","tabComponent","tabSelector","getTabInstance","tabInitCallback","Tab","showTabEvent","shownTabEvent","hideTabEvent","hiddenTabEvent","tabPrivate","triggerTabEnd","tabContent","nav","triggerTabShow","nextContent","tab","currentHeight","nextHeight","triggerTabHide","getActiveTab","activeTabs","getParentDropdown","dropdown","tabClickHandler","firstTab","firstTabContent","activeDropdown","toggleTab","toastString","toastComponent","toastSelector","toastDismissSelector","toastToggleSelector","showingClass","hideClass","toastDefaults","getToastInstance","toastInitCallback","Toast","showToastEvent","shownToastEvent","hideToastEvent","hiddenToastEvent","showToastComplete","hideToastComplete","hideToast","showToast","toastClickHandler","interactiveToastHandler","isShown","hide","componentsList","initComponentDataAPI","collection","removeComponentDataAPI","context","compData","initCallback","lookUp","elemCollection","cs","init","removeDataAPI","comp"],"mappings":"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","x_google_ignoreList":[0,1,52]}